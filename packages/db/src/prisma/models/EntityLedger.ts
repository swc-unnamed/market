
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `EntityLedger` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model EntityLedger
 * 
 */
export type EntityLedgerModel = runtime.Types.Result.DefaultSelection<Prisma.$EntityLedgerPayload>

export type AggregateEntityLedger = {
  _count: EntityLedgerCountAggregateOutputType | null
  _min: EntityLedgerMinAggregateOutputType | null
  _max: EntityLedgerMaxAggregateOutputType | null
}

export type EntityLedgerMinAggregateOutputType = {
  id: string | null
  entityId: string | null
  type: $Enums.EntityLedgerType | null
  value: string | null
  timestamp: Date | null
}

export type EntityLedgerMaxAggregateOutputType = {
  id: string | null
  entityId: string | null
  type: $Enums.EntityLedgerType | null
  value: string | null
  timestamp: Date | null
}

export type EntityLedgerCountAggregateOutputType = {
  id: number
  entityId: number
  type: number
  value: number
  timestamp: number
  _all: number
}


export type EntityLedgerMinAggregateInputType = {
  id?: true
  entityId?: true
  type?: true
  value?: true
  timestamp?: true
}

export type EntityLedgerMaxAggregateInputType = {
  id?: true
  entityId?: true
  type?: true
  value?: true
  timestamp?: true
}

export type EntityLedgerCountAggregateInputType = {
  id?: true
  entityId?: true
  type?: true
  value?: true
  timestamp?: true
  _all?: true
}

export type EntityLedgerAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EntityLedger to aggregate.
   */
  where?: Prisma.EntityLedgerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EntityLedgers to fetch.
   */
  orderBy?: Prisma.EntityLedgerOrderByWithRelationInput | Prisma.EntityLedgerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EntityLedgerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EntityLedgers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EntityLedgers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EntityLedgers
  **/
  _count?: true | EntityLedgerCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EntityLedgerMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EntityLedgerMaxAggregateInputType
}

export type GetEntityLedgerAggregateType<T extends EntityLedgerAggregateArgs> = {
      [P in keyof T & keyof AggregateEntityLedger]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEntityLedger[P]>
    : Prisma.GetScalarType<T[P], AggregateEntityLedger[P]>
}




export type EntityLedgerGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EntityLedgerWhereInput
  orderBy?: Prisma.EntityLedgerOrderByWithAggregationInput | Prisma.EntityLedgerOrderByWithAggregationInput[]
  by: Prisma.EntityLedgerScalarFieldEnum[] | Prisma.EntityLedgerScalarFieldEnum
  having?: Prisma.EntityLedgerScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EntityLedgerCountAggregateInputType | true
  _min?: EntityLedgerMinAggregateInputType
  _max?: EntityLedgerMaxAggregateInputType
}

export type EntityLedgerGroupByOutputType = {
  id: string
  entityId: string
  type: $Enums.EntityLedgerType
  value: string
  timestamp: Date
  _count: EntityLedgerCountAggregateOutputType | null
  _min: EntityLedgerMinAggregateOutputType | null
  _max: EntityLedgerMaxAggregateOutputType | null
}

type GetEntityLedgerGroupByPayload<T extends EntityLedgerGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EntityLedgerGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EntityLedgerGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EntityLedgerGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EntityLedgerGroupByOutputType[P]>
      }
    >
  > 



export type EntityLedgerWhereInput = {
  AND?: Prisma.EntityLedgerWhereInput | Prisma.EntityLedgerWhereInput[]
  OR?: Prisma.EntityLedgerWhereInput[]
  NOT?: Prisma.EntityLedgerWhereInput | Prisma.EntityLedgerWhereInput[]
  id?: Prisma.StringFilter<"EntityLedger"> | string
  entityId?: Prisma.StringFilter<"EntityLedger"> | string
  type?: Prisma.EnumEntityLedgerTypeFilter<"EntityLedger"> | $Enums.EntityLedgerType
  value?: Prisma.StringFilter<"EntityLedger"> | string
  timestamp?: Prisma.DateTimeFilter<"EntityLedger"> | Date | string
  entity?: Prisma.XOR<Prisma.EntityScalarRelationFilter, Prisma.EntityWhereInput>
}

export type EntityLedgerOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  entityId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  value?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  entity?: Prisma.EntityOrderByWithRelationInput
}

export type EntityLedgerWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.EntityLedgerWhereInput | Prisma.EntityLedgerWhereInput[]
  OR?: Prisma.EntityLedgerWhereInput[]
  NOT?: Prisma.EntityLedgerWhereInput | Prisma.EntityLedgerWhereInput[]
  entityId?: Prisma.StringFilter<"EntityLedger"> | string
  type?: Prisma.EnumEntityLedgerTypeFilter<"EntityLedger"> | $Enums.EntityLedgerType
  value?: Prisma.StringFilter<"EntityLedger"> | string
  timestamp?: Prisma.DateTimeFilter<"EntityLedger"> | Date | string
  entity?: Prisma.XOR<Prisma.EntityScalarRelationFilter, Prisma.EntityWhereInput>
}, "id">

export type EntityLedgerOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  entityId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  value?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  _count?: Prisma.EntityLedgerCountOrderByAggregateInput
  _max?: Prisma.EntityLedgerMaxOrderByAggregateInput
  _min?: Prisma.EntityLedgerMinOrderByAggregateInput
}

export type EntityLedgerScalarWhereWithAggregatesInput = {
  AND?: Prisma.EntityLedgerScalarWhereWithAggregatesInput | Prisma.EntityLedgerScalarWhereWithAggregatesInput[]
  OR?: Prisma.EntityLedgerScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EntityLedgerScalarWhereWithAggregatesInput | Prisma.EntityLedgerScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"EntityLedger"> | string
  entityId?: Prisma.StringWithAggregatesFilter<"EntityLedger"> | string
  type?: Prisma.EnumEntityLedgerTypeWithAggregatesFilter<"EntityLedger"> | $Enums.EntityLedgerType
  value?: Prisma.StringWithAggregatesFilter<"EntityLedger"> | string
  timestamp?: Prisma.DateTimeWithAggregatesFilter<"EntityLedger"> | Date | string
}

export type EntityLedgerCreateInput = {
  id?: string
  type: $Enums.EntityLedgerType
  value: string
  timestamp?: Date | string
  entity: Prisma.EntityCreateNestedOneWithoutLedgersInput
}

export type EntityLedgerUncheckedCreateInput = {
  id?: string
  entityId: string
  type: $Enums.EntityLedgerType
  value: string
  timestamp?: Date | string
}

export type EntityLedgerUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumEntityLedgerTypeFieldUpdateOperationsInput | $Enums.EntityLedgerType
  value?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  entity?: Prisma.EntityUpdateOneRequiredWithoutLedgersNestedInput
}

export type EntityLedgerUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumEntityLedgerTypeFieldUpdateOperationsInput | $Enums.EntityLedgerType
  value?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EntityLedgerCreateManyInput = {
  id?: string
  entityId: string
  type: $Enums.EntityLedgerType
  value: string
  timestamp?: Date | string
}

export type EntityLedgerUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumEntityLedgerTypeFieldUpdateOperationsInput | $Enums.EntityLedgerType
  value?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EntityLedgerUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumEntityLedgerTypeFieldUpdateOperationsInput | $Enums.EntityLedgerType
  value?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EntityLedgerListRelationFilter = {
  every?: Prisma.EntityLedgerWhereInput
  some?: Prisma.EntityLedgerWhereInput
  none?: Prisma.EntityLedgerWhereInput
}

export type EntityLedgerOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EntityLedgerCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  entityId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  value?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type EntityLedgerMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  entityId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  value?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type EntityLedgerMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  entityId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  value?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type EntityLedgerCreateNestedManyWithoutEntityInput = {
  create?: Prisma.XOR<Prisma.EntityLedgerCreateWithoutEntityInput, Prisma.EntityLedgerUncheckedCreateWithoutEntityInput> | Prisma.EntityLedgerCreateWithoutEntityInput[] | Prisma.EntityLedgerUncheckedCreateWithoutEntityInput[]
  connectOrCreate?: Prisma.EntityLedgerCreateOrConnectWithoutEntityInput | Prisma.EntityLedgerCreateOrConnectWithoutEntityInput[]
  createMany?: Prisma.EntityLedgerCreateManyEntityInputEnvelope
  connect?: Prisma.EntityLedgerWhereUniqueInput | Prisma.EntityLedgerWhereUniqueInput[]
}

export type EntityLedgerUncheckedCreateNestedManyWithoutEntityInput = {
  create?: Prisma.XOR<Prisma.EntityLedgerCreateWithoutEntityInput, Prisma.EntityLedgerUncheckedCreateWithoutEntityInput> | Prisma.EntityLedgerCreateWithoutEntityInput[] | Prisma.EntityLedgerUncheckedCreateWithoutEntityInput[]
  connectOrCreate?: Prisma.EntityLedgerCreateOrConnectWithoutEntityInput | Prisma.EntityLedgerCreateOrConnectWithoutEntityInput[]
  createMany?: Prisma.EntityLedgerCreateManyEntityInputEnvelope
  connect?: Prisma.EntityLedgerWhereUniqueInput | Prisma.EntityLedgerWhereUniqueInput[]
}

export type EntityLedgerUpdateManyWithoutEntityNestedInput = {
  create?: Prisma.XOR<Prisma.EntityLedgerCreateWithoutEntityInput, Prisma.EntityLedgerUncheckedCreateWithoutEntityInput> | Prisma.EntityLedgerCreateWithoutEntityInput[] | Prisma.EntityLedgerUncheckedCreateWithoutEntityInput[]
  connectOrCreate?: Prisma.EntityLedgerCreateOrConnectWithoutEntityInput | Prisma.EntityLedgerCreateOrConnectWithoutEntityInput[]
  upsert?: Prisma.EntityLedgerUpsertWithWhereUniqueWithoutEntityInput | Prisma.EntityLedgerUpsertWithWhereUniqueWithoutEntityInput[]
  createMany?: Prisma.EntityLedgerCreateManyEntityInputEnvelope
  set?: Prisma.EntityLedgerWhereUniqueInput | Prisma.EntityLedgerWhereUniqueInput[]
  disconnect?: Prisma.EntityLedgerWhereUniqueInput | Prisma.EntityLedgerWhereUniqueInput[]
  delete?: Prisma.EntityLedgerWhereUniqueInput | Prisma.EntityLedgerWhereUniqueInput[]
  connect?: Prisma.EntityLedgerWhereUniqueInput | Prisma.EntityLedgerWhereUniqueInput[]
  update?: Prisma.EntityLedgerUpdateWithWhereUniqueWithoutEntityInput | Prisma.EntityLedgerUpdateWithWhereUniqueWithoutEntityInput[]
  updateMany?: Prisma.EntityLedgerUpdateManyWithWhereWithoutEntityInput | Prisma.EntityLedgerUpdateManyWithWhereWithoutEntityInput[]
  deleteMany?: Prisma.EntityLedgerScalarWhereInput | Prisma.EntityLedgerScalarWhereInput[]
}

export type EntityLedgerUncheckedUpdateManyWithoutEntityNestedInput = {
  create?: Prisma.XOR<Prisma.EntityLedgerCreateWithoutEntityInput, Prisma.EntityLedgerUncheckedCreateWithoutEntityInput> | Prisma.EntityLedgerCreateWithoutEntityInput[] | Prisma.EntityLedgerUncheckedCreateWithoutEntityInput[]
  connectOrCreate?: Prisma.EntityLedgerCreateOrConnectWithoutEntityInput | Prisma.EntityLedgerCreateOrConnectWithoutEntityInput[]
  upsert?: Prisma.EntityLedgerUpsertWithWhereUniqueWithoutEntityInput | Prisma.EntityLedgerUpsertWithWhereUniqueWithoutEntityInput[]
  createMany?: Prisma.EntityLedgerCreateManyEntityInputEnvelope
  set?: Prisma.EntityLedgerWhereUniqueInput | Prisma.EntityLedgerWhereUniqueInput[]
  disconnect?: Prisma.EntityLedgerWhereUniqueInput | Prisma.EntityLedgerWhereUniqueInput[]
  delete?: Prisma.EntityLedgerWhereUniqueInput | Prisma.EntityLedgerWhereUniqueInput[]
  connect?: Prisma.EntityLedgerWhereUniqueInput | Prisma.EntityLedgerWhereUniqueInput[]
  update?: Prisma.EntityLedgerUpdateWithWhereUniqueWithoutEntityInput | Prisma.EntityLedgerUpdateWithWhereUniqueWithoutEntityInput[]
  updateMany?: Prisma.EntityLedgerUpdateManyWithWhereWithoutEntityInput | Prisma.EntityLedgerUpdateManyWithWhereWithoutEntityInput[]
  deleteMany?: Prisma.EntityLedgerScalarWhereInput | Prisma.EntityLedgerScalarWhereInput[]
}

export type EnumEntityLedgerTypeFieldUpdateOperationsInput = {
  set?: $Enums.EntityLedgerType
}

export type EntityLedgerCreateWithoutEntityInput = {
  id?: string
  type: $Enums.EntityLedgerType
  value: string
  timestamp?: Date | string
}

export type EntityLedgerUncheckedCreateWithoutEntityInput = {
  id?: string
  type: $Enums.EntityLedgerType
  value: string
  timestamp?: Date | string
}

export type EntityLedgerCreateOrConnectWithoutEntityInput = {
  where: Prisma.EntityLedgerWhereUniqueInput
  create: Prisma.XOR<Prisma.EntityLedgerCreateWithoutEntityInput, Prisma.EntityLedgerUncheckedCreateWithoutEntityInput>
}

export type EntityLedgerCreateManyEntityInputEnvelope = {
  data: Prisma.EntityLedgerCreateManyEntityInput | Prisma.EntityLedgerCreateManyEntityInput[]
  skipDuplicates?: boolean
}

export type EntityLedgerUpsertWithWhereUniqueWithoutEntityInput = {
  where: Prisma.EntityLedgerWhereUniqueInput
  update: Prisma.XOR<Prisma.EntityLedgerUpdateWithoutEntityInput, Prisma.EntityLedgerUncheckedUpdateWithoutEntityInput>
  create: Prisma.XOR<Prisma.EntityLedgerCreateWithoutEntityInput, Prisma.EntityLedgerUncheckedCreateWithoutEntityInput>
}

export type EntityLedgerUpdateWithWhereUniqueWithoutEntityInput = {
  where: Prisma.EntityLedgerWhereUniqueInput
  data: Prisma.XOR<Prisma.EntityLedgerUpdateWithoutEntityInput, Prisma.EntityLedgerUncheckedUpdateWithoutEntityInput>
}

export type EntityLedgerUpdateManyWithWhereWithoutEntityInput = {
  where: Prisma.EntityLedgerScalarWhereInput
  data: Prisma.XOR<Prisma.EntityLedgerUpdateManyMutationInput, Prisma.EntityLedgerUncheckedUpdateManyWithoutEntityInput>
}

export type EntityLedgerScalarWhereInput = {
  AND?: Prisma.EntityLedgerScalarWhereInput | Prisma.EntityLedgerScalarWhereInput[]
  OR?: Prisma.EntityLedgerScalarWhereInput[]
  NOT?: Prisma.EntityLedgerScalarWhereInput | Prisma.EntityLedgerScalarWhereInput[]
  id?: Prisma.StringFilter<"EntityLedger"> | string
  entityId?: Prisma.StringFilter<"EntityLedger"> | string
  type?: Prisma.EnumEntityLedgerTypeFilter<"EntityLedger"> | $Enums.EntityLedgerType
  value?: Prisma.StringFilter<"EntityLedger"> | string
  timestamp?: Prisma.DateTimeFilter<"EntityLedger"> | Date | string
}

export type EntityLedgerCreateManyEntityInput = {
  id?: string
  type: $Enums.EntityLedgerType
  value: string
  timestamp?: Date | string
}

export type EntityLedgerUpdateWithoutEntityInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumEntityLedgerTypeFieldUpdateOperationsInput | $Enums.EntityLedgerType
  value?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EntityLedgerUncheckedUpdateWithoutEntityInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumEntityLedgerTypeFieldUpdateOperationsInput | $Enums.EntityLedgerType
  value?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EntityLedgerUncheckedUpdateManyWithoutEntityInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumEntityLedgerTypeFieldUpdateOperationsInput | $Enums.EntityLedgerType
  value?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type EntityLedgerSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  entityId?: boolean
  type?: boolean
  value?: boolean
  timestamp?: boolean
  entity?: boolean | Prisma.EntityDefaultArgs<ExtArgs>
}, ExtArgs["result"]["entityLedger"]>

export type EntityLedgerSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  entityId?: boolean
  type?: boolean
  value?: boolean
  timestamp?: boolean
  entity?: boolean | Prisma.EntityDefaultArgs<ExtArgs>
}, ExtArgs["result"]["entityLedger"]>

export type EntityLedgerSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  entityId?: boolean
  type?: boolean
  value?: boolean
  timestamp?: boolean
  entity?: boolean | Prisma.EntityDefaultArgs<ExtArgs>
}, ExtArgs["result"]["entityLedger"]>

export type EntityLedgerSelectScalar = {
  id?: boolean
  entityId?: boolean
  type?: boolean
  value?: boolean
  timestamp?: boolean
}

export type EntityLedgerOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "entityId" | "type" | "value" | "timestamp", ExtArgs["result"]["entityLedger"]>
export type EntityLedgerInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  entity?: boolean | Prisma.EntityDefaultArgs<ExtArgs>
}
export type EntityLedgerIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  entity?: boolean | Prisma.EntityDefaultArgs<ExtArgs>
}
export type EntityLedgerIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  entity?: boolean | Prisma.EntityDefaultArgs<ExtArgs>
}

export type $EntityLedgerPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EntityLedger"
  objects: {
    entity: Prisma.$EntityPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    entityId: string
    type: $Enums.EntityLedgerType
    value: string
    timestamp: Date
  }, ExtArgs["result"]["entityLedger"]>
  composites: {}
}

export type EntityLedgerGetPayload<S extends boolean | null | undefined | EntityLedgerDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EntityLedgerPayload, S>

export type EntityLedgerCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EntityLedgerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: EntityLedgerCountAggregateInputType | true
  }

export interface EntityLedgerDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EntityLedger'], meta: { name: 'EntityLedger' } }
  /**
   * Find zero or one EntityLedger that matches the filter.
   * @param {EntityLedgerFindUniqueArgs} args - Arguments to find a EntityLedger
   * @example
   * // Get one EntityLedger
   * const entityLedger = await prisma.entityLedger.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EntityLedgerFindUniqueArgs>(args: Prisma.SelectSubset<T, EntityLedgerFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EntityLedgerClient<runtime.Types.Result.GetResult<Prisma.$EntityLedgerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EntityLedger that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EntityLedgerFindUniqueOrThrowArgs} args - Arguments to find a EntityLedger
   * @example
   * // Get one EntityLedger
   * const entityLedger = await prisma.entityLedger.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EntityLedgerFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EntityLedgerFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EntityLedgerClient<runtime.Types.Result.GetResult<Prisma.$EntityLedgerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EntityLedger that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntityLedgerFindFirstArgs} args - Arguments to find a EntityLedger
   * @example
   * // Get one EntityLedger
   * const entityLedger = await prisma.entityLedger.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EntityLedgerFindFirstArgs>(args?: Prisma.SelectSubset<T, EntityLedgerFindFirstArgs<ExtArgs>>): Prisma.Prisma__EntityLedgerClient<runtime.Types.Result.GetResult<Prisma.$EntityLedgerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EntityLedger that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntityLedgerFindFirstOrThrowArgs} args - Arguments to find a EntityLedger
   * @example
   * // Get one EntityLedger
   * const entityLedger = await prisma.entityLedger.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EntityLedgerFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EntityLedgerFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EntityLedgerClient<runtime.Types.Result.GetResult<Prisma.$EntityLedgerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EntityLedgers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntityLedgerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EntityLedgers
   * const entityLedgers = await prisma.entityLedger.findMany()
   * 
   * // Get first 10 EntityLedgers
   * const entityLedgers = await prisma.entityLedger.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const entityLedgerWithIdOnly = await prisma.entityLedger.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EntityLedgerFindManyArgs>(args?: Prisma.SelectSubset<T, EntityLedgerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EntityLedgerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EntityLedger.
   * @param {EntityLedgerCreateArgs} args - Arguments to create a EntityLedger.
   * @example
   * // Create one EntityLedger
   * const EntityLedger = await prisma.entityLedger.create({
   *   data: {
   *     // ... data to create a EntityLedger
   *   }
   * })
   * 
   */
  create<T extends EntityLedgerCreateArgs>(args: Prisma.SelectSubset<T, EntityLedgerCreateArgs<ExtArgs>>): Prisma.Prisma__EntityLedgerClient<runtime.Types.Result.GetResult<Prisma.$EntityLedgerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EntityLedgers.
   * @param {EntityLedgerCreateManyArgs} args - Arguments to create many EntityLedgers.
   * @example
   * // Create many EntityLedgers
   * const entityLedger = await prisma.entityLedger.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EntityLedgerCreateManyArgs>(args?: Prisma.SelectSubset<T, EntityLedgerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many EntityLedgers and returns the data saved in the database.
   * @param {EntityLedgerCreateManyAndReturnArgs} args - Arguments to create many EntityLedgers.
   * @example
   * // Create many EntityLedgers
   * const entityLedger = await prisma.entityLedger.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many EntityLedgers and only return the `id`
   * const entityLedgerWithIdOnly = await prisma.entityLedger.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EntityLedgerCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EntityLedgerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EntityLedgerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a EntityLedger.
   * @param {EntityLedgerDeleteArgs} args - Arguments to delete one EntityLedger.
   * @example
   * // Delete one EntityLedger
   * const EntityLedger = await prisma.entityLedger.delete({
   *   where: {
   *     // ... filter to delete one EntityLedger
   *   }
   * })
   * 
   */
  delete<T extends EntityLedgerDeleteArgs>(args: Prisma.SelectSubset<T, EntityLedgerDeleteArgs<ExtArgs>>): Prisma.Prisma__EntityLedgerClient<runtime.Types.Result.GetResult<Prisma.$EntityLedgerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EntityLedger.
   * @param {EntityLedgerUpdateArgs} args - Arguments to update one EntityLedger.
   * @example
   * // Update one EntityLedger
   * const entityLedger = await prisma.entityLedger.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EntityLedgerUpdateArgs>(args: Prisma.SelectSubset<T, EntityLedgerUpdateArgs<ExtArgs>>): Prisma.Prisma__EntityLedgerClient<runtime.Types.Result.GetResult<Prisma.$EntityLedgerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EntityLedgers.
   * @param {EntityLedgerDeleteManyArgs} args - Arguments to filter EntityLedgers to delete.
   * @example
   * // Delete a few EntityLedgers
   * const { count } = await prisma.entityLedger.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EntityLedgerDeleteManyArgs>(args?: Prisma.SelectSubset<T, EntityLedgerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EntityLedgers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntityLedgerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EntityLedgers
   * const entityLedger = await prisma.entityLedger.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EntityLedgerUpdateManyArgs>(args: Prisma.SelectSubset<T, EntityLedgerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EntityLedgers and returns the data updated in the database.
   * @param {EntityLedgerUpdateManyAndReturnArgs} args - Arguments to update many EntityLedgers.
   * @example
   * // Update many EntityLedgers
   * const entityLedger = await prisma.entityLedger.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more EntityLedgers and only return the `id`
   * const entityLedgerWithIdOnly = await prisma.entityLedger.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EntityLedgerUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EntityLedgerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EntityLedgerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one EntityLedger.
   * @param {EntityLedgerUpsertArgs} args - Arguments to update or create a EntityLedger.
   * @example
   * // Update or create a EntityLedger
   * const entityLedger = await prisma.entityLedger.upsert({
   *   create: {
   *     // ... data to create a EntityLedger
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EntityLedger we want to update
   *   }
   * })
   */
  upsert<T extends EntityLedgerUpsertArgs>(args: Prisma.SelectSubset<T, EntityLedgerUpsertArgs<ExtArgs>>): Prisma.Prisma__EntityLedgerClient<runtime.Types.Result.GetResult<Prisma.$EntityLedgerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EntityLedgers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntityLedgerCountArgs} args - Arguments to filter EntityLedgers to count.
   * @example
   * // Count the number of EntityLedgers
   * const count = await prisma.entityLedger.count({
   *   where: {
   *     // ... the filter for the EntityLedgers we want to count
   *   }
   * })
  **/
  count<T extends EntityLedgerCountArgs>(
    args?: Prisma.Subset<T, EntityLedgerCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EntityLedgerCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EntityLedger.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntityLedgerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EntityLedgerAggregateArgs>(args: Prisma.Subset<T, EntityLedgerAggregateArgs>): Prisma.PrismaPromise<GetEntityLedgerAggregateType<T>>

  /**
   * Group by EntityLedger.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntityLedgerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EntityLedgerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EntityLedgerGroupByArgs['orderBy'] }
      : { orderBy?: EntityLedgerGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EntityLedgerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEntityLedgerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EntityLedger model
 */
readonly fields: EntityLedgerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EntityLedger.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EntityLedgerClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  entity<T extends Prisma.EntityDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EntityDefaultArgs<ExtArgs>>): Prisma.Prisma__EntityClient<runtime.Types.Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EntityLedger model
 */
export interface EntityLedgerFieldRefs {
  readonly id: Prisma.FieldRef<"EntityLedger", 'String'>
  readonly entityId: Prisma.FieldRef<"EntityLedger", 'String'>
  readonly type: Prisma.FieldRef<"EntityLedger", 'EntityLedgerType'>
  readonly value: Prisma.FieldRef<"EntityLedger", 'String'>
  readonly timestamp: Prisma.FieldRef<"EntityLedger", 'DateTime'>
}
    

// Custom InputTypes
/**
 * EntityLedger findUnique
 */
export type EntityLedgerFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntityLedger
   */
  select?: Prisma.EntityLedgerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntityLedger
   */
  omit?: Prisma.EntityLedgerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityLedgerInclude<ExtArgs> | null
  /**
   * Filter, which EntityLedger to fetch.
   */
  where: Prisma.EntityLedgerWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * EntityLedger findUniqueOrThrow
 */
export type EntityLedgerFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntityLedger
   */
  select?: Prisma.EntityLedgerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntityLedger
   */
  omit?: Prisma.EntityLedgerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityLedgerInclude<ExtArgs> | null
  /**
   * Filter, which EntityLedger to fetch.
   */
  where: Prisma.EntityLedgerWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * EntityLedger findFirst
 */
export type EntityLedgerFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntityLedger
   */
  select?: Prisma.EntityLedgerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntityLedger
   */
  omit?: Prisma.EntityLedgerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityLedgerInclude<ExtArgs> | null
  /**
   * Filter, which EntityLedger to fetch.
   */
  where?: Prisma.EntityLedgerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EntityLedgers to fetch.
   */
  orderBy?: Prisma.EntityLedgerOrderByWithRelationInput | Prisma.EntityLedgerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EntityLedgers.
   */
  cursor?: Prisma.EntityLedgerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EntityLedgers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EntityLedgers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EntityLedgers.
   */
  distinct?: Prisma.EntityLedgerScalarFieldEnum | Prisma.EntityLedgerScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * EntityLedger findFirstOrThrow
 */
export type EntityLedgerFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntityLedger
   */
  select?: Prisma.EntityLedgerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntityLedger
   */
  omit?: Prisma.EntityLedgerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityLedgerInclude<ExtArgs> | null
  /**
   * Filter, which EntityLedger to fetch.
   */
  where?: Prisma.EntityLedgerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EntityLedgers to fetch.
   */
  orderBy?: Prisma.EntityLedgerOrderByWithRelationInput | Prisma.EntityLedgerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EntityLedgers.
   */
  cursor?: Prisma.EntityLedgerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EntityLedgers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EntityLedgers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EntityLedgers.
   */
  distinct?: Prisma.EntityLedgerScalarFieldEnum | Prisma.EntityLedgerScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * EntityLedger findMany
 */
export type EntityLedgerFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntityLedger
   */
  select?: Prisma.EntityLedgerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntityLedger
   */
  omit?: Prisma.EntityLedgerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityLedgerInclude<ExtArgs> | null
  /**
   * Filter, which EntityLedgers to fetch.
   */
  where?: Prisma.EntityLedgerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EntityLedgers to fetch.
   */
  orderBy?: Prisma.EntityLedgerOrderByWithRelationInput | Prisma.EntityLedgerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EntityLedgers.
   */
  cursor?: Prisma.EntityLedgerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EntityLedgers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EntityLedgers.
   */
  skip?: number
  distinct?: Prisma.EntityLedgerScalarFieldEnum | Prisma.EntityLedgerScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * EntityLedger create
 */
export type EntityLedgerCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntityLedger
   */
  select?: Prisma.EntityLedgerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntityLedger
   */
  omit?: Prisma.EntityLedgerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityLedgerInclude<ExtArgs> | null
  /**
   * The data needed to create a EntityLedger.
   */
  data: Prisma.XOR<Prisma.EntityLedgerCreateInput, Prisma.EntityLedgerUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * EntityLedger createMany
 */
export type EntityLedgerCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EntityLedgers.
   */
  data: Prisma.EntityLedgerCreateManyInput | Prisma.EntityLedgerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * EntityLedger createManyAndReturn
 */
export type EntityLedgerCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntityLedger
   */
  select?: Prisma.EntityLedgerSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EntityLedger
   */
  omit?: Prisma.EntityLedgerOmit<ExtArgs> | null
  /**
   * The data used to create many EntityLedgers.
   */
  data: Prisma.EntityLedgerCreateManyInput | Prisma.EntityLedgerCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityLedgerIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * EntityLedger update
 */
export type EntityLedgerUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntityLedger
   */
  select?: Prisma.EntityLedgerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntityLedger
   */
  omit?: Prisma.EntityLedgerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityLedgerInclude<ExtArgs> | null
  /**
   * The data needed to update a EntityLedger.
   */
  data: Prisma.XOR<Prisma.EntityLedgerUpdateInput, Prisma.EntityLedgerUncheckedUpdateInput>
  /**
   * Choose, which EntityLedger to update.
   */
  where: Prisma.EntityLedgerWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * EntityLedger updateMany
 */
export type EntityLedgerUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EntityLedgers.
   */
  data: Prisma.XOR<Prisma.EntityLedgerUpdateManyMutationInput, Prisma.EntityLedgerUncheckedUpdateManyInput>
  /**
   * Filter which EntityLedgers to update
   */
  where?: Prisma.EntityLedgerWhereInput
  /**
   * Limit how many EntityLedgers to update.
   */
  limit?: number
}

/**
 * EntityLedger updateManyAndReturn
 */
export type EntityLedgerUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntityLedger
   */
  select?: Prisma.EntityLedgerSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EntityLedger
   */
  omit?: Prisma.EntityLedgerOmit<ExtArgs> | null
  /**
   * The data used to update EntityLedgers.
   */
  data: Prisma.XOR<Prisma.EntityLedgerUpdateManyMutationInput, Prisma.EntityLedgerUncheckedUpdateManyInput>
  /**
   * Filter which EntityLedgers to update
   */
  where?: Prisma.EntityLedgerWhereInput
  /**
   * Limit how many EntityLedgers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityLedgerIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * EntityLedger upsert
 */
export type EntityLedgerUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntityLedger
   */
  select?: Prisma.EntityLedgerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntityLedger
   */
  omit?: Prisma.EntityLedgerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityLedgerInclude<ExtArgs> | null
  /**
   * The filter to search for the EntityLedger to update in case it exists.
   */
  where: Prisma.EntityLedgerWhereUniqueInput
  /**
   * In case the EntityLedger found by the `where` argument doesn't exist, create a new EntityLedger with this data.
   */
  create: Prisma.XOR<Prisma.EntityLedgerCreateInput, Prisma.EntityLedgerUncheckedCreateInput>
  /**
   * In case the EntityLedger was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EntityLedgerUpdateInput, Prisma.EntityLedgerUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * EntityLedger delete
 */
export type EntityLedgerDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntityLedger
   */
  select?: Prisma.EntityLedgerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntityLedger
   */
  omit?: Prisma.EntityLedgerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityLedgerInclude<ExtArgs> | null
  /**
   * Filter which EntityLedger to delete.
   */
  where: Prisma.EntityLedgerWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * EntityLedger deleteMany
 */
export type EntityLedgerDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EntityLedgers to delete
   */
  where?: Prisma.EntityLedgerWhereInput
  /**
   * Limit how many EntityLedgers to delete.
   */
  limit?: number
}

/**
 * EntityLedger without action
 */
export type EntityLedgerDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntityLedger
   */
  select?: Prisma.EntityLedgerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntityLedger
   */
  omit?: Prisma.EntityLedgerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityLedgerInclude<ExtArgs> | null
}
