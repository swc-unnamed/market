
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `BetaAccess` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model BetaAccess
 * 
 */
export type BetaAccessModel = runtime.Types.Result.DefaultSelection<Prisma.$BetaAccessPayload>

export type AggregateBetaAccess = {
  _count: BetaAccessCountAggregateOutputType | null
  _min: BetaAccessMinAggregateOutputType | null
  _max: BetaAccessMaxAggregateOutputType | null
}

export type BetaAccessMinAggregateOutputType = {
  id: string | null
  combineId: string | null
  createdAt: Date | null
}

export type BetaAccessMaxAggregateOutputType = {
  id: string | null
  combineId: string | null
  createdAt: Date | null
}

export type BetaAccessCountAggregateOutputType = {
  id: number
  combineId: number
  createdAt: number
  _all: number
}


export type BetaAccessMinAggregateInputType = {
  id?: true
  combineId?: true
  createdAt?: true
}

export type BetaAccessMaxAggregateInputType = {
  id?: true
  combineId?: true
  createdAt?: true
}

export type BetaAccessCountAggregateInputType = {
  id?: true
  combineId?: true
  createdAt?: true
  _all?: true
}

export type BetaAccessAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BetaAccess to aggregate.
   */
  where?: Prisma.BetaAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BetaAccesses to fetch.
   */
  orderBy?: Prisma.BetaAccessOrderByWithRelationInput | Prisma.BetaAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BetaAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BetaAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BetaAccesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned BetaAccesses
  **/
  _count?: true | BetaAccessCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BetaAccessMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BetaAccessMaxAggregateInputType
}

export type GetBetaAccessAggregateType<T extends BetaAccessAggregateArgs> = {
      [P in keyof T & keyof AggregateBetaAccess]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBetaAccess[P]>
    : Prisma.GetScalarType<T[P], AggregateBetaAccess[P]>
}




export type BetaAccessGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BetaAccessWhereInput
  orderBy?: Prisma.BetaAccessOrderByWithAggregationInput | Prisma.BetaAccessOrderByWithAggregationInput[]
  by: Prisma.BetaAccessScalarFieldEnum[] | Prisma.BetaAccessScalarFieldEnum
  having?: Prisma.BetaAccessScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BetaAccessCountAggregateInputType | true
  _min?: BetaAccessMinAggregateInputType
  _max?: BetaAccessMaxAggregateInputType
}

export type BetaAccessGroupByOutputType = {
  id: string
  combineId: string
  createdAt: Date
  _count: BetaAccessCountAggregateOutputType | null
  _min: BetaAccessMinAggregateOutputType | null
  _max: BetaAccessMaxAggregateOutputType | null
}

type GetBetaAccessGroupByPayload<T extends BetaAccessGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BetaAccessGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BetaAccessGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BetaAccessGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BetaAccessGroupByOutputType[P]>
      }
    >
  > 



export type BetaAccessWhereInput = {
  AND?: Prisma.BetaAccessWhereInput | Prisma.BetaAccessWhereInput[]
  OR?: Prisma.BetaAccessWhereInput[]
  NOT?: Prisma.BetaAccessWhereInput | Prisma.BetaAccessWhereInput[]
  id?: Prisma.StringFilter<"BetaAccess"> | string
  combineId?: Prisma.StringFilter<"BetaAccess"> | string
  createdAt?: Prisma.DateTimeFilter<"BetaAccess"> | Date | string
}

export type BetaAccessOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  combineId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type BetaAccessWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  combineId?: string
  AND?: Prisma.BetaAccessWhereInput | Prisma.BetaAccessWhereInput[]
  OR?: Prisma.BetaAccessWhereInput[]
  NOT?: Prisma.BetaAccessWhereInput | Prisma.BetaAccessWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"BetaAccess"> | Date | string
}, "id" | "combineId">

export type BetaAccessOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  combineId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.BetaAccessCountOrderByAggregateInput
  _max?: Prisma.BetaAccessMaxOrderByAggregateInput
  _min?: Prisma.BetaAccessMinOrderByAggregateInput
}

export type BetaAccessScalarWhereWithAggregatesInput = {
  AND?: Prisma.BetaAccessScalarWhereWithAggregatesInput | Prisma.BetaAccessScalarWhereWithAggregatesInput[]
  OR?: Prisma.BetaAccessScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BetaAccessScalarWhereWithAggregatesInput | Prisma.BetaAccessScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"BetaAccess"> | string
  combineId?: Prisma.StringWithAggregatesFilter<"BetaAccess"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"BetaAccess"> | Date | string
}

export type BetaAccessCreateInput = {
  id?: string
  combineId: string
  createdAt?: Date | string
}

export type BetaAccessUncheckedCreateInput = {
  id?: string
  combineId: string
  createdAt?: Date | string
}

export type BetaAccessUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  combineId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BetaAccessUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  combineId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BetaAccessCreateManyInput = {
  id?: string
  combineId: string
  createdAt?: Date | string
}

export type BetaAccessUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  combineId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BetaAccessUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  combineId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BetaAccessCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  combineId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type BetaAccessMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  combineId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type BetaAccessMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  combineId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}



export type BetaAccessSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  combineId?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["betaAccess"]>

export type BetaAccessSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  combineId?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["betaAccess"]>

export type BetaAccessSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  combineId?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["betaAccess"]>

export type BetaAccessSelectScalar = {
  id?: boolean
  combineId?: boolean
  createdAt?: boolean
}

export type BetaAccessOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "combineId" | "createdAt", ExtArgs["result"]["betaAccess"]>

export type $BetaAccessPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "BetaAccess"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    combineId: string
    createdAt: Date
  }, ExtArgs["result"]["betaAccess"]>
  composites: {}
}

export type BetaAccessGetPayload<S extends boolean | null | undefined | BetaAccessDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BetaAccessPayload, S>

export type BetaAccessCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BetaAccessFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: BetaAccessCountAggregateInputType | true
  }

export interface BetaAccessDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BetaAccess'], meta: { name: 'BetaAccess' } }
  /**
   * Find zero or one BetaAccess that matches the filter.
   * @param {BetaAccessFindUniqueArgs} args - Arguments to find a BetaAccess
   * @example
   * // Get one BetaAccess
   * const betaAccess = await prisma.betaAccess.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BetaAccessFindUniqueArgs>(args: Prisma.SelectSubset<T, BetaAccessFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BetaAccessClient<runtime.Types.Result.GetResult<Prisma.$BetaAccessPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one BetaAccess that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BetaAccessFindUniqueOrThrowArgs} args - Arguments to find a BetaAccess
   * @example
   * // Get one BetaAccess
   * const betaAccess = await prisma.betaAccess.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BetaAccessFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BetaAccessFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BetaAccessClient<runtime.Types.Result.GetResult<Prisma.$BetaAccessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BetaAccess that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BetaAccessFindFirstArgs} args - Arguments to find a BetaAccess
   * @example
   * // Get one BetaAccess
   * const betaAccess = await prisma.betaAccess.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BetaAccessFindFirstArgs>(args?: Prisma.SelectSubset<T, BetaAccessFindFirstArgs<ExtArgs>>): Prisma.Prisma__BetaAccessClient<runtime.Types.Result.GetResult<Prisma.$BetaAccessPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BetaAccess that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BetaAccessFindFirstOrThrowArgs} args - Arguments to find a BetaAccess
   * @example
   * // Get one BetaAccess
   * const betaAccess = await prisma.betaAccess.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BetaAccessFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BetaAccessFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BetaAccessClient<runtime.Types.Result.GetResult<Prisma.$BetaAccessPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more BetaAccesses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BetaAccessFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BetaAccesses
   * const betaAccesses = await prisma.betaAccess.findMany()
   * 
   * // Get first 10 BetaAccesses
   * const betaAccesses = await prisma.betaAccess.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const betaAccessWithIdOnly = await prisma.betaAccess.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BetaAccessFindManyArgs>(args?: Prisma.SelectSubset<T, BetaAccessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BetaAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a BetaAccess.
   * @param {BetaAccessCreateArgs} args - Arguments to create a BetaAccess.
   * @example
   * // Create one BetaAccess
   * const BetaAccess = await prisma.betaAccess.create({
   *   data: {
   *     // ... data to create a BetaAccess
   *   }
   * })
   * 
   */
  create<T extends BetaAccessCreateArgs>(args: Prisma.SelectSubset<T, BetaAccessCreateArgs<ExtArgs>>): Prisma.Prisma__BetaAccessClient<runtime.Types.Result.GetResult<Prisma.$BetaAccessPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many BetaAccesses.
   * @param {BetaAccessCreateManyArgs} args - Arguments to create many BetaAccesses.
   * @example
   * // Create many BetaAccesses
   * const betaAccess = await prisma.betaAccess.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BetaAccessCreateManyArgs>(args?: Prisma.SelectSubset<T, BetaAccessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many BetaAccesses and returns the data saved in the database.
   * @param {BetaAccessCreateManyAndReturnArgs} args - Arguments to create many BetaAccesses.
   * @example
   * // Create many BetaAccesses
   * const betaAccess = await prisma.betaAccess.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many BetaAccesses and only return the `id`
   * const betaAccessWithIdOnly = await prisma.betaAccess.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BetaAccessCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BetaAccessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BetaAccessPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a BetaAccess.
   * @param {BetaAccessDeleteArgs} args - Arguments to delete one BetaAccess.
   * @example
   * // Delete one BetaAccess
   * const BetaAccess = await prisma.betaAccess.delete({
   *   where: {
   *     // ... filter to delete one BetaAccess
   *   }
   * })
   * 
   */
  delete<T extends BetaAccessDeleteArgs>(args: Prisma.SelectSubset<T, BetaAccessDeleteArgs<ExtArgs>>): Prisma.Prisma__BetaAccessClient<runtime.Types.Result.GetResult<Prisma.$BetaAccessPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one BetaAccess.
   * @param {BetaAccessUpdateArgs} args - Arguments to update one BetaAccess.
   * @example
   * // Update one BetaAccess
   * const betaAccess = await prisma.betaAccess.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BetaAccessUpdateArgs>(args: Prisma.SelectSubset<T, BetaAccessUpdateArgs<ExtArgs>>): Prisma.Prisma__BetaAccessClient<runtime.Types.Result.GetResult<Prisma.$BetaAccessPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more BetaAccesses.
   * @param {BetaAccessDeleteManyArgs} args - Arguments to filter BetaAccesses to delete.
   * @example
   * // Delete a few BetaAccesses
   * const { count } = await prisma.betaAccess.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BetaAccessDeleteManyArgs>(args?: Prisma.SelectSubset<T, BetaAccessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BetaAccesses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BetaAccessUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BetaAccesses
   * const betaAccess = await prisma.betaAccess.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BetaAccessUpdateManyArgs>(args: Prisma.SelectSubset<T, BetaAccessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BetaAccesses and returns the data updated in the database.
   * @param {BetaAccessUpdateManyAndReturnArgs} args - Arguments to update many BetaAccesses.
   * @example
   * // Update many BetaAccesses
   * const betaAccess = await prisma.betaAccess.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more BetaAccesses and only return the `id`
   * const betaAccessWithIdOnly = await prisma.betaAccess.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BetaAccessUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BetaAccessUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BetaAccessPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one BetaAccess.
   * @param {BetaAccessUpsertArgs} args - Arguments to update or create a BetaAccess.
   * @example
   * // Update or create a BetaAccess
   * const betaAccess = await prisma.betaAccess.upsert({
   *   create: {
   *     // ... data to create a BetaAccess
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BetaAccess we want to update
   *   }
   * })
   */
  upsert<T extends BetaAccessUpsertArgs>(args: Prisma.SelectSubset<T, BetaAccessUpsertArgs<ExtArgs>>): Prisma.Prisma__BetaAccessClient<runtime.Types.Result.GetResult<Prisma.$BetaAccessPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of BetaAccesses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BetaAccessCountArgs} args - Arguments to filter BetaAccesses to count.
   * @example
   * // Count the number of BetaAccesses
   * const count = await prisma.betaAccess.count({
   *   where: {
   *     // ... the filter for the BetaAccesses we want to count
   *   }
   * })
  **/
  count<T extends BetaAccessCountArgs>(
    args?: Prisma.Subset<T, BetaAccessCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BetaAccessCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a BetaAccess.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BetaAccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BetaAccessAggregateArgs>(args: Prisma.Subset<T, BetaAccessAggregateArgs>): Prisma.PrismaPromise<GetBetaAccessAggregateType<T>>

  /**
   * Group by BetaAccess.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BetaAccessGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BetaAccessGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BetaAccessGroupByArgs['orderBy'] }
      : { orderBy?: BetaAccessGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BetaAccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBetaAccessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the BetaAccess model
 */
readonly fields: BetaAccessFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BetaAccess.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BetaAccessClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the BetaAccess model
 */
export interface BetaAccessFieldRefs {
  readonly id: Prisma.FieldRef<"BetaAccess", 'String'>
  readonly combineId: Prisma.FieldRef<"BetaAccess", 'String'>
  readonly createdAt: Prisma.FieldRef<"BetaAccess", 'DateTime'>
}
    

// Custom InputTypes
/**
 * BetaAccess findUnique
 */
export type BetaAccessFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BetaAccess
   */
  select?: Prisma.BetaAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BetaAccess
   */
  omit?: Prisma.BetaAccessOmit<ExtArgs> | null
  /**
   * Filter, which BetaAccess to fetch.
   */
  where: Prisma.BetaAccessWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * BetaAccess findUniqueOrThrow
 */
export type BetaAccessFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BetaAccess
   */
  select?: Prisma.BetaAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BetaAccess
   */
  omit?: Prisma.BetaAccessOmit<ExtArgs> | null
  /**
   * Filter, which BetaAccess to fetch.
   */
  where: Prisma.BetaAccessWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * BetaAccess findFirst
 */
export type BetaAccessFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BetaAccess
   */
  select?: Prisma.BetaAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BetaAccess
   */
  omit?: Prisma.BetaAccessOmit<ExtArgs> | null
  /**
   * Filter, which BetaAccess to fetch.
   */
  where?: Prisma.BetaAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BetaAccesses to fetch.
   */
  orderBy?: Prisma.BetaAccessOrderByWithRelationInput | Prisma.BetaAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BetaAccesses.
   */
  cursor?: Prisma.BetaAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BetaAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BetaAccesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BetaAccesses.
   */
  distinct?: Prisma.BetaAccessScalarFieldEnum | Prisma.BetaAccessScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * BetaAccess findFirstOrThrow
 */
export type BetaAccessFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BetaAccess
   */
  select?: Prisma.BetaAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BetaAccess
   */
  omit?: Prisma.BetaAccessOmit<ExtArgs> | null
  /**
   * Filter, which BetaAccess to fetch.
   */
  where?: Prisma.BetaAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BetaAccesses to fetch.
   */
  orderBy?: Prisma.BetaAccessOrderByWithRelationInput | Prisma.BetaAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BetaAccesses.
   */
  cursor?: Prisma.BetaAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BetaAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BetaAccesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BetaAccesses.
   */
  distinct?: Prisma.BetaAccessScalarFieldEnum | Prisma.BetaAccessScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * BetaAccess findMany
 */
export type BetaAccessFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BetaAccess
   */
  select?: Prisma.BetaAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BetaAccess
   */
  omit?: Prisma.BetaAccessOmit<ExtArgs> | null
  /**
   * Filter, which BetaAccesses to fetch.
   */
  where?: Prisma.BetaAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BetaAccesses to fetch.
   */
  orderBy?: Prisma.BetaAccessOrderByWithRelationInput | Prisma.BetaAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing BetaAccesses.
   */
  cursor?: Prisma.BetaAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BetaAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BetaAccesses.
   */
  skip?: number
  distinct?: Prisma.BetaAccessScalarFieldEnum | Prisma.BetaAccessScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * BetaAccess create
 */
export type BetaAccessCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BetaAccess
   */
  select?: Prisma.BetaAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BetaAccess
   */
  omit?: Prisma.BetaAccessOmit<ExtArgs> | null
  /**
   * The data needed to create a BetaAccess.
   */
  data: Prisma.XOR<Prisma.BetaAccessCreateInput, Prisma.BetaAccessUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * BetaAccess createMany
 */
export type BetaAccessCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many BetaAccesses.
   */
  data: Prisma.BetaAccessCreateManyInput | Prisma.BetaAccessCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * BetaAccess createManyAndReturn
 */
export type BetaAccessCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BetaAccess
   */
  select?: Prisma.BetaAccessSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BetaAccess
   */
  omit?: Prisma.BetaAccessOmit<ExtArgs> | null
  /**
   * The data used to create many BetaAccesses.
   */
  data: Prisma.BetaAccessCreateManyInput | Prisma.BetaAccessCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * BetaAccess update
 */
export type BetaAccessUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BetaAccess
   */
  select?: Prisma.BetaAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BetaAccess
   */
  omit?: Prisma.BetaAccessOmit<ExtArgs> | null
  /**
   * The data needed to update a BetaAccess.
   */
  data: Prisma.XOR<Prisma.BetaAccessUpdateInput, Prisma.BetaAccessUncheckedUpdateInput>
  /**
   * Choose, which BetaAccess to update.
   */
  where: Prisma.BetaAccessWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * BetaAccess updateMany
 */
export type BetaAccessUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update BetaAccesses.
   */
  data: Prisma.XOR<Prisma.BetaAccessUpdateManyMutationInput, Prisma.BetaAccessUncheckedUpdateManyInput>
  /**
   * Filter which BetaAccesses to update
   */
  where?: Prisma.BetaAccessWhereInput
  /**
   * Limit how many BetaAccesses to update.
   */
  limit?: number
}

/**
 * BetaAccess updateManyAndReturn
 */
export type BetaAccessUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BetaAccess
   */
  select?: Prisma.BetaAccessSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BetaAccess
   */
  omit?: Prisma.BetaAccessOmit<ExtArgs> | null
  /**
   * The data used to update BetaAccesses.
   */
  data: Prisma.XOR<Prisma.BetaAccessUpdateManyMutationInput, Prisma.BetaAccessUncheckedUpdateManyInput>
  /**
   * Filter which BetaAccesses to update
   */
  where?: Prisma.BetaAccessWhereInput
  /**
   * Limit how many BetaAccesses to update.
   */
  limit?: number
}

/**
 * BetaAccess upsert
 */
export type BetaAccessUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BetaAccess
   */
  select?: Prisma.BetaAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BetaAccess
   */
  omit?: Prisma.BetaAccessOmit<ExtArgs> | null
  /**
   * The filter to search for the BetaAccess to update in case it exists.
   */
  where: Prisma.BetaAccessWhereUniqueInput
  /**
   * In case the BetaAccess found by the `where` argument doesn't exist, create a new BetaAccess with this data.
   */
  create: Prisma.XOR<Prisma.BetaAccessCreateInput, Prisma.BetaAccessUncheckedCreateInput>
  /**
   * In case the BetaAccess was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BetaAccessUpdateInput, Prisma.BetaAccessUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * BetaAccess delete
 */
export type BetaAccessDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BetaAccess
   */
  select?: Prisma.BetaAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BetaAccess
   */
  omit?: Prisma.BetaAccessOmit<ExtArgs> | null
  /**
   * Filter which BetaAccess to delete.
   */
  where: Prisma.BetaAccessWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * BetaAccess deleteMany
 */
export type BetaAccessDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BetaAccesses to delete
   */
  where?: Prisma.BetaAccessWhereInput
  /**
   * Limit how many BetaAccesses to delete.
   */
  limit?: number
}

/**
 * BetaAccess without action
 */
export type BetaAccessDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BetaAccess
   */
  select?: Prisma.BetaAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BetaAccess
   */
  omit?: Prisma.BetaAccessOmit<ExtArgs> | null
}
