
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `LiveAuctionSetting` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model LiveAuctionSetting
 * 
 */
export type LiveAuctionSettingModel = runtime.Types.Result.DefaultSelection<Prisma.$LiveAuctionSettingPayload>

export type AggregateLiveAuctionSetting = {
  _count: LiveAuctionSettingCountAggregateOutputType | null
  _min: LiveAuctionSettingMinAggregateOutputType | null
  _max: LiveAuctionSettingMaxAggregateOutputType | null
}

export type LiveAuctionSettingMinAggregateOutputType = {
  id: string | null
  broadcastWebhook: string | null
}

export type LiveAuctionSettingMaxAggregateOutputType = {
  id: string | null
  broadcastWebhook: string | null
}

export type LiveAuctionSettingCountAggregateOutputType = {
  id: number
  broadcastWebhook: number
  _all: number
}


export type LiveAuctionSettingMinAggregateInputType = {
  id?: true
  broadcastWebhook?: true
}

export type LiveAuctionSettingMaxAggregateInputType = {
  id?: true
  broadcastWebhook?: true
}

export type LiveAuctionSettingCountAggregateInputType = {
  id?: true
  broadcastWebhook?: true
  _all?: true
}

export type LiveAuctionSettingAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LiveAuctionSetting to aggregate.
   */
  where?: Prisma.LiveAuctionSettingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LiveAuctionSettings to fetch.
   */
  orderBy?: Prisma.LiveAuctionSettingOrderByWithRelationInput | Prisma.LiveAuctionSettingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LiveAuctionSettingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LiveAuctionSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LiveAuctionSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned LiveAuctionSettings
  **/
  _count?: true | LiveAuctionSettingCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LiveAuctionSettingMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LiveAuctionSettingMaxAggregateInputType
}

export type GetLiveAuctionSettingAggregateType<T extends LiveAuctionSettingAggregateArgs> = {
      [P in keyof T & keyof AggregateLiveAuctionSetting]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLiveAuctionSetting[P]>
    : Prisma.GetScalarType<T[P], AggregateLiveAuctionSetting[P]>
}




export type LiveAuctionSettingGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LiveAuctionSettingWhereInput
  orderBy?: Prisma.LiveAuctionSettingOrderByWithAggregationInput | Prisma.LiveAuctionSettingOrderByWithAggregationInput[]
  by: Prisma.LiveAuctionSettingScalarFieldEnum[] | Prisma.LiveAuctionSettingScalarFieldEnum
  having?: Prisma.LiveAuctionSettingScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LiveAuctionSettingCountAggregateInputType | true
  _min?: LiveAuctionSettingMinAggregateInputType
  _max?: LiveAuctionSettingMaxAggregateInputType
}

export type LiveAuctionSettingGroupByOutputType = {
  id: string
  broadcastWebhook: string
  _count: LiveAuctionSettingCountAggregateOutputType | null
  _min: LiveAuctionSettingMinAggregateOutputType | null
  _max: LiveAuctionSettingMaxAggregateOutputType | null
}

type GetLiveAuctionSettingGroupByPayload<T extends LiveAuctionSettingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LiveAuctionSettingGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LiveAuctionSettingGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LiveAuctionSettingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LiveAuctionSettingGroupByOutputType[P]>
      }
    >
  > 



export type LiveAuctionSettingWhereInput = {
  AND?: Prisma.LiveAuctionSettingWhereInput | Prisma.LiveAuctionSettingWhereInput[]
  OR?: Prisma.LiveAuctionSettingWhereInput[]
  NOT?: Prisma.LiveAuctionSettingWhereInput | Prisma.LiveAuctionSettingWhereInput[]
  id?: Prisma.StringFilter<"LiveAuctionSetting"> | string
  broadcastWebhook?: Prisma.StringFilter<"LiveAuctionSetting"> | string
}

export type LiveAuctionSettingOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  broadcastWebhook?: Prisma.SortOrder
}

export type LiveAuctionSettingWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.LiveAuctionSettingWhereInput | Prisma.LiveAuctionSettingWhereInput[]
  OR?: Prisma.LiveAuctionSettingWhereInput[]
  NOT?: Prisma.LiveAuctionSettingWhereInput | Prisma.LiveAuctionSettingWhereInput[]
  broadcastWebhook?: Prisma.StringFilter<"LiveAuctionSetting"> | string
}, "id">

export type LiveAuctionSettingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  broadcastWebhook?: Prisma.SortOrder
  _count?: Prisma.LiveAuctionSettingCountOrderByAggregateInput
  _max?: Prisma.LiveAuctionSettingMaxOrderByAggregateInput
  _min?: Prisma.LiveAuctionSettingMinOrderByAggregateInput
}

export type LiveAuctionSettingScalarWhereWithAggregatesInput = {
  AND?: Prisma.LiveAuctionSettingScalarWhereWithAggregatesInput | Prisma.LiveAuctionSettingScalarWhereWithAggregatesInput[]
  OR?: Prisma.LiveAuctionSettingScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LiveAuctionSettingScalarWhereWithAggregatesInput | Prisma.LiveAuctionSettingScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"LiveAuctionSetting"> | string
  broadcastWebhook?: Prisma.StringWithAggregatesFilter<"LiveAuctionSetting"> | string
}

export type LiveAuctionSettingCreateInput = {
  id?: string
  broadcastWebhook: string
}

export type LiveAuctionSettingUncheckedCreateInput = {
  id?: string
  broadcastWebhook: string
}

export type LiveAuctionSettingUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  broadcastWebhook?: Prisma.StringFieldUpdateOperationsInput | string
}

export type LiveAuctionSettingUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  broadcastWebhook?: Prisma.StringFieldUpdateOperationsInput | string
}

export type LiveAuctionSettingCreateManyInput = {
  id?: string
  broadcastWebhook: string
}

export type LiveAuctionSettingUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  broadcastWebhook?: Prisma.StringFieldUpdateOperationsInput | string
}

export type LiveAuctionSettingUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  broadcastWebhook?: Prisma.StringFieldUpdateOperationsInput | string
}

export type LiveAuctionSettingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  broadcastWebhook?: Prisma.SortOrder
}

export type LiveAuctionSettingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  broadcastWebhook?: Prisma.SortOrder
}

export type LiveAuctionSettingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  broadcastWebhook?: Prisma.SortOrder
}



export type LiveAuctionSettingSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  broadcastWebhook?: boolean
}, ExtArgs["result"]["liveAuctionSetting"]>

export type LiveAuctionSettingSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  broadcastWebhook?: boolean
}, ExtArgs["result"]["liveAuctionSetting"]>

export type LiveAuctionSettingSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  broadcastWebhook?: boolean
}, ExtArgs["result"]["liveAuctionSetting"]>

export type LiveAuctionSettingSelectScalar = {
  id?: boolean
  broadcastWebhook?: boolean
}

export type LiveAuctionSettingOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "broadcastWebhook", ExtArgs["result"]["liveAuctionSetting"]>

export type $LiveAuctionSettingPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "LiveAuctionSetting"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    broadcastWebhook: string
  }, ExtArgs["result"]["liveAuctionSetting"]>
  composites: {}
}

export type LiveAuctionSettingGetPayload<S extends boolean | null | undefined | LiveAuctionSettingDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LiveAuctionSettingPayload, S>

export type LiveAuctionSettingCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LiveAuctionSettingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: LiveAuctionSettingCountAggregateInputType | true
  }

export interface LiveAuctionSettingDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LiveAuctionSetting'], meta: { name: 'LiveAuctionSetting' } }
  /**
   * Find zero or one LiveAuctionSetting that matches the filter.
   * @param {LiveAuctionSettingFindUniqueArgs} args - Arguments to find a LiveAuctionSetting
   * @example
   * // Get one LiveAuctionSetting
   * const liveAuctionSetting = await prisma.liveAuctionSetting.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LiveAuctionSettingFindUniqueArgs>(args: Prisma.SelectSubset<T, LiveAuctionSettingFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LiveAuctionSettingClient<runtime.Types.Result.GetResult<Prisma.$LiveAuctionSettingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one LiveAuctionSetting that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LiveAuctionSettingFindUniqueOrThrowArgs} args - Arguments to find a LiveAuctionSetting
   * @example
   * // Get one LiveAuctionSetting
   * const liveAuctionSetting = await prisma.liveAuctionSetting.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LiveAuctionSettingFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LiveAuctionSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LiveAuctionSettingClient<runtime.Types.Result.GetResult<Prisma.$LiveAuctionSettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LiveAuctionSetting that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LiveAuctionSettingFindFirstArgs} args - Arguments to find a LiveAuctionSetting
   * @example
   * // Get one LiveAuctionSetting
   * const liveAuctionSetting = await prisma.liveAuctionSetting.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LiveAuctionSettingFindFirstArgs>(args?: Prisma.SelectSubset<T, LiveAuctionSettingFindFirstArgs<ExtArgs>>): Prisma.Prisma__LiveAuctionSettingClient<runtime.Types.Result.GetResult<Prisma.$LiveAuctionSettingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LiveAuctionSetting that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LiveAuctionSettingFindFirstOrThrowArgs} args - Arguments to find a LiveAuctionSetting
   * @example
   * // Get one LiveAuctionSetting
   * const liveAuctionSetting = await prisma.liveAuctionSetting.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LiveAuctionSettingFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LiveAuctionSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LiveAuctionSettingClient<runtime.Types.Result.GetResult<Prisma.$LiveAuctionSettingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more LiveAuctionSettings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LiveAuctionSettingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all LiveAuctionSettings
   * const liveAuctionSettings = await prisma.liveAuctionSetting.findMany()
   * 
   * // Get first 10 LiveAuctionSettings
   * const liveAuctionSettings = await prisma.liveAuctionSetting.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const liveAuctionSettingWithIdOnly = await prisma.liveAuctionSetting.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends LiveAuctionSettingFindManyArgs>(args?: Prisma.SelectSubset<T, LiveAuctionSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LiveAuctionSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a LiveAuctionSetting.
   * @param {LiveAuctionSettingCreateArgs} args - Arguments to create a LiveAuctionSetting.
   * @example
   * // Create one LiveAuctionSetting
   * const LiveAuctionSetting = await prisma.liveAuctionSetting.create({
   *   data: {
   *     // ... data to create a LiveAuctionSetting
   *   }
   * })
   * 
   */
  create<T extends LiveAuctionSettingCreateArgs>(args: Prisma.SelectSubset<T, LiveAuctionSettingCreateArgs<ExtArgs>>): Prisma.Prisma__LiveAuctionSettingClient<runtime.Types.Result.GetResult<Prisma.$LiveAuctionSettingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many LiveAuctionSettings.
   * @param {LiveAuctionSettingCreateManyArgs} args - Arguments to create many LiveAuctionSettings.
   * @example
   * // Create many LiveAuctionSettings
   * const liveAuctionSetting = await prisma.liveAuctionSetting.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LiveAuctionSettingCreateManyArgs>(args?: Prisma.SelectSubset<T, LiveAuctionSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many LiveAuctionSettings and returns the data saved in the database.
   * @param {LiveAuctionSettingCreateManyAndReturnArgs} args - Arguments to create many LiveAuctionSettings.
   * @example
   * // Create many LiveAuctionSettings
   * const liveAuctionSetting = await prisma.liveAuctionSetting.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many LiveAuctionSettings and only return the `id`
   * const liveAuctionSettingWithIdOnly = await prisma.liveAuctionSetting.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends LiveAuctionSettingCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, LiveAuctionSettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LiveAuctionSettingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a LiveAuctionSetting.
   * @param {LiveAuctionSettingDeleteArgs} args - Arguments to delete one LiveAuctionSetting.
   * @example
   * // Delete one LiveAuctionSetting
   * const LiveAuctionSetting = await prisma.liveAuctionSetting.delete({
   *   where: {
   *     // ... filter to delete one LiveAuctionSetting
   *   }
   * })
   * 
   */
  delete<T extends LiveAuctionSettingDeleteArgs>(args: Prisma.SelectSubset<T, LiveAuctionSettingDeleteArgs<ExtArgs>>): Prisma.Prisma__LiveAuctionSettingClient<runtime.Types.Result.GetResult<Prisma.$LiveAuctionSettingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one LiveAuctionSetting.
   * @param {LiveAuctionSettingUpdateArgs} args - Arguments to update one LiveAuctionSetting.
   * @example
   * // Update one LiveAuctionSetting
   * const liveAuctionSetting = await prisma.liveAuctionSetting.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LiveAuctionSettingUpdateArgs>(args: Prisma.SelectSubset<T, LiveAuctionSettingUpdateArgs<ExtArgs>>): Prisma.Prisma__LiveAuctionSettingClient<runtime.Types.Result.GetResult<Prisma.$LiveAuctionSettingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more LiveAuctionSettings.
   * @param {LiveAuctionSettingDeleteManyArgs} args - Arguments to filter LiveAuctionSettings to delete.
   * @example
   * // Delete a few LiveAuctionSettings
   * const { count } = await prisma.liveAuctionSetting.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LiveAuctionSettingDeleteManyArgs>(args?: Prisma.SelectSubset<T, LiveAuctionSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LiveAuctionSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LiveAuctionSettingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many LiveAuctionSettings
   * const liveAuctionSetting = await prisma.liveAuctionSetting.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LiveAuctionSettingUpdateManyArgs>(args: Prisma.SelectSubset<T, LiveAuctionSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LiveAuctionSettings and returns the data updated in the database.
   * @param {LiveAuctionSettingUpdateManyAndReturnArgs} args - Arguments to update many LiveAuctionSettings.
   * @example
   * // Update many LiveAuctionSettings
   * const liveAuctionSetting = await prisma.liveAuctionSetting.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more LiveAuctionSettings and only return the `id`
   * const liveAuctionSettingWithIdOnly = await prisma.liveAuctionSetting.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends LiveAuctionSettingUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, LiveAuctionSettingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LiveAuctionSettingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one LiveAuctionSetting.
   * @param {LiveAuctionSettingUpsertArgs} args - Arguments to update or create a LiveAuctionSetting.
   * @example
   * // Update or create a LiveAuctionSetting
   * const liveAuctionSetting = await prisma.liveAuctionSetting.upsert({
   *   create: {
   *     // ... data to create a LiveAuctionSetting
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the LiveAuctionSetting we want to update
   *   }
   * })
   */
  upsert<T extends LiveAuctionSettingUpsertArgs>(args: Prisma.SelectSubset<T, LiveAuctionSettingUpsertArgs<ExtArgs>>): Prisma.Prisma__LiveAuctionSettingClient<runtime.Types.Result.GetResult<Prisma.$LiveAuctionSettingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of LiveAuctionSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LiveAuctionSettingCountArgs} args - Arguments to filter LiveAuctionSettings to count.
   * @example
   * // Count the number of LiveAuctionSettings
   * const count = await prisma.liveAuctionSetting.count({
   *   where: {
   *     // ... the filter for the LiveAuctionSettings we want to count
   *   }
   * })
  **/
  count<T extends LiveAuctionSettingCountArgs>(
    args?: Prisma.Subset<T, LiveAuctionSettingCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LiveAuctionSettingCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a LiveAuctionSetting.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LiveAuctionSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LiveAuctionSettingAggregateArgs>(args: Prisma.Subset<T, LiveAuctionSettingAggregateArgs>): Prisma.PrismaPromise<GetLiveAuctionSettingAggregateType<T>>

  /**
   * Group by LiveAuctionSetting.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LiveAuctionSettingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LiveAuctionSettingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LiveAuctionSettingGroupByArgs['orderBy'] }
      : { orderBy?: LiveAuctionSettingGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LiveAuctionSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLiveAuctionSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the LiveAuctionSetting model
 */
readonly fields: LiveAuctionSettingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for LiveAuctionSetting.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LiveAuctionSettingClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the LiveAuctionSetting model
 */
export interface LiveAuctionSettingFieldRefs {
  readonly id: Prisma.FieldRef<"LiveAuctionSetting", 'String'>
  readonly broadcastWebhook: Prisma.FieldRef<"LiveAuctionSetting", 'String'>
}
    

// Custom InputTypes
/**
 * LiveAuctionSetting findUnique
 */
export type LiveAuctionSettingFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LiveAuctionSetting
   */
  select?: Prisma.LiveAuctionSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LiveAuctionSetting
   */
  omit?: Prisma.LiveAuctionSettingOmit<ExtArgs> | null
  /**
   * Filter, which LiveAuctionSetting to fetch.
   */
  where: Prisma.LiveAuctionSettingWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * LiveAuctionSetting findUniqueOrThrow
 */
export type LiveAuctionSettingFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LiveAuctionSetting
   */
  select?: Prisma.LiveAuctionSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LiveAuctionSetting
   */
  omit?: Prisma.LiveAuctionSettingOmit<ExtArgs> | null
  /**
   * Filter, which LiveAuctionSetting to fetch.
   */
  where: Prisma.LiveAuctionSettingWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * LiveAuctionSetting findFirst
 */
export type LiveAuctionSettingFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LiveAuctionSetting
   */
  select?: Prisma.LiveAuctionSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LiveAuctionSetting
   */
  omit?: Prisma.LiveAuctionSettingOmit<ExtArgs> | null
  /**
   * Filter, which LiveAuctionSetting to fetch.
   */
  where?: Prisma.LiveAuctionSettingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LiveAuctionSettings to fetch.
   */
  orderBy?: Prisma.LiveAuctionSettingOrderByWithRelationInput | Prisma.LiveAuctionSettingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LiveAuctionSettings.
   */
  cursor?: Prisma.LiveAuctionSettingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LiveAuctionSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LiveAuctionSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LiveAuctionSettings.
   */
  distinct?: Prisma.LiveAuctionSettingScalarFieldEnum | Prisma.LiveAuctionSettingScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * LiveAuctionSetting findFirstOrThrow
 */
export type LiveAuctionSettingFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LiveAuctionSetting
   */
  select?: Prisma.LiveAuctionSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LiveAuctionSetting
   */
  omit?: Prisma.LiveAuctionSettingOmit<ExtArgs> | null
  /**
   * Filter, which LiveAuctionSetting to fetch.
   */
  where?: Prisma.LiveAuctionSettingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LiveAuctionSettings to fetch.
   */
  orderBy?: Prisma.LiveAuctionSettingOrderByWithRelationInput | Prisma.LiveAuctionSettingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LiveAuctionSettings.
   */
  cursor?: Prisma.LiveAuctionSettingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LiveAuctionSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LiveAuctionSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LiveAuctionSettings.
   */
  distinct?: Prisma.LiveAuctionSettingScalarFieldEnum | Prisma.LiveAuctionSettingScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * LiveAuctionSetting findMany
 */
export type LiveAuctionSettingFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LiveAuctionSetting
   */
  select?: Prisma.LiveAuctionSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LiveAuctionSetting
   */
  omit?: Prisma.LiveAuctionSettingOmit<ExtArgs> | null
  /**
   * Filter, which LiveAuctionSettings to fetch.
   */
  where?: Prisma.LiveAuctionSettingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LiveAuctionSettings to fetch.
   */
  orderBy?: Prisma.LiveAuctionSettingOrderByWithRelationInput | Prisma.LiveAuctionSettingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing LiveAuctionSettings.
   */
  cursor?: Prisma.LiveAuctionSettingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LiveAuctionSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LiveAuctionSettings.
   */
  skip?: number
  distinct?: Prisma.LiveAuctionSettingScalarFieldEnum | Prisma.LiveAuctionSettingScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * LiveAuctionSetting create
 */
export type LiveAuctionSettingCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LiveAuctionSetting
   */
  select?: Prisma.LiveAuctionSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LiveAuctionSetting
   */
  omit?: Prisma.LiveAuctionSettingOmit<ExtArgs> | null
  /**
   * The data needed to create a LiveAuctionSetting.
   */
  data: Prisma.XOR<Prisma.LiveAuctionSettingCreateInput, Prisma.LiveAuctionSettingUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * LiveAuctionSetting createMany
 */
export type LiveAuctionSettingCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many LiveAuctionSettings.
   */
  data: Prisma.LiveAuctionSettingCreateManyInput | Prisma.LiveAuctionSettingCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * LiveAuctionSetting createManyAndReturn
 */
export type LiveAuctionSettingCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LiveAuctionSetting
   */
  select?: Prisma.LiveAuctionSettingSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LiveAuctionSetting
   */
  omit?: Prisma.LiveAuctionSettingOmit<ExtArgs> | null
  /**
   * The data used to create many LiveAuctionSettings.
   */
  data: Prisma.LiveAuctionSettingCreateManyInput | Prisma.LiveAuctionSettingCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * LiveAuctionSetting update
 */
export type LiveAuctionSettingUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LiveAuctionSetting
   */
  select?: Prisma.LiveAuctionSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LiveAuctionSetting
   */
  omit?: Prisma.LiveAuctionSettingOmit<ExtArgs> | null
  /**
   * The data needed to update a LiveAuctionSetting.
   */
  data: Prisma.XOR<Prisma.LiveAuctionSettingUpdateInput, Prisma.LiveAuctionSettingUncheckedUpdateInput>
  /**
   * Choose, which LiveAuctionSetting to update.
   */
  where: Prisma.LiveAuctionSettingWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * LiveAuctionSetting updateMany
 */
export type LiveAuctionSettingUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update LiveAuctionSettings.
   */
  data: Prisma.XOR<Prisma.LiveAuctionSettingUpdateManyMutationInput, Prisma.LiveAuctionSettingUncheckedUpdateManyInput>
  /**
   * Filter which LiveAuctionSettings to update
   */
  where?: Prisma.LiveAuctionSettingWhereInput
  /**
   * Limit how many LiveAuctionSettings to update.
   */
  limit?: number
}

/**
 * LiveAuctionSetting updateManyAndReturn
 */
export type LiveAuctionSettingUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LiveAuctionSetting
   */
  select?: Prisma.LiveAuctionSettingSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LiveAuctionSetting
   */
  omit?: Prisma.LiveAuctionSettingOmit<ExtArgs> | null
  /**
   * The data used to update LiveAuctionSettings.
   */
  data: Prisma.XOR<Prisma.LiveAuctionSettingUpdateManyMutationInput, Prisma.LiveAuctionSettingUncheckedUpdateManyInput>
  /**
   * Filter which LiveAuctionSettings to update
   */
  where?: Prisma.LiveAuctionSettingWhereInput
  /**
   * Limit how many LiveAuctionSettings to update.
   */
  limit?: number
}

/**
 * LiveAuctionSetting upsert
 */
export type LiveAuctionSettingUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LiveAuctionSetting
   */
  select?: Prisma.LiveAuctionSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LiveAuctionSetting
   */
  omit?: Prisma.LiveAuctionSettingOmit<ExtArgs> | null
  /**
   * The filter to search for the LiveAuctionSetting to update in case it exists.
   */
  where: Prisma.LiveAuctionSettingWhereUniqueInput
  /**
   * In case the LiveAuctionSetting found by the `where` argument doesn't exist, create a new LiveAuctionSetting with this data.
   */
  create: Prisma.XOR<Prisma.LiveAuctionSettingCreateInput, Prisma.LiveAuctionSettingUncheckedCreateInput>
  /**
   * In case the LiveAuctionSetting was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LiveAuctionSettingUpdateInput, Prisma.LiveAuctionSettingUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * LiveAuctionSetting delete
 */
export type LiveAuctionSettingDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LiveAuctionSetting
   */
  select?: Prisma.LiveAuctionSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LiveAuctionSetting
   */
  omit?: Prisma.LiveAuctionSettingOmit<ExtArgs> | null
  /**
   * Filter which LiveAuctionSetting to delete.
   */
  where: Prisma.LiveAuctionSettingWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * LiveAuctionSetting deleteMany
 */
export type LiveAuctionSettingDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LiveAuctionSettings to delete
   */
  where?: Prisma.LiveAuctionSettingWhereInput
  /**
   * Limit how many LiveAuctionSettings to delete.
   */
  limit?: number
}

/**
 * LiveAuctionSetting without action
 */
export type LiveAuctionSettingDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LiveAuctionSetting
   */
  select?: Prisma.LiveAuctionSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LiveAuctionSetting
   */
  omit?: Prisma.LiveAuctionSettingOmit<ExtArgs> | null
}
