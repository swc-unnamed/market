
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `AuctionBid` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model AuctionBid
 * 
 */
export type AuctionBidModel = runtime.Types.Result.DefaultSelection<Prisma.$AuctionBidPayload>

export type AggregateAuctionBid = {
  _count: AuctionBidCountAggregateOutputType | null
  _avg: AuctionBidAvgAggregateOutputType | null
  _sum: AuctionBidSumAggregateOutputType | null
  _min: AuctionBidMinAggregateOutputType | null
  _max: AuctionBidMaxAggregateOutputType | null
}

export type AuctionBidAvgAggregateOutputType = {
  amount: number | null
}

export type AuctionBidSumAggregateOutputType = {
  amount: number | null
}

export type AuctionBidMinAggregateOutputType = {
  id: string | null
  auctionListingId: string | null
  bidderId: string | null
  amount: number | null
  createdAt: Date | null
}

export type AuctionBidMaxAggregateOutputType = {
  id: string | null
  auctionListingId: string | null
  bidderId: string | null
  amount: number | null
  createdAt: Date | null
}

export type AuctionBidCountAggregateOutputType = {
  id: number
  auctionListingId: number
  bidderId: number
  amount: number
  createdAt: number
  _all: number
}


export type AuctionBidAvgAggregateInputType = {
  amount?: true
}

export type AuctionBidSumAggregateInputType = {
  amount?: true
}

export type AuctionBidMinAggregateInputType = {
  id?: true
  auctionListingId?: true
  bidderId?: true
  amount?: true
  createdAt?: true
}

export type AuctionBidMaxAggregateInputType = {
  id?: true
  auctionListingId?: true
  bidderId?: true
  amount?: true
  createdAt?: true
}

export type AuctionBidCountAggregateInputType = {
  id?: true
  auctionListingId?: true
  bidderId?: true
  amount?: true
  createdAt?: true
  _all?: true
}

export type AuctionBidAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AuctionBid to aggregate.
   */
  where?: Prisma.AuctionBidWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AuctionBids to fetch.
   */
  orderBy?: Prisma.AuctionBidOrderByWithRelationInput | Prisma.AuctionBidOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AuctionBidWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AuctionBids from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AuctionBids.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AuctionBids
  **/
  _count?: true | AuctionBidCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AuctionBidAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AuctionBidSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AuctionBidMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AuctionBidMaxAggregateInputType
}

export type GetAuctionBidAggregateType<T extends AuctionBidAggregateArgs> = {
      [P in keyof T & keyof AggregateAuctionBid]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAuctionBid[P]>
    : Prisma.GetScalarType<T[P], AggregateAuctionBid[P]>
}




export type AuctionBidGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AuctionBidWhereInput
  orderBy?: Prisma.AuctionBidOrderByWithAggregationInput | Prisma.AuctionBidOrderByWithAggregationInput[]
  by: Prisma.AuctionBidScalarFieldEnum[] | Prisma.AuctionBidScalarFieldEnum
  having?: Prisma.AuctionBidScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AuctionBidCountAggregateInputType | true
  _avg?: AuctionBidAvgAggregateInputType
  _sum?: AuctionBidSumAggregateInputType
  _min?: AuctionBidMinAggregateInputType
  _max?: AuctionBidMaxAggregateInputType
}

export type AuctionBidGroupByOutputType = {
  id: string
  auctionListingId: string
  bidderId: string
  amount: number
  createdAt: Date
  _count: AuctionBidCountAggregateOutputType | null
  _avg: AuctionBidAvgAggregateOutputType | null
  _sum: AuctionBidSumAggregateOutputType | null
  _min: AuctionBidMinAggregateOutputType | null
  _max: AuctionBidMaxAggregateOutputType | null
}

type GetAuctionBidGroupByPayload<T extends AuctionBidGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AuctionBidGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AuctionBidGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AuctionBidGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AuctionBidGroupByOutputType[P]>
      }
    >
  > 



export type AuctionBidWhereInput = {
  AND?: Prisma.AuctionBidWhereInput | Prisma.AuctionBidWhereInput[]
  OR?: Prisma.AuctionBidWhereInput[]
  NOT?: Prisma.AuctionBidWhereInput | Prisma.AuctionBidWhereInput[]
  id?: Prisma.StringFilter<"AuctionBid"> | string
  auctionListingId?: Prisma.StringFilter<"AuctionBid"> | string
  bidderId?: Prisma.StringFilter<"AuctionBid"> | string
  amount?: Prisma.IntFilter<"AuctionBid"> | number
  createdAt?: Prisma.DateTimeFilter<"AuctionBid"> | Date | string
  auctionListing?: Prisma.XOR<Prisma.AuctionListingScalarRelationFilter, Prisma.AuctionListingWhereInput>
  bidder?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type AuctionBidOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  auctionListingId?: Prisma.SortOrder
  bidderId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  auctionListing?: Prisma.AuctionListingOrderByWithRelationInput
  bidder?: Prisma.UserOrderByWithRelationInput
}

export type AuctionBidWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.AuctionBidWhereInput | Prisma.AuctionBidWhereInput[]
  OR?: Prisma.AuctionBidWhereInput[]
  NOT?: Prisma.AuctionBidWhereInput | Prisma.AuctionBidWhereInput[]
  auctionListingId?: Prisma.StringFilter<"AuctionBid"> | string
  bidderId?: Prisma.StringFilter<"AuctionBid"> | string
  amount?: Prisma.IntFilter<"AuctionBid"> | number
  createdAt?: Prisma.DateTimeFilter<"AuctionBid"> | Date | string
  auctionListing?: Prisma.XOR<Prisma.AuctionListingScalarRelationFilter, Prisma.AuctionListingWhereInput>
  bidder?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type AuctionBidOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  auctionListingId?: Prisma.SortOrder
  bidderId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.AuctionBidCountOrderByAggregateInput
  _avg?: Prisma.AuctionBidAvgOrderByAggregateInput
  _max?: Prisma.AuctionBidMaxOrderByAggregateInput
  _min?: Prisma.AuctionBidMinOrderByAggregateInput
  _sum?: Prisma.AuctionBidSumOrderByAggregateInput
}

export type AuctionBidScalarWhereWithAggregatesInput = {
  AND?: Prisma.AuctionBidScalarWhereWithAggregatesInput | Prisma.AuctionBidScalarWhereWithAggregatesInput[]
  OR?: Prisma.AuctionBidScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AuctionBidScalarWhereWithAggregatesInput | Prisma.AuctionBidScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"AuctionBid"> | string
  auctionListingId?: Prisma.StringWithAggregatesFilter<"AuctionBid"> | string
  bidderId?: Prisma.StringWithAggregatesFilter<"AuctionBid"> | string
  amount?: Prisma.IntWithAggregatesFilter<"AuctionBid"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AuctionBid"> | Date | string
}

export type AuctionBidCreateInput = {
  id?: string
  amount: number
  createdAt?: Date | string
  auctionListing: Prisma.AuctionListingCreateNestedOneWithoutBidsInput
  bidder: Prisma.UserCreateNestedOneWithoutAuctionBidsInput
}

export type AuctionBidUncheckedCreateInput = {
  id?: string
  auctionListingId: string
  bidderId: string
  amount: number
  createdAt?: Date | string
}

export type AuctionBidUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  auctionListing?: Prisma.AuctionListingUpdateOneRequiredWithoutBidsNestedInput
  bidder?: Prisma.UserUpdateOneRequiredWithoutAuctionBidsNestedInput
}

export type AuctionBidUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  auctionListingId?: Prisma.StringFieldUpdateOperationsInput | string
  bidderId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AuctionBidCreateManyInput = {
  id?: string
  auctionListingId: string
  bidderId: string
  amount: number
  createdAt?: Date | string
}

export type AuctionBidUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AuctionBidUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  auctionListingId?: Prisma.StringFieldUpdateOperationsInput | string
  bidderId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AuctionBidListRelationFilter = {
  every?: Prisma.AuctionBidWhereInput
  some?: Prisma.AuctionBidWhereInput
  none?: Prisma.AuctionBidWhereInput
}

export type AuctionBidOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AuctionBidCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  auctionListingId?: Prisma.SortOrder
  bidderId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AuctionBidAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type AuctionBidMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  auctionListingId?: Prisma.SortOrder
  bidderId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AuctionBidMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  auctionListingId?: Prisma.SortOrder
  bidderId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AuctionBidSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type AuctionBidCreateNestedManyWithoutAuctionListingInput = {
  create?: Prisma.XOR<Prisma.AuctionBidCreateWithoutAuctionListingInput, Prisma.AuctionBidUncheckedCreateWithoutAuctionListingInput> | Prisma.AuctionBidCreateWithoutAuctionListingInput[] | Prisma.AuctionBidUncheckedCreateWithoutAuctionListingInput[]
  connectOrCreate?: Prisma.AuctionBidCreateOrConnectWithoutAuctionListingInput | Prisma.AuctionBidCreateOrConnectWithoutAuctionListingInput[]
  createMany?: Prisma.AuctionBidCreateManyAuctionListingInputEnvelope
  connect?: Prisma.AuctionBidWhereUniqueInput | Prisma.AuctionBidWhereUniqueInput[]
}

export type AuctionBidUncheckedCreateNestedManyWithoutAuctionListingInput = {
  create?: Prisma.XOR<Prisma.AuctionBidCreateWithoutAuctionListingInput, Prisma.AuctionBidUncheckedCreateWithoutAuctionListingInput> | Prisma.AuctionBidCreateWithoutAuctionListingInput[] | Prisma.AuctionBidUncheckedCreateWithoutAuctionListingInput[]
  connectOrCreate?: Prisma.AuctionBidCreateOrConnectWithoutAuctionListingInput | Prisma.AuctionBidCreateOrConnectWithoutAuctionListingInput[]
  createMany?: Prisma.AuctionBidCreateManyAuctionListingInputEnvelope
  connect?: Prisma.AuctionBidWhereUniqueInput | Prisma.AuctionBidWhereUniqueInput[]
}

export type AuctionBidUpdateManyWithoutAuctionListingNestedInput = {
  create?: Prisma.XOR<Prisma.AuctionBidCreateWithoutAuctionListingInput, Prisma.AuctionBidUncheckedCreateWithoutAuctionListingInput> | Prisma.AuctionBidCreateWithoutAuctionListingInput[] | Prisma.AuctionBidUncheckedCreateWithoutAuctionListingInput[]
  connectOrCreate?: Prisma.AuctionBidCreateOrConnectWithoutAuctionListingInput | Prisma.AuctionBidCreateOrConnectWithoutAuctionListingInput[]
  upsert?: Prisma.AuctionBidUpsertWithWhereUniqueWithoutAuctionListingInput | Prisma.AuctionBidUpsertWithWhereUniqueWithoutAuctionListingInput[]
  createMany?: Prisma.AuctionBidCreateManyAuctionListingInputEnvelope
  set?: Prisma.AuctionBidWhereUniqueInput | Prisma.AuctionBidWhereUniqueInput[]
  disconnect?: Prisma.AuctionBidWhereUniqueInput | Prisma.AuctionBidWhereUniqueInput[]
  delete?: Prisma.AuctionBidWhereUniqueInput | Prisma.AuctionBidWhereUniqueInput[]
  connect?: Prisma.AuctionBidWhereUniqueInput | Prisma.AuctionBidWhereUniqueInput[]
  update?: Prisma.AuctionBidUpdateWithWhereUniqueWithoutAuctionListingInput | Prisma.AuctionBidUpdateWithWhereUniqueWithoutAuctionListingInput[]
  updateMany?: Prisma.AuctionBidUpdateManyWithWhereWithoutAuctionListingInput | Prisma.AuctionBidUpdateManyWithWhereWithoutAuctionListingInput[]
  deleteMany?: Prisma.AuctionBidScalarWhereInput | Prisma.AuctionBidScalarWhereInput[]
}

export type AuctionBidUncheckedUpdateManyWithoutAuctionListingNestedInput = {
  create?: Prisma.XOR<Prisma.AuctionBidCreateWithoutAuctionListingInput, Prisma.AuctionBidUncheckedCreateWithoutAuctionListingInput> | Prisma.AuctionBidCreateWithoutAuctionListingInput[] | Prisma.AuctionBidUncheckedCreateWithoutAuctionListingInput[]
  connectOrCreate?: Prisma.AuctionBidCreateOrConnectWithoutAuctionListingInput | Prisma.AuctionBidCreateOrConnectWithoutAuctionListingInput[]
  upsert?: Prisma.AuctionBidUpsertWithWhereUniqueWithoutAuctionListingInput | Prisma.AuctionBidUpsertWithWhereUniqueWithoutAuctionListingInput[]
  createMany?: Prisma.AuctionBidCreateManyAuctionListingInputEnvelope
  set?: Prisma.AuctionBidWhereUniqueInput | Prisma.AuctionBidWhereUniqueInput[]
  disconnect?: Prisma.AuctionBidWhereUniqueInput | Prisma.AuctionBidWhereUniqueInput[]
  delete?: Prisma.AuctionBidWhereUniqueInput | Prisma.AuctionBidWhereUniqueInput[]
  connect?: Prisma.AuctionBidWhereUniqueInput | Prisma.AuctionBidWhereUniqueInput[]
  update?: Prisma.AuctionBidUpdateWithWhereUniqueWithoutAuctionListingInput | Prisma.AuctionBidUpdateWithWhereUniqueWithoutAuctionListingInput[]
  updateMany?: Prisma.AuctionBidUpdateManyWithWhereWithoutAuctionListingInput | Prisma.AuctionBidUpdateManyWithWhereWithoutAuctionListingInput[]
  deleteMany?: Prisma.AuctionBidScalarWhereInput | Prisma.AuctionBidScalarWhereInput[]
}

export type AuctionBidCreateNestedManyWithoutBidderInput = {
  create?: Prisma.XOR<Prisma.AuctionBidCreateWithoutBidderInput, Prisma.AuctionBidUncheckedCreateWithoutBidderInput> | Prisma.AuctionBidCreateWithoutBidderInput[] | Prisma.AuctionBidUncheckedCreateWithoutBidderInput[]
  connectOrCreate?: Prisma.AuctionBidCreateOrConnectWithoutBidderInput | Prisma.AuctionBidCreateOrConnectWithoutBidderInput[]
  createMany?: Prisma.AuctionBidCreateManyBidderInputEnvelope
  connect?: Prisma.AuctionBidWhereUniqueInput | Prisma.AuctionBidWhereUniqueInput[]
}

export type AuctionBidUncheckedCreateNestedManyWithoutBidderInput = {
  create?: Prisma.XOR<Prisma.AuctionBidCreateWithoutBidderInput, Prisma.AuctionBidUncheckedCreateWithoutBidderInput> | Prisma.AuctionBidCreateWithoutBidderInput[] | Prisma.AuctionBidUncheckedCreateWithoutBidderInput[]
  connectOrCreate?: Prisma.AuctionBidCreateOrConnectWithoutBidderInput | Prisma.AuctionBidCreateOrConnectWithoutBidderInput[]
  createMany?: Prisma.AuctionBidCreateManyBidderInputEnvelope
  connect?: Prisma.AuctionBidWhereUniqueInput | Prisma.AuctionBidWhereUniqueInput[]
}

export type AuctionBidUpdateManyWithoutBidderNestedInput = {
  create?: Prisma.XOR<Prisma.AuctionBidCreateWithoutBidderInput, Prisma.AuctionBidUncheckedCreateWithoutBidderInput> | Prisma.AuctionBidCreateWithoutBidderInput[] | Prisma.AuctionBidUncheckedCreateWithoutBidderInput[]
  connectOrCreate?: Prisma.AuctionBidCreateOrConnectWithoutBidderInput | Prisma.AuctionBidCreateOrConnectWithoutBidderInput[]
  upsert?: Prisma.AuctionBidUpsertWithWhereUniqueWithoutBidderInput | Prisma.AuctionBidUpsertWithWhereUniqueWithoutBidderInput[]
  createMany?: Prisma.AuctionBidCreateManyBidderInputEnvelope
  set?: Prisma.AuctionBidWhereUniqueInput | Prisma.AuctionBidWhereUniqueInput[]
  disconnect?: Prisma.AuctionBidWhereUniqueInput | Prisma.AuctionBidWhereUniqueInput[]
  delete?: Prisma.AuctionBidWhereUniqueInput | Prisma.AuctionBidWhereUniqueInput[]
  connect?: Prisma.AuctionBidWhereUniqueInput | Prisma.AuctionBidWhereUniqueInput[]
  update?: Prisma.AuctionBidUpdateWithWhereUniqueWithoutBidderInput | Prisma.AuctionBidUpdateWithWhereUniqueWithoutBidderInput[]
  updateMany?: Prisma.AuctionBidUpdateManyWithWhereWithoutBidderInput | Prisma.AuctionBidUpdateManyWithWhereWithoutBidderInput[]
  deleteMany?: Prisma.AuctionBidScalarWhereInput | Prisma.AuctionBidScalarWhereInput[]
}

export type AuctionBidUncheckedUpdateManyWithoutBidderNestedInput = {
  create?: Prisma.XOR<Prisma.AuctionBidCreateWithoutBidderInput, Prisma.AuctionBidUncheckedCreateWithoutBidderInput> | Prisma.AuctionBidCreateWithoutBidderInput[] | Prisma.AuctionBidUncheckedCreateWithoutBidderInput[]
  connectOrCreate?: Prisma.AuctionBidCreateOrConnectWithoutBidderInput | Prisma.AuctionBidCreateOrConnectWithoutBidderInput[]
  upsert?: Prisma.AuctionBidUpsertWithWhereUniqueWithoutBidderInput | Prisma.AuctionBidUpsertWithWhereUniqueWithoutBidderInput[]
  createMany?: Prisma.AuctionBidCreateManyBidderInputEnvelope
  set?: Prisma.AuctionBidWhereUniqueInput | Prisma.AuctionBidWhereUniqueInput[]
  disconnect?: Prisma.AuctionBidWhereUniqueInput | Prisma.AuctionBidWhereUniqueInput[]
  delete?: Prisma.AuctionBidWhereUniqueInput | Prisma.AuctionBidWhereUniqueInput[]
  connect?: Prisma.AuctionBidWhereUniqueInput | Prisma.AuctionBidWhereUniqueInput[]
  update?: Prisma.AuctionBidUpdateWithWhereUniqueWithoutBidderInput | Prisma.AuctionBidUpdateWithWhereUniqueWithoutBidderInput[]
  updateMany?: Prisma.AuctionBidUpdateManyWithWhereWithoutBidderInput | Prisma.AuctionBidUpdateManyWithWhereWithoutBidderInput[]
  deleteMany?: Prisma.AuctionBidScalarWhereInput | Prisma.AuctionBidScalarWhereInput[]
}

export type AuctionBidCreateWithoutAuctionListingInput = {
  id?: string
  amount: number
  createdAt?: Date | string
  bidder: Prisma.UserCreateNestedOneWithoutAuctionBidsInput
}

export type AuctionBidUncheckedCreateWithoutAuctionListingInput = {
  id?: string
  bidderId: string
  amount: number
  createdAt?: Date | string
}

export type AuctionBidCreateOrConnectWithoutAuctionListingInput = {
  where: Prisma.AuctionBidWhereUniqueInput
  create: Prisma.XOR<Prisma.AuctionBidCreateWithoutAuctionListingInput, Prisma.AuctionBidUncheckedCreateWithoutAuctionListingInput>
}

export type AuctionBidCreateManyAuctionListingInputEnvelope = {
  data: Prisma.AuctionBidCreateManyAuctionListingInput | Prisma.AuctionBidCreateManyAuctionListingInput[]
  skipDuplicates?: boolean
}

export type AuctionBidUpsertWithWhereUniqueWithoutAuctionListingInput = {
  where: Prisma.AuctionBidWhereUniqueInput
  update: Prisma.XOR<Prisma.AuctionBidUpdateWithoutAuctionListingInput, Prisma.AuctionBidUncheckedUpdateWithoutAuctionListingInput>
  create: Prisma.XOR<Prisma.AuctionBidCreateWithoutAuctionListingInput, Prisma.AuctionBidUncheckedCreateWithoutAuctionListingInput>
}

export type AuctionBidUpdateWithWhereUniqueWithoutAuctionListingInput = {
  where: Prisma.AuctionBidWhereUniqueInput
  data: Prisma.XOR<Prisma.AuctionBidUpdateWithoutAuctionListingInput, Prisma.AuctionBidUncheckedUpdateWithoutAuctionListingInput>
}

export type AuctionBidUpdateManyWithWhereWithoutAuctionListingInput = {
  where: Prisma.AuctionBidScalarWhereInput
  data: Prisma.XOR<Prisma.AuctionBidUpdateManyMutationInput, Prisma.AuctionBidUncheckedUpdateManyWithoutAuctionListingInput>
}

export type AuctionBidScalarWhereInput = {
  AND?: Prisma.AuctionBidScalarWhereInput | Prisma.AuctionBidScalarWhereInput[]
  OR?: Prisma.AuctionBidScalarWhereInput[]
  NOT?: Prisma.AuctionBidScalarWhereInput | Prisma.AuctionBidScalarWhereInput[]
  id?: Prisma.StringFilter<"AuctionBid"> | string
  auctionListingId?: Prisma.StringFilter<"AuctionBid"> | string
  bidderId?: Prisma.StringFilter<"AuctionBid"> | string
  amount?: Prisma.IntFilter<"AuctionBid"> | number
  createdAt?: Prisma.DateTimeFilter<"AuctionBid"> | Date | string
}

export type AuctionBidCreateWithoutBidderInput = {
  id?: string
  amount: number
  createdAt?: Date | string
  auctionListing: Prisma.AuctionListingCreateNestedOneWithoutBidsInput
}

export type AuctionBidUncheckedCreateWithoutBidderInput = {
  id?: string
  auctionListingId: string
  amount: number
  createdAt?: Date | string
}

export type AuctionBidCreateOrConnectWithoutBidderInput = {
  where: Prisma.AuctionBidWhereUniqueInput
  create: Prisma.XOR<Prisma.AuctionBidCreateWithoutBidderInput, Prisma.AuctionBidUncheckedCreateWithoutBidderInput>
}

export type AuctionBidCreateManyBidderInputEnvelope = {
  data: Prisma.AuctionBidCreateManyBidderInput | Prisma.AuctionBidCreateManyBidderInput[]
  skipDuplicates?: boolean
}

export type AuctionBidUpsertWithWhereUniqueWithoutBidderInput = {
  where: Prisma.AuctionBidWhereUniqueInput
  update: Prisma.XOR<Prisma.AuctionBidUpdateWithoutBidderInput, Prisma.AuctionBidUncheckedUpdateWithoutBidderInput>
  create: Prisma.XOR<Prisma.AuctionBidCreateWithoutBidderInput, Prisma.AuctionBidUncheckedCreateWithoutBidderInput>
}

export type AuctionBidUpdateWithWhereUniqueWithoutBidderInput = {
  where: Prisma.AuctionBidWhereUniqueInput
  data: Prisma.XOR<Prisma.AuctionBidUpdateWithoutBidderInput, Prisma.AuctionBidUncheckedUpdateWithoutBidderInput>
}

export type AuctionBidUpdateManyWithWhereWithoutBidderInput = {
  where: Prisma.AuctionBidScalarWhereInput
  data: Prisma.XOR<Prisma.AuctionBidUpdateManyMutationInput, Prisma.AuctionBidUncheckedUpdateManyWithoutBidderInput>
}

export type AuctionBidCreateManyAuctionListingInput = {
  id?: string
  bidderId: string
  amount: number
  createdAt?: Date | string
}

export type AuctionBidUpdateWithoutAuctionListingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  bidder?: Prisma.UserUpdateOneRequiredWithoutAuctionBidsNestedInput
}

export type AuctionBidUncheckedUpdateWithoutAuctionListingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  bidderId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AuctionBidUncheckedUpdateManyWithoutAuctionListingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  bidderId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AuctionBidCreateManyBidderInput = {
  id?: string
  auctionListingId: string
  amount: number
  createdAt?: Date | string
}

export type AuctionBidUpdateWithoutBidderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  auctionListing?: Prisma.AuctionListingUpdateOneRequiredWithoutBidsNestedInput
}

export type AuctionBidUncheckedUpdateWithoutBidderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  auctionListingId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AuctionBidUncheckedUpdateManyWithoutBidderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  auctionListingId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type AuctionBidSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  auctionListingId?: boolean
  bidderId?: boolean
  amount?: boolean
  createdAt?: boolean
  auctionListing?: boolean | Prisma.AuctionListingDefaultArgs<ExtArgs>
  bidder?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["auctionBid"]>

export type AuctionBidSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  auctionListingId?: boolean
  bidderId?: boolean
  amount?: boolean
  createdAt?: boolean
  auctionListing?: boolean | Prisma.AuctionListingDefaultArgs<ExtArgs>
  bidder?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["auctionBid"]>

export type AuctionBidSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  auctionListingId?: boolean
  bidderId?: boolean
  amount?: boolean
  createdAt?: boolean
  auctionListing?: boolean | Prisma.AuctionListingDefaultArgs<ExtArgs>
  bidder?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["auctionBid"]>

export type AuctionBidSelectScalar = {
  id?: boolean
  auctionListingId?: boolean
  bidderId?: boolean
  amount?: boolean
  createdAt?: boolean
}

export type AuctionBidOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "auctionListingId" | "bidderId" | "amount" | "createdAt", ExtArgs["result"]["auctionBid"]>
export type AuctionBidInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  auctionListing?: boolean | Prisma.AuctionListingDefaultArgs<ExtArgs>
  bidder?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AuctionBidIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  auctionListing?: boolean | Prisma.AuctionListingDefaultArgs<ExtArgs>
  bidder?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AuctionBidIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  auctionListing?: boolean | Prisma.AuctionListingDefaultArgs<ExtArgs>
  bidder?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $AuctionBidPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AuctionBid"
  objects: {
    auctionListing: Prisma.$AuctionListingPayload<ExtArgs>
    bidder: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    auctionListingId: string
    bidderId: string
    amount: number
    createdAt: Date
  }, ExtArgs["result"]["auctionBid"]>
  composites: {}
}

export type AuctionBidGetPayload<S extends boolean | null | undefined | AuctionBidDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AuctionBidPayload, S>

export type AuctionBidCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AuctionBidFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: AuctionBidCountAggregateInputType | true
  }

export interface AuctionBidDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuctionBid'], meta: { name: 'AuctionBid' } }
  /**
   * Find zero or one AuctionBid that matches the filter.
   * @param {AuctionBidFindUniqueArgs} args - Arguments to find a AuctionBid
   * @example
   * // Get one AuctionBid
   * const auctionBid = await prisma.auctionBid.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AuctionBidFindUniqueArgs>(args: Prisma.SelectSubset<T, AuctionBidFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AuctionBidClient<runtime.Types.Result.GetResult<Prisma.$AuctionBidPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AuctionBid that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AuctionBidFindUniqueOrThrowArgs} args - Arguments to find a AuctionBid
   * @example
   * // Get one AuctionBid
   * const auctionBid = await prisma.auctionBid.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AuctionBidFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AuctionBidFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AuctionBidClient<runtime.Types.Result.GetResult<Prisma.$AuctionBidPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AuctionBid that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuctionBidFindFirstArgs} args - Arguments to find a AuctionBid
   * @example
   * // Get one AuctionBid
   * const auctionBid = await prisma.auctionBid.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AuctionBidFindFirstArgs>(args?: Prisma.SelectSubset<T, AuctionBidFindFirstArgs<ExtArgs>>): Prisma.Prisma__AuctionBidClient<runtime.Types.Result.GetResult<Prisma.$AuctionBidPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AuctionBid that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuctionBidFindFirstOrThrowArgs} args - Arguments to find a AuctionBid
   * @example
   * // Get one AuctionBid
   * const auctionBid = await prisma.auctionBid.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AuctionBidFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AuctionBidFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AuctionBidClient<runtime.Types.Result.GetResult<Prisma.$AuctionBidPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AuctionBids that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuctionBidFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AuctionBids
   * const auctionBids = await prisma.auctionBid.findMany()
   * 
   * // Get first 10 AuctionBids
   * const auctionBids = await prisma.auctionBid.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const auctionBidWithIdOnly = await prisma.auctionBid.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AuctionBidFindManyArgs>(args?: Prisma.SelectSubset<T, AuctionBidFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AuctionBidPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AuctionBid.
   * @param {AuctionBidCreateArgs} args - Arguments to create a AuctionBid.
   * @example
   * // Create one AuctionBid
   * const AuctionBid = await prisma.auctionBid.create({
   *   data: {
   *     // ... data to create a AuctionBid
   *   }
   * })
   * 
   */
  create<T extends AuctionBidCreateArgs>(args: Prisma.SelectSubset<T, AuctionBidCreateArgs<ExtArgs>>): Prisma.Prisma__AuctionBidClient<runtime.Types.Result.GetResult<Prisma.$AuctionBidPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AuctionBids.
   * @param {AuctionBidCreateManyArgs} args - Arguments to create many AuctionBids.
   * @example
   * // Create many AuctionBids
   * const auctionBid = await prisma.auctionBid.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AuctionBidCreateManyArgs>(args?: Prisma.SelectSubset<T, AuctionBidCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AuctionBids and returns the data saved in the database.
   * @param {AuctionBidCreateManyAndReturnArgs} args - Arguments to create many AuctionBids.
   * @example
   * // Create many AuctionBids
   * const auctionBid = await prisma.auctionBid.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AuctionBids and only return the `id`
   * const auctionBidWithIdOnly = await prisma.auctionBid.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AuctionBidCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AuctionBidCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AuctionBidPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AuctionBid.
   * @param {AuctionBidDeleteArgs} args - Arguments to delete one AuctionBid.
   * @example
   * // Delete one AuctionBid
   * const AuctionBid = await prisma.auctionBid.delete({
   *   where: {
   *     // ... filter to delete one AuctionBid
   *   }
   * })
   * 
   */
  delete<T extends AuctionBidDeleteArgs>(args: Prisma.SelectSubset<T, AuctionBidDeleteArgs<ExtArgs>>): Prisma.Prisma__AuctionBidClient<runtime.Types.Result.GetResult<Prisma.$AuctionBidPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AuctionBid.
   * @param {AuctionBidUpdateArgs} args - Arguments to update one AuctionBid.
   * @example
   * // Update one AuctionBid
   * const auctionBid = await prisma.auctionBid.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AuctionBidUpdateArgs>(args: Prisma.SelectSubset<T, AuctionBidUpdateArgs<ExtArgs>>): Prisma.Prisma__AuctionBidClient<runtime.Types.Result.GetResult<Prisma.$AuctionBidPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AuctionBids.
   * @param {AuctionBidDeleteManyArgs} args - Arguments to filter AuctionBids to delete.
   * @example
   * // Delete a few AuctionBids
   * const { count } = await prisma.auctionBid.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AuctionBidDeleteManyArgs>(args?: Prisma.SelectSubset<T, AuctionBidDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AuctionBids.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuctionBidUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AuctionBids
   * const auctionBid = await prisma.auctionBid.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AuctionBidUpdateManyArgs>(args: Prisma.SelectSubset<T, AuctionBidUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AuctionBids and returns the data updated in the database.
   * @param {AuctionBidUpdateManyAndReturnArgs} args - Arguments to update many AuctionBids.
   * @example
   * // Update many AuctionBids
   * const auctionBid = await prisma.auctionBid.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AuctionBids and only return the `id`
   * const auctionBidWithIdOnly = await prisma.auctionBid.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AuctionBidUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AuctionBidUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AuctionBidPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AuctionBid.
   * @param {AuctionBidUpsertArgs} args - Arguments to update or create a AuctionBid.
   * @example
   * // Update or create a AuctionBid
   * const auctionBid = await prisma.auctionBid.upsert({
   *   create: {
   *     // ... data to create a AuctionBid
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AuctionBid we want to update
   *   }
   * })
   */
  upsert<T extends AuctionBidUpsertArgs>(args: Prisma.SelectSubset<T, AuctionBidUpsertArgs<ExtArgs>>): Prisma.Prisma__AuctionBidClient<runtime.Types.Result.GetResult<Prisma.$AuctionBidPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AuctionBids.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuctionBidCountArgs} args - Arguments to filter AuctionBids to count.
   * @example
   * // Count the number of AuctionBids
   * const count = await prisma.auctionBid.count({
   *   where: {
   *     // ... the filter for the AuctionBids we want to count
   *   }
   * })
  **/
  count<T extends AuctionBidCountArgs>(
    args?: Prisma.Subset<T, AuctionBidCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AuctionBidCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AuctionBid.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuctionBidAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AuctionBidAggregateArgs>(args: Prisma.Subset<T, AuctionBidAggregateArgs>): Prisma.PrismaPromise<GetAuctionBidAggregateType<T>>

  /**
   * Group by AuctionBid.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuctionBidGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AuctionBidGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AuctionBidGroupByArgs['orderBy'] }
      : { orderBy?: AuctionBidGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AuctionBidGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuctionBidGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AuctionBid model
 */
readonly fields: AuctionBidFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AuctionBid.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AuctionBidClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  auctionListing<T extends Prisma.AuctionListingDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AuctionListingDefaultArgs<ExtArgs>>): Prisma.Prisma__AuctionListingClient<runtime.Types.Result.GetResult<Prisma.$AuctionListingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  bidder<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AuctionBid model
 */
export interface AuctionBidFieldRefs {
  readonly id: Prisma.FieldRef<"AuctionBid", 'String'>
  readonly auctionListingId: Prisma.FieldRef<"AuctionBid", 'String'>
  readonly bidderId: Prisma.FieldRef<"AuctionBid", 'String'>
  readonly amount: Prisma.FieldRef<"AuctionBid", 'Int'>
  readonly createdAt: Prisma.FieldRef<"AuctionBid", 'DateTime'>
}
    

// Custom InputTypes
/**
 * AuctionBid findUnique
 */
export type AuctionBidFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionBid
   */
  select?: Prisma.AuctionBidSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionBid
   */
  omit?: Prisma.AuctionBidOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionBidInclude<ExtArgs> | null
  /**
   * Filter, which AuctionBid to fetch.
   */
  where: Prisma.AuctionBidWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionBid findUniqueOrThrow
 */
export type AuctionBidFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionBid
   */
  select?: Prisma.AuctionBidSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionBid
   */
  omit?: Prisma.AuctionBidOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionBidInclude<ExtArgs> | null
  /**
   * Filter, which AuctionBid to fetch.
   */
  where: Prisma.AuctionBidWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionBid findFirst
 */
export type AuctionBidFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionBid
   */
  select?: Prisma.AuctionBidSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionBid
   */
  omit?: Prisma.AuctionBidOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionBidInclude<ExtArgs> | null
  /**
   * Filter, which AuctionBid to fetch.
   */
  where?: Prisma.AuctionBidWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AuctionBids to fetch.
   */
  orderBy?: Prisma.AuctionBidOrderByWithRelationInput | Prisma.AuctionBidOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AuctionBids.
   */
  cursor?: Prisma.AuctionBidWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AuctionBids from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AuctionBids.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AuctionBids.
   */
  distinct?: Prisma.AuctionBidScalarFieldEnum | Prisma.AuctionBidScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionBid findFirstOrThrow
 */
export type AuctionBidFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionBid
   */
  select?: Prisma.AuctionBidSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionBid
   */
  omit?: Prisma.AuctionBidOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionBidInclude<ExtArgs> | null
  /**
   * Filter, which AuctionBid to fetch.
   */
  where?: Prisma.AuctionBidWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AuctionBids to fetch.
   */
  orderBy?: Prisma.AuctionBidOrderByWithRelationInput | Prisma.AuctionBidOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AuctionBids.
   */
  cursor?: Prisma.AuctionBidWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AuctionBids from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AuctionBids.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AuctionBids.
   */
  distinct?: Prisma.AuctionBidScalarFieldEnum | Prisma.AuctionBidScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionBid findMany
 */
export type AuctionBidFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionBid
   */
  select?: Prisma.AuctionBidSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionBid
   */
  omit?: Prisma.AuctionBidOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionBidInclude<ExtArgs> | null
  /**
   * Filter, which AuctionBids to fetch.
   */
  where?: Prisma.AuctionBidWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AuctionBids to fetch.
   */
  orderBy?: Prisma.AuctionBidOrderByWithRelationInput | Prisma.AuctionBidOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AuctionBids.
   */
  cursor?: Prisma.AuctionBidWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AuctionBids from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AuctionBids.
   */
  skip?: number
  distinct?: Prisma.AuctionBidScalarFieldEnum | Prisma.AuctionBidScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionBid create
 */
export type AuctionBidCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionBid
   */
  select?: Prisma.AuctionBidSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionBid
   */
  omit?: Prisma.AuctionBidOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionBidInclude<ExtArgs> | null
  /**
   * The data needed to create a AuctionBid.
   */
  data: Prisma.XOR<Prisma.AuctionBidCreateInput, Prisma.AuctionBidUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionBid createMany
 */
export type AuctionBidCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AuctionBids.
   */
  data: Prisma.AuctionBidCreateManyInput | Prisma.AuctionBidCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AuctionBid createManyAndReturn
 */
export type AuctionBidCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionBid
   */
  select?: Prisma.AuctionBidSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionBid
   */
  omit?: Prisma.AuctionBidOmit<ExtArgs> | null
  /**
   * The data used to create many AuctionBids.
   */
  data: Prisma.AuctionBidCreateManyInput | Prisma.AuctionBidCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionBidIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * AuctionBid update
 */
export type AuctionBidUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionBid
   */
  select?: Prisma.AuctionBidSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionBid
   */
  omit?: Prisma.AuctionBidOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionBidInclude<ExtArgs> | null
  /**
   * The data needed to update a AuctionBid.
   */
  data: Prisma.XOR<Prisma.AuctionBidUpdateInput, Prisma.AuctionBidUncheckedUpdateInput>
  /**
   * Choose, which AuctionBid to update.
   */
  where: Prisma.AuctionBidWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionBid updateMany
 */
export type AuctionBidUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AuctionBids.
   */
  data: Prisma.XOR<Prisma.AuctionBidUpdateManyMutationInput, Prisma.AuctionBidUncheckedUpdateManyInput>
  /**
   * Filter which AuctionBids to update
   */
  where?: Prisma.AuctionBidWhereInput
  /**
   * Limit how many AuctionBids to update.
   */
  limit?: number
}

/**
 * AuctionBid updateManyAndReturn
 */
export type AuctionBidUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionBid
   */
  select?: Prisma.AuctionBidSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionBid
   */
  omit?: Prisma.AuctionBidOmit<ExtArgs> | null
  /**
   * The data used to update AuctionBids.
   */
  data: Prisma.XOR<Prisma.AuctionBidUpdateManyMutationInput, Prisma.AuctionBidUncheckedUpdateManyInput>
  /**
   * Filter which AuctionBids to update
   */
  where?: Prisma.AuctionBidWhereInput
  /**
   * Limit how many AuctionBids to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionBidIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * AuctionBid upsert
 */
export type AuctionBidUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionBid
   */
  select?: Prisma.AuctionBidSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionBid
   */
  omit?: Prisma.AuctionBidOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionBidInclude<ExtArgs> | null
  /**
   * The filter to search for the AuctionBid to update in case it exists.
   */
  where: Prisma.AuctionBidWhereUniqueInput
  /**
   * In case the AuctionBid found by the `where` argument doesn't exist, create a new AuctionBid with this data.
   */
  create: Prisma.XOR<Prisma.AuctionBidCreateInput, Prisma.AuctionBidUncheckedCreateInput>
  /**
   * In case the AuctionBid was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AuctionBidUpdateInput, Prisma.AuctionBidUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionBid delete
 */
export type AuctionBidDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionBid
   */
  select?: Prisma.AuctionBidSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionBid
   */
  omit?: Prisma.AuctionBidOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionBidInclude<ExtArgs> | null
  /**
   * Filter which AuctionBid to delete.
   */
  where: Prisma.AuctionBidWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionBid deleteMany
 */
export type AuctionBidDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AuctionBids to delete
   */
  where?: Prisma.AuctionBidWhereInput
  /**
   * Limit how many AuctionBids to delete.
   */
  limit?: number
}

/**
 * AuctionBid without action
 */
export type AuctionBidDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionBid
   */
  select?: Prisma.AuctionBidSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionBid
   */
  omit?: Prisma.AuctionBidOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionBidInclude<ExtArgs> | null
}
