
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 * 
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 * 
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 * 
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective 
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/client"
import type * as Prisma from "../models.ts"
import { type PrismaClient } from "./class.ts"

export type * from '../models.ts'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
export const prismaVersion: PrismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  AuctionLive: 'AuctionLive',
  AuctionListing: 'AuctionListing',
  AuctionListingItem: 'AuctionListingItem',
  AuctionBid: 'AuctionBid',
  AuctionReview: 'AuctionReview',
  LiveAuctionSetting: 'LiveAuctionSetting',
  BetaAccess: 'BetaAccess',
  Entity: 'Entity',
  EntityLedger: 'EntityLedger',
  Organization: 'Organization',
  OrganizationMember: 'OrganizationMember',
  User: 'User',
  Profile: 'Profile',
  ProfileReputationLedger: 'ProfileReputationLedger'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<ClientOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "auctionLive" | "auctionListing" | "auctionListingItem" | "auctionBid" | "auctionReview" | "liveAuctionSetting" | "betaAccess" | "entity" | "entityLedger" | "organization" | "organizationMember" | "user" | "profile" | "profileReputationLedger"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    AuctionLive: {
      payload: Prisma.$AuctionLivePayload<ExtArgs>
      fields: Prisma.AuctionLiveFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AuctionLiveFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionLivePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AuctionLiveFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionLivePayload>
        }
        findFirst: {
          args: Prisma.AuctionLiveFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionLivePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AuctionLiveFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionLivePayload>
        }
        findMany: {
          args: Prisma.AuctionLiveFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionLivePayload>[]
        }
        create: {
          args: Prisma.AuctionLiveCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionLivePayload>
        }
        createMany: {
          args: Prisma.AuctionLiveCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AuctionLiveCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionLivePayload>[]
        }
        delete: {
          args: Prisma.AuctionLiveDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionLivePayload>
        }
        update: {
          args: Prisma.AuctionLiveUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionLivePayload>
        }
        deleteMany: {
          args: Prisma.AuctionLiveDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AuctionLiveUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AuctionLiveUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionLivePayload>[]
        }
        upsert: {
          args: Prisma.AuctionLiveUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionLivePayload>
        }
        aggregate: {
          args: Prisma.AuctionLiveAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAuctionLive>
        }
        groupBy: {
          args: Prisma.AuctionLiveGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AuctionLiveGroupByOutputType>[]
        }
        count: {
          args: Prisma.AuctionLiveCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AuctionLiveCountAggregateOutputType> | number
        }
      }
    }
    AuctionListing: {
      payload: Prisma.$AuctionListingPayload<ExtArgs>
      fields: Prisma.AuctionListingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AuctionListingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AuctionListingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingPayload>
        }
        findFirst: {
          args: Prisma.AuctionListingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AuctionListingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingPayload>
        }
        findMany: {
          args: Prisma.AuctionListingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingPayload>[]
        }
        create: {
          args: Prisma.AuctionListingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingPayload>
        }
        createMany: {
          args: Prisma.AuctionListingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AuctionListingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingPayload>[]
        }
        delete: {
          args: Prisma.AuctionListingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingPayload>
        }
        update: {
          args: Prisma.AuctionListingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingPayload>
        }
        deleteMany: {
          args: Prisma.AuctionListingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AuctionListingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AuctionListingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingPayload>[]
        }
        upsert: {
          args: Prisma.AuctionListingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingPayload>
        }
        aggregate: {
          args: Prisma.AuctionListingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAuctionListing>
        }
        groupBy: {
          args: Prisma.AuctionListingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AuctionListingGroupByOutputType>[]
        }
        count: {
          args: Prisma.AuctionListingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AuctionListingCountAggregateOutputType> | number
        }
      }
    }
    AuctionListingItem: {
      payload: Prisma.$AuctionListingItemPayload<ExtArgs>
      fields: Prisma.AuctionListingItemFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AuctionListingItemFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingItemPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AuctionListingItemFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingItemPayload>
        }
        findFirst: {
          args: Prisma.AuctionListingItemFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingItemPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AuctionListingItemFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingItemPayload>
        }
        findMany: {
          args: Prisma.AuctionListingItemFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingItemPayload>[]
        }
        create: {
          args: Prisma.AuctionListingItemCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingItemPayload>
        }
        createMany: {
          args: Prisma.AuctionListingItemCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AuctionListingItemCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingItemPayload>[]
        }
        delete: {
          args: Prisma.AuctionListingItemDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingItemPayload>
        }
        update: {
          args: Prisma.AuctionListingItemUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingItemPayload>
        }
        deleteMany: {
          args: Prisma.AuctionListingItemDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AuctionListingItemUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AuctionListingItemUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingItemPayload>[]
        }
        upsert: {
          args: Prisma.AuctionListingItemUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionListingItemPayload>
        }
        aggregate: {
          args: Prisma.AuctionListingItemAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAuctionListingItem>
        }
        groupBy: {
          args: Prisma.AuctionListingItemGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AuctionListingItemGroupByOutputType>[]
        }
        count: {
          args: Prisma.AuctionListingItemCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AuctionListingItemCountAggregateOutputType> | number
        }
      }
    }
    AuctionBid: {
      payload: Prisma.$AuctionBidPayload<ExtArgs>
      fields: Prisma.AuctionBidFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AuctionBidFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionBidPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AuctionBidFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionBidPayload>
        }
        findFirst: {
          args: Prisma.AuctionBidFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionBidPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AuctionBidFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionBidPayload>
        }
        findMany: {
          args: Prisma.AuctionBidFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionBidPayload>[]
        }
        create: {
          args: Prisma.AuctionBidCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionBidPayload>
        }
        createMany: {
          args: Prisma.AuctionBidCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AuctionBidCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionBidPayload>[]
        }
        delete: {
          args: Prisma.AuctionBidDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionBidPayload>
        }
        update: {
          args: Prisma.AuctionBidUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionBidPayload>
        }
        deleteMany: {
          args: Prisma.AuctionBidDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AuctionBidUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AuctionBidUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionBidPayload>[]
        }
        upsert: {
          args: Prisma.AuctionBidUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionBidPayload>
        }
        aggregate: {
          args: Prisma.AuctionBidAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAuctionBid>
        }
        groupBy: {
          args: Prisma.AuctionBidGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AuctionBidGroupByOutputType>[]
        }
        count: {
          args: Prisma.AuctionBidCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AuctionBidCountAggregateOutputType> | number
        }
      }
    }
    AuctionReview: {
      payload: Prisma.$AuctionReviewPayload<ExtArgs>
      fields: Prisma.AuctionReviewFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AuctionReviewFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionReviewPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AuctionReviewFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionReviewPayload>
        }
        findFirst: {
          args: Prisma.AuctionReviewFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionReviewPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AuctionReviewFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionReviewPayload>
        }
        findMany: {
          args: Prisma.AuctionReviewFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionReviewPayload>[]
        }
        create: {
          args: Prisma.AuctionReviewCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionReviewPayload>
        }
        createMany: {
          args: Prisma.AuctionReviewCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AuctionReviewCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionReviewPayload>[]
        }
        delete: {
          args: Prisma.AuctionReviewDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionReviewPayload>
        }
        update: {
          args: Prisma.AuctionReviewUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionReviewPayload>
        }
        deleteMany: {
          args: Prisma.AuctionReviewDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AuctionReviewUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AuctionReviewUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionReviewPayload>[]
        }
        upsert: {
          args: Prisma.AuctionReviewUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuctionReviewPayload>
        }
        aggregate: {
          args: Prisma.AuctionReviewAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAuctionReview>
        }
        groupBy: {
          args: Prisma.AuctionReviewGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AuctionReviewGroupByOutputType>[]
        }
        count: {
          args: Prisma.AuctionReviewCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AuctionReviewCountAggregateOutputType> | number
        }
      }
    }
    LiveAuctionSetting: {
      payload: Prisma.$LiveAuctionSettingPayload<ExtArgs>
      fields: Prisma.LiveAuctionSettingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.LiveAuctionSettingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LiveAuctionSettingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.LiveAuctionSettingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LiveAuctionSettingPayload>
        }
        findFirst: {
          args: Prisma.LiveAuctionSettingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LiveAuctionSettingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.LiveAuctionSettingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LiveAuctionSettingPayload>
        }
        findMany: {
          args: Prisma.LiveAuctionSettingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LiveAuctionSettingPayload>[]
        }
        create: {
          args: Prisma.LiveAuctionSettingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LiveAuctionSettingPayload>
        }
        createMany: {
          args: Prisma.LiveAuctionSettingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.LiveAuctionSettingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LiveAuctionSettingPayload>[]
        }
        delete: {
          args: Prisma.LiveAuctionSettingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LiveAuctionSettingPayload>
        }
        update: {
          args: Prisma.LiveAuctionSettingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LiveAuctionSettingPayload>
        }
        deleteMany: {
          args: Prisma.LiveAuctionSettingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.LiveAuctionSettingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.LiveAuctionSettingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LiveAuctionSettingPayload>[]
        }
        upsert: {
          args: Prisma.LiveAuctionSettingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LiveAuctionSettingPayload>
        }
        aggregate: {
          args: Prisma.LiveAuctionSettingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLiveAuctionSetting>
        }
        groupBy: {
          args: Prisma.LiveAuctionSettingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LiveAuctionSettingGroupByOutputType>[]
        }
        count: {
          args: Prisma.LiveAuctionSettingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LiveAuctionSettingCountAggregateOutputType> | number
        }
      }
    }
    BetaAccess: {
      payload: Prisma.$BetaAccessPayload<ExtArgs>
      fields: Prisma.BetaAccessFieldRefs
      operations: {
        findUnique: {
          args: Prisma.BetaAccessFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BetaAccessPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.BetaAccessFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BetaAccessPayload>
        }
        findFirst: {
          args: Prisma.BetaAccessFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BetaAccessPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.BetaAccessFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BetaAccessPayload>
        }
        findMany: {
          args: Prisma.BetaAccessFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BetaAccessPayload>[]
        }
        create: {
          args: Prisma.BetaAccessCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BetaAccessPayload>
        }
        createMany: {
          args: Prisma.BetaAccessCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.BetaAccessCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BetaAccessPayload>[]
        }
        delete: {
          args: Prisma.BetaAccessDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BetaAccessPayload>
        }
        update: {
          args: Prisma.BetaAccessUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BetaAccessPayload>
        }
        deleteMany: {
          args: Prisma.BetaAccessDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.BetaAccessUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.BetaAccessUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BetaAccessPayload>[]
        }
        upsert: {
          args: Prisma.BetaAccessUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BetaAccessPayload>
        }
        aggregate: {
          args: Prisma.BetaAccessAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateBetaAccess>
        }
        groupBy: {
          args: Prisma.BetaAccessGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BetaAccessGroupByOutputType>[]
        }
        count: {
          args: Prisma.BetaAccessCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BetaAccessCountAggregateOutputType> | number
        }
      }
    }
    Entity: {
      payload: Prisma.$EntityPayload<ExtArgs>
      fields: Prisma.EntityFieldRefs
      operations: {
        findUnique: {
          args: Prisma.EntityFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.EntityFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityPayload>
        }
        findFirst: {
          args: Prisma.EntityFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.EntityFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityPayload>
        }
        findMany: {
          args: Prisma.EntityFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityPayload>[]
        }
        create: {
          args: Prisma.EntityCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityPayload>
        }
        createMany: {
          args: Prisma.EntityCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.EntityCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityPayload>[]
        }
        delete: {
          args: Prisma.EntityDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityPayload>
        }
        update: {
          args: Prisma.EntityUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityPayload>
        }
        deleteMany: {
          args: Prisma.EntityDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.EntityUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.EntityUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityPayload>[]
        }
        upsert: {
          args: Prisma.EntityUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityPayload>
        }
        aggregate: {
          args: Prisma.EntityAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateEntity>
        }
        groupBy: {
          args: Prisma.EntityGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EntityGroupByOutputType>[]
        }
        count: {
          args: Prisma.EntityCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EntityCountAggregateOutputType> | number
        }
      }
    }
    EntityLedger: {
      payload: Prisma.$EntityLedgerPayload<ExtArgs>
      fields: Prisma.EntityLedgerFieldRefs
      operations: {
        findUnique: {
          args: Prisma.EntityLedgerFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLedgerPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.EntityLedgerFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLedgerPayload>
        }
        findFirst: {
          args: Prisma.EntityLedgerFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLedgerPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.EntityLedgerFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLedgerPayload>
        }
        findMany: {
          args: Prisma.EntityLedgerFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLedgerPayload>[]
        }
        create: {
          args: Prisma.EntityLedgerCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLedgerPayload>
        }
        createMany: {
          args: Prisma.EntityLedgerCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.EntityLedgerCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLedgerPayload>[]
        }
        delete: {
          args: Prisma.EntityLedgerDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLedgerPayload>
        }
        update: {
          args: Prisma.EntityLedgerUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLedgerPayload>
        }
        deleteMany: {
          args: Prisma.EntityLedgerDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.EntityLedgerUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.EntityLedgerUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLedgerPayload>[]
        }
        upsert: {
          args: Prisma.EntityLedgerUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLedgerPayload>
        }
        aggregate: {
          args: Prisma.EntityLedgerAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateEntityLedger>
        }
        groupBy: {
          args: Prisma.EntityLedgerGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EntityLedgerGroupByOutputType>[]
        }
        count: {
          args: Prisma.EntityLedgerCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EntityLedgerCountAggregateOutputType> | number
        }
      }
    }
    Organization: {
      payload: Prisma.$OrganizationPayload<ExtArgs>
      fields: Prisma.OrganizationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        findFirst: {
          args: Prisma.OrganizationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        findMany: {
          args: Prisma.OrganizationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
        }
        create: {
          args: Prisma.OrganizationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        createMany: {
          args: Prisma.OrganizationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
        }
        delete: {
          args: Prisma.OrganizationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        update: {
          args: Prisma.OrganizationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        deleteMany: {
          args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OrganizationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
        }
        upsert: {
          args: Prisma.OrganizationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        aggregate: {
          args: Prisma.OrganizationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrganization>
        }
        groupBy: {
          args: Prisma.OrganizationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrganizationGroupByOutputType>[]
        }
        count: {
          args: Prisma.OrganizationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrganizationCountAggregateOutputType> | number
        }
      }
    }
    OrganizationMember: {
      payload: Prisma.$OrganizationMemberPayload<ExtArgs>
      fields: Prisma.OrganizationMemberFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OrganizationMemberFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationMemberPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OrganizationMemberFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationMemberPayload>
        }
        findFirst: {
          args: Prisma.OrganizationMemberFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationMemberPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OrganizationMemberFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationMemberPayload>
        }
        findMany: {
          args: Prisma.OrganizationMemberFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationMemberPayload>[]
        }
        create: {
          args: Prisma.OrganizationMemberCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationMemberPayload>
        }
        createMany: {
          args: Prisma.OrganizationMemberCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OrganizationMemberCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationMemberPayload>[]
        }
        delete: {
          args: Prisma.OrganizationMemberDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationMemberPayload>
        }
        update: {
          args: Prisma.OrganizationMemberUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationMemberPayload>
        }
        deleteMany: {
          args: Prisma.OrganizationMemberDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OrganizationMemberUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OrganizationMemberUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationMemberPayload>[]
        }
        upsert: {
          args: Prisma.OrganizationMemberUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationMemberPayload>
        }
        aggregate: {
          args: Prisma.OrganizationMemberAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrganizationMember>
        }
        groupBy: {
          args: Prisma.OrganizationMemberGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrganizationMemberGroupByOutputType>[]
        }
        count: {
          args: Prisma.OrganizationMemberCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrganizationMemberCountAggregateOutputType> | number
        }
      }
    }
    User: {
      payload: Prisma.$UserPayload<ExtArgs>
      fields: Prisma.UserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>
        }
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number
        }
      }
    }
    Profile: {
      payload: Prisma.$ProfilePayload<ExtArgs>
      fields: Prisma.ProfileFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProfileFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>
        }
        findFirst: {
          args: Prisma.ProfileFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>
        }
        findMany: {
          args: Prisma.ProfileFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>[]
        }
        create: {
          args: Prisma.ProfileCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>
        }
        createMany: {
          args: Prisma.ProfileCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProfileCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>[]
        }
        delete: {
          args: Prisma.ProfileDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>
        }
        update: {
          args: Prisma.ProfileUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>
        }
        deleteMany: {
          args: Prisma.ProfileDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProfileUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProfileUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>[]
        }
        upsert: {
          args: Prisma.ProfileUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>
        }
        aggregate: {
          args: Prisma.ProfileAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProfile>
        }
        groupBy: {
          args: Prisma.ProfileGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProfileGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProfileCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProfileCountAggregateOutputType> | number
        }
      }
    }
    ProfileReputationLedger: {
      payload: Prisma.$ProfileReputationLedgerPayload<ExtArgs>
      fields: Prisma.ProfileReputationLedgerFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProfileReputationLedgerFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfileReputationLedgerPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProfileReputationLedgerFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfileReputationLedgerPayload>
        }
        findFirst: {
          args: Prisma.ProfileReputationLedgerFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfileReputationLedgerPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProfileReputationLedgerFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfileReputationLedgerPayload>
        }
        findMany: {
          args: Prisma.ProfileReputationLedgerFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfileReputationLedgerPayload>[]
        }
        create: {
          args: Prisma.ProfileReputationLedgerCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfileReputationLedgerPayload>
        }
        createMany: {
          args: Prisma.ProfileReputationLedgerCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProfileReputationLedgerCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfileReputationLedgerPayload>[]
        }
        delete: {
          args: Prisma.ProfileReputationLedgerDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfileReputationLedgerPayload>
        }
        update: {
          args: Prisma.ProfileReputationLedgerUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfileReputationLedgerPayload>
        }
        deleteMany: {
          args: Prisma.ProfileReputationLedgerDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProfileReputationLedgerUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProfileReputationLedgerUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfileReputationLedgerPayload>[]
        }
        upsert: {
          args: Prisma.ProfileReputationLedgerUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfileReputationLedgerPayload>
        }
        aggregate: {
          args: Prisma.ProfileReputationLedgerAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProfileReputationLedger>
        }
        groupBy: {
          args: Prisma.ProfileReputationLedgerGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProfileReputationLedgerGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProfileReputationLedgerCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProfileReputationLedgerCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const AuctionLiveScalarFieldEnum = {
  id: 'id',
  startTime: 'startTime',
  title: 'title',
  description: 'description',
  moderatorId: 'moderatorId',
  createdAt: 'createdAt',
  endedAt: 'endedAt',
  status: 'status'
} as const

export type AuctionLiveScalarFieldEnum = (typeof AuctionLiveScalarFieldEnum)[keyof typeof AuctionLiveScalarFieldEnum]


export const RelationLoadStrategy = {
  query: 'query',
  join: 'join'
} as const

export type RelationLoadStrategy = (typeof RelationLoadStrategy)[keyof typeof RelationLoadStrategy]


export const AuctionListingScalarFieldEnum = {
  id: 'id',
  listingNumber: 'listingNumber',
  status: 'status',
  type: 'type',
  title: 'title',
  description: 'description',
  location: 'location',
  minimumBid: 'minimumBid',
  creatorId: 'creatorId',
  anonymous: 'anonymous',
  creditsRecipient: 'creditsRecipient',
  winnerId: 'winnerId',
  organizationId: 'organizationId',
  liveAuctionId: 'liveAuctionId',
  allowBuyNow: 'allowBuyNow',
  buyNowPrice: 'buyNowPrice',
  winningBidAmount: 'winningBidAmount'
} as const

export type AuctionListingScalarFieldEnum = (typeof AuctionListingScalarFieldEnum)[keyof typeof AuctionListingScalarFieldEnum]


export const AuctionListingItemScalarFieldEnum = {
  id: 'id',
  listingId: 'listingId',
  entityId: 'entityId',
  name: 'name',
  quantity: 'quantity',
  uuu: 'uuu',
  unique: 'unique',
  customName: 'customName',
  customImage: 'customImage',
  imported: 'imported',
  createdAt: 'createdAt'
} as const

export type AuctionListingItemScalarFieldEnum = (typeof AuctionListingItemScalarFieldEnum)[keyof typeof AuctionListingItemScalarFieldEnum]


export const AuctionBidScalarFieldEnum = {
  id: 'id',
  auctionListingId: 'auctionListingId',
  bidderId: 'bidderId',
  amount: 'amount',
  createdAt: 'createdAt'
} as const

export type AuctionBidScalarFieldEnum = (typeof AuctionBidScalarFieldEnum)[keyof typeof AuctionBidScalarFieldEnum]


export const AuctionReviewScalarFieldEnum = {
  id: 'id',
  listingId: 'listingId',
  reviewerId: 'reviewerId',
  revieweeId: 'revieweeId',
  createdAt: 'createdAt',
  completedAt: 'completedAt'
} as const

export type AuctionReviewScalarFieldEnum = (typeof AuctionReviewScalarFieldEnum)[keyof typeof AuctionReviewScalarFieldEnum]


export const LiveAuctionSettingScalarFieldEnum = {
  id: 'id',
  broadcastWebhook: 'broadcastWebhook'
} as const

export type LiveAuctionSettingScalarFieldEnum = (typeof LiveAuctionSettingScalarFieldEnum)[keyof typeof LiveAuctionSettingScalarFieldEnum]


export const BetaAccessScalarFieldEnum = {
  id: 'id',
  combineId: 'combineId',
  createdAt: 'createdAt'
} as const

export type BetaAccessScalarFieldEnum = (typeof BetaAccessScalarFieldEnum)[keyof typeof BetaAccessScalarFieldEnum]


export const EntityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  combineUid: 'combineUid',
  combineHref: 'combineHref',
  combineData: 'combineData',
  imageSmall: 'imageSmall',
  imageLarge: 'imageLarge'
} as const

export type EntityScalarFieldEnum = (typeof EntityScalarFieldEnum)[keyof typeof EntityScalarFieldEnum]


export const EntityLedgerScalarFieldEnum = {
  id: 'id',
  entityId: 'entityId',
  type: 'type',
  value: 'value',
  timestamp: 'timestamp'
} as const

export type EntityLedgerScalarFieldEnum = (typeof EntityLedgerScalarFieldEnum)[keyof typeof EntityLedgerScalarFieldEnum]


export const OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  logoUrl: 'logoUrl',
  reputation: 'reputation',
  websiteUrl: 'websiteUrl',
  discordUrl: 'discordUrl',
  ownerId: 'ownerId',
  createdAt: 'createdAt'
} as const

export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


export const OrganizationMemberScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  profileId: 'profileId',
  role: 'role',
  joinedAt: 'joinedAt'
} as const

export type OrganizationMemberScalarFieldEnum = (typeof OrganizationMemberScalarFieldEnum)[keyof typeof OrganizationMemberScalarFieldEnum]


export const UserScalarFieldEnum = {
  id: 'id',
  combineId: 'combineId',
  username: 'username',
  combineScopes: 'combineScopes',
  discordId: 'discordId',
  discordUsername: 'discordUsername',
  role: 'role',
  apiKey: 'apiKey',
  banned: 'banned',
  bannedReason: 'bannedReason',
  bannedDate: 'bannedDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLogin: 'lastLogin'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const ProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  displayName: 'displayName',
  avatar: 'avatar',
  biography: 'biography',
  reputation: 'reputation',
  activeMembershipId: 'activeMembershipId'
} as const

export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


export const ProfileReputationLedgerScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  value: 'value',
  reason: 'reason',
  timestamp: 'timestamp'
} as const

export type ProfileReputationLedgerScalarFieldEnum = (typeof ProfileReputationLedgerScalarFieldEnum)[keyof typeof ProfileReputationLedgerScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const JsonNullValueInput = {
  JsonNull: JsonNull
} as const

export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]



/**
 * Field references 
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'AuctionLiveStatus'
 */
export type EnumAuctionLiveStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuctionLiveStatus'>
    


/**
 * Reference to a field of type 'AuctionLiveStatus[]'
 */
export type ListEnumAuctionLiveStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuctionLiveStatus[]'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'AuctionListingStatus'
 */
export type EnumAuctionListingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuctionListingStatus'>
    


/**
 * Reference to a field of type 'AuctionListingStatus[]'
 */
export type ListEnumAuctionListingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuctionListingStatus[]'>
    


/**
 * Reference to a field of type 'AuctionListingType'
 */
export type EnumAuctionListingTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuctionListingType'>
    


/**
 * Reference to a field of type 'AuctionListingType[]'
 */
export type ListEnumAuctionListingTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuctionListingType[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


/**
 * Reference to a field of type 'EntityLedgerType'
 */
export type EnumEntityLedgerTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EntityLedgerType'>
    


/**
 * Reference to a field of type 'EntityLedgerType[]'
 */
export type ListEnumEntityLedgerTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EntityLedgerType[]'>
    


/**
 * Reference to a field of type 'OrganizationRole'
 */
export type EnumOrganizationRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrganizationRole'>
    


/**
 * Reference to a field of type 'OrganizationRole[]'
 */
export type ListEnumOrganizationRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrganizationRole[]'>
    


/**
 * Reference to a field of type 'Role'
 */
export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


/**
 * Reference to a field of type 'Role[]'
 */
export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *   { emit: 'stdout', level: 'query' },
   *   { emit: 'stdout', level: 'info' },
   *   { emit: 'stdout', level: 'warn' }
   *   { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  auctionLive?: Prisma.AuctionLiveOmit
  auctionListing?: Prisma.AuctionListingOmit
  auctionListingItem?: Prisma.AuctionListingItemOmit
  auctionBid?: Prisma.AuctionBidOmit
  auctionReview?: Prisma.AuctionReviewOmit
  liveAuctionSetting?: Prisma.LiveAuctionSettingOmit
  betaAccess?: Prisma.BetaAccessOmit
  entity?: Prisma.EntityOmit
  entityLedger?: Prisma.EntityLedgerOmit
  organization?: Prisma.OrganizationOmit
  organizationMember?: Prisma.OrganizationMemberOmit
  user?: Prisma.UserOmit
  profile?: Prisma.ProfileOmit
  profileReputationLedger?: Prisma.ProfileReputationLedgerOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw' 
  | 'groupBy'

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

