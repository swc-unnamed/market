
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Entity` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Entity
 * 
 */
export type EntityModel = runtime.Types.Result.DefaultSelection<Prisma.$EntityPayload>

export type AggregateEntity = {
  _count: EntityCountAggregateOutputType | null
  _min: EntityMinAggregateOutputType | null
  _max: EntityMaxAggregateOutputType | null
}

export type EntityMinAggregateOutputType = {
  id: string | null
  name: string | null
  type: string | null
  combineUid: string | null
  combineHref: string | null
  imageSmall: string | null
  imageLarge: string | null
}

export type EntityMaxAggregateOutputType = {
  id: string | null
  name: string | null
  type: string | null
  combineUid: string | null
  combineHref: string | null
  imageSmall: string | null
  imageLarge: string | null
}

export type EntityCountAggregateOutputType = {
  id: number
  name: number
  type: number
  combineUid: number
  combineHref: number
  combineData: number
  imageSmall: number
  imageLarge: number
  _all: number
}


export type EntityMinAggregateInputType = {
  id?: true
  name?: true
  type?: true
  combineUid?: true
  combineHref?: true
  imageSmall?: true
  imageLarge?: true
}

export type EntityMaxAggregateInputType = {
  id?: true
  name?: true
  type?: true
  combineUid?: true
  combineHref?: true
  imageSmall?: true
  imageLarge?: true
}

export type EntityCountAggregateInputType = {
  id?: true
  name?: true
  type?: true
  combineUid?: true
  combineHref?: true
  combineData?: true
  imageSmall?: true
  imageLarge?: true
  _all?: true
}

export type EntityAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Entity to aggregate.
   */
  where?: Prisma.EntityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Entities to fetch.
   */
  orderBy?: Prisma.EntityOrderByWithRelationInput | Prisma.EntityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EntityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Entities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Entities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Entities
  **/
  _count?: true | EntityCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EntityMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EntityMaxAggregateInputType
}

export type GetEntityAggregateType<T extends EntityAggregateArgs> = {
      [P in keyof T & keyof AggregateEntity]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEntity[P]>
    : Prisma.GetScalarType<T[P], AggregateEntity[P]>
}




export type EntityGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EntityWhereInput
  orderBy?: Prisma.EntityOrderByWithAggregationInput | Prisma.EntityOrderByWithAggregationInput[]
  by: Prisma.EntityScalarFieldEnum[] | Prisma.EntityScalarFieldEnum
  having?: Prisma.EntityScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EntityCountAggregateInputType | true
  _min?: EntityMinAggregateInputType
  _max?: EntityMaxAggregateInputType
}

export type EntityGroupByOutputType = {
  id: string
  name: string
  type: string
  combineUid: string
  combineHref: string
  combineData: runtime.JsonValue
  imageSmall: string
  imageLarge: string
  _count: EntityCountAggregateOutputType | null
  _min: EntityMinAggregateOutputType | null
  _max: EntityMaxAggregateOutputType | null
}

type GetEntityGroupByPayload<T extends EntityGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EntityGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EntityGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EntityGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EntityGroupByOutputType[P]>
      }
    >
  > 



export type EntityWhereInput = {
  AND?: Prisma.EntityWhereInput | Prisma.EntityWhereInput[]
  OR?: Prisma.EntityWhereInput[]
  NOT?: Prisma.EntityWhereInput | Prisma.EntityWhereInput[]
  id?: Prisma.StringFilter<"Entity"> | string
  name?: Prisma.StringFilter<"Entity"> | string
  type?: Prisma.StringFilter<"Entity"> | string
  combineUid?: Prisma.StringFilter<"Entity"> | string
  combineHref?: Prisma.StringFilter<"Entity"> | string
  combineData?: Prisma.JsonFilter<"Entity">
  imageSmall?: Prisma.StringFilter<"Entity"> | string
  imageLarge?: Prisma.StringFilter<"Entity"> | string
  ledgers?: Prisma.EntityLedgerListRelationFilter
  auctionItems?: Prisma.AuctionListingItemListRelationFilter
}

export type EntityOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  combineUid?: Prisma.SortOrder
  combineHref?: Prisma.SortOrder
  combineData?: Prisma.SortOrder
  imageSmall?: Prisma.SortOrder
  imageLarge?: Prisma.SortOrder
  ledgers?: Prisma.EntityLedgerOrderByRelationAggregateInput
  auctionItems?: Prisma.AuctionListingItemOrderByRelationAggregateInput
}

export type EntityWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  combineUid?: string
  AND?: Prisma.EntityWhereInput | Prisma.EntityWhereInput[]
  OR?: Prisma.EntityWhereInput[]
  NOT?: Prisma.EntityWhereInput | Prisma.EntityWhereInput[]
  name?: Prisma.StringFilter<"Entity"> | string
  type?: Prisma.StringFilter<"Entity"> | string
  combineHref?: Prisma.StringFilter<"Entity"> | string
  combineData?: Prisma.JsonFilter<"Entity">
  imageSmall?: Prisma.StringFilter<"Entity"> | string
  imageLarge?: Prisma.StringFilter<"Entity"> | string
  ledgers?: Prisma.EntityLedgerListRelationFilter
  auctionItems?: Prisma.AuctionListingItemListRelationFilter
}, "id" | "combineUid">

export type EntityOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  combineUid?: Prisma.SortOrder
  combineHref?: Prisma.SortOrder
  combineData?: Prisma.SortOrder
  imageSmall?: Prisma.SortOrder
  imageLarge?: Prisma.SortOrder
  _count?: Prisma.EntityCountOrderByAggregateInput
  _max?: Prisma.EntityMaxOrderByAggregateInput
  _min?: Prisma.EntityMinOrderByAggregateInput
}

export type EntityScalarWhereWithAggregatesInput = {
  AND?: Prisma.EntityScalarWhereWithAggregatesInput | Prisma.EntityScalarWhereWithAggregatesInput[]
  OR?: Prisma.EntityScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EntityScalarWhereWithAggregatesInput | Prisma.EntityScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Entity"> | string
  name?: Prisma.StringWithAggregatesFilter<"Entity"> | string
  type?: Prisma.StringWithAggregatesFilter<"Entity"> | string
  combineUid?: Prisma.StringWithAggregatesFilter<"Entity"> | string
  combineHref?: Prisma.StringWithAggregatesFilter<"Entity"> | string
  combineData?: Prisma.JsonWithAggregatesFilter<"Entity">
  imageSmall?: Prisma.StringWithAggregatesFilter<"Entity"> | string
  imageLarge?: Prisma.StringWithAggregatesFilter<"Entity"> | string
}

export type EntityCreateInput = {
  id?: string
  name: string
  type: string
  combineUid: string
  combineHref: string
  combineData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSmall: string
  imageLarge: string
  ledgers?: Prisma.EntityLedgerCreateNestedManyWithoutEntityInput
  auctionItems?: Prisma.AuctionListingItemCreateNestedManyWithoutEntityInput
}

export type EntityUncheckedCreateInput = {
  id?: string
  name: string
  type: string
  combineUid: string
  combineHref: string
  combineData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSmall: string
  imageLarge: string
  ledgers?: Prisma.EntityLedgerUncheckedCreateNestedManyWithoutEntityInput
  auctionItems?: Prisma.AuctionListingItemUncheckedCreateNestedManyWithoutEntityInput
}

export type EntityUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  combineUid?: Prisma.StringFieldUpdateOperationsInput | string
  combineHref?: Prisma.StringFieldUpdateOperationsInput | string
  combineData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSmall?: Prisma.StringFieldUpdateOperationsInput | string
  imageLarge?: Prisma.StringFieldUpdateOperationsInput | string
  ledgers?: Prisma.EntityLedgerUpdateManyWithoutEntityNestedInput
  auctionItems?: Prisma.AuctionListingItemUpdateManyWithoutEntityNestedInput
}

export type EntityUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  combineUid?: Prisma.StringFieldUpdateOperationsInput | string
  combineHref?: Prisma.StringFieldUpdateOperationsInput | string
  combineData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSmall?: Prisma.StringFieldUpdateOperationsInput | string
  imageLarge?: Prisma.StringFieldUpdateOperationsInput | string
  ledgers?: Prisma.EntityLedgerUncheckedUpdateManyWithoutEntityNestedInput
  auctionItems?: Prisma.AuctionListingItemUncheckedUpdateManyWithoutEntityNestedInput
}

export type EntityCreateManyInput = {
  id?: string
  name: string
  type: string
  combineUid: string
  combineHref: string
  combineData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSmall: string
  imageLarge: string
}

export type EntityUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  combineUid?: Prisma.StringFieldUpdateOperationsInput | string
  combineHref?: Prisma.StringFieldUpdateOperationsInput | string
  combineData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSmall?: Prisma.StringFieldUpdateOperationsInput | string
  imageLarge?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EntityUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  combineUid?: Prisma.StringFieldUpdateOperationsInput | string
  combineHref?: Prisma.StringFieldUpdateOperationsInput | string
  combineData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSmall?: Prisma.StringFieldUpdateOperationsInput | string
  imageLarge?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EntityScalarRelationFilter = {
  is?: Prisma.EntityWhereInput
  isNot?: Prisma.EntityWhereInput
}

export type EntityCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  combineUid?: Prisma.SortOrder
  combineHref?: Prisma.SortOrder
  combineData?: Prisma.SortOrder
  imageSmall?: Prisma.SortOrder
  imageLarge?: Prisma.SortOrder
}

export type EntityMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  combineUid?: Prisma.SortOrder
  combineHref?: Prisma.SortOrder
  imageSmall?: Prisma.SortOrder
  imageLarge?: Prisma.SortOrder
}

export type EntityMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  combineUid?: Prisma.SortOrder
  combineHref?: Prisma.SortOrder
  imageSmall?: Prisma.SortOrder
  imageLarge?: Prisma.SortOrder
}

export type EntityCreateNestedOneWithoutAuctionItemsInput = {
  create?: Prisma.XOR<Prisma.EntityCreateWithoutAuctionItemsInput, Prisma.EntityUncheckedCreateWithoutAuctionItemsInput>
  connectOrCreate?: Prisma.EntityCreateOrConnectWithoutAuctionItemsInput
  connect?: Prisma.EntityWhereUniqueInput
}

export type EntityUpdateOneRequiredWithoutAuctionItemsNestedInput = {
  create?: Prisma.XOR<Prisma.EntityCreateWithoutAuctionItemsInput, Prisma.EntityUncheckedCreateWithoutAuctionItemsInput>
  connectOrCreate?: Prisma.EntityCreateOrConnectWithoutAuctionItemsInput
  upsert?: Prisma.EntityUpsertWithoutAuctionItemsInput
  connect?: Prisma.EntityWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EntityUpdateToOneWithWhereWithoutAuctionItemsInput, Prisma.EntityUpdateWithoutAuctionItemsInput>, Prisma.EntityUncheckedUpdateWithoutAuctionItemsInput>
}

export type EntityCreateNestedOneWithoutLedgersInput = {
  create?: Prisma.XOR<Prisma.EntityCreateWithoutLedgersInput, Prisma.EntityUncheckedCreateWithoutLedgersInput>
  connectOrCreate?: Prisma.EntityCreateOrConnectWithoutLedgersInput
  connect?: Prisma.EntityWhereUniqueInput
}

export type EntityUpdateOneRequiredWithoutLedgersNestedInput = {
  create?: Prisma.XOR<Prisma.EntityCreateWithoutLedgersInput, Prisma.EntityUncheckedCreateWithoutLedgersInput>
  connectOrCreate?: Prisma.EntityCreateOrConnectWithoutLedgersInput
  upsert?: Prisma.EntityUpsertWithoutLedgersInput
  connect?: Prisma.EntityWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EntityUpdateToOneWithWhereWithoutLedgersInput, Prisma.EntityUpdateWithoutLedgersInput>, Prisma.EntityUncheckedUpdateWithoutLedgersInput>
}

export type EntityCreateWithoutAuctionItemsInput = {
  id?: string
  name: string
  type: string
  combineUid: string
  combineHref: string
  combineData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSmall: string
  imageLarge: string
  ledgers?: Prisma.EntityLedgerCreateNestedManyWithoutEntityInput
}

export type EntityUncheckedCreateWithoutAuctionItemsInput = {
  id?: string
  name: string
  type: string
  combineUid: string
  combineHref: string
  combineData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSmall: string
  imageLarge: string
  ledgers?: Prisma.EntityLedgerUncheckedCreateNestedManyWithoutEntityInput
}

export type EntityCreateOrConnectWithoutAuctionItemsInput = {
  where: Prisma.EntityWhereUniqueInput
  create: Prisma.XOR<Prisma.EntityCreateWithoutAuctionItemsInput, Prisma.EntityUncheckedCreateWithoutAuctionItemsInput>
}

export type EntityUpsertWithoutAuctionItemsInput = {
  update: Prisma.XOR<Prisma.EntityUpdateWithoutAuctionItemsInput, Prisma.EntityUncheckedUpdateWithoutAuctionItemsInput>
  create: Prisma.XOR<Prisma.EntityCreateWithoutAuctionItemsInput, Prisma.EntityUncheckedCreateWithoutAuctionItemsInput>
  where?: Prisma.EntityWhereInput
}

export type EntityUpdateToOneWithWhereWithoutAuctionItemsInput = {
  where?: Prisma.EntityWhereInput
  data: Prisma.XOR<Prisma.EntityUpdateWithoutAuctionItemsInput, Prisma.EntityUncheckedUpdateWithoutAuctionItemsInput>
}

export type EntityUpdateWithoutAuctionItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  combineUid?: Prisma.StringFieldUpdateOperationsInput | string
  combineHref?: Prisma.StringFieldUpdateOperationsInput | string
  combineData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSmall?: Prisma.StringFieldUpdateOperationsInput | string
  imageLarge?: Prisma.StringFieldUpdateOperationsInput | string
  ledgers?: Prisma.EntityLedgerUpdateManyWithoutEntityNestedInput
}

export type EntityUncheckedUpdateWithoutAuctionItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  combineUid?: Prisma.StringFieldUpdateOperationsInput | string
  combineHref?: Prisma.StringFieldUpdateOperationsInput | string
  combineData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSmall?: Prisma.StringFieldUpdateOperationsInput | string
  imageLarge?: Prisma.StringFieldUpdateOperationsInput | string
  ledgers?: Prisma.EntityLedgerUncheckedUpdateManyWithoutEntityNestedInput
}

export type EntityCreateWithoutLedgersInput = {
  id?: string
  name: string
  type: string
  combineUid: string
  combineHref: string
  combineData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSmall: string
  imageLarge: string
  auctionItems?: Prisma.AuctionListingItemCreateNestedManyWithoutEntityInput
}

export type EntityUncheckedCreateWithoutLedgersInput = {
  id?: string
  name: string
  type: string
  combineUid: string
  combineHref: string
  combineData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSmall: string
  imageLarge: string
  auctionItems?: Prisma.AuctionListingItemUncheckedCreateNestedManyWithoutEntityInput
}

export type EntityCreateOrConnectWithoutLedgersInput = {
  where: Prisma.EntityWhereUniqueInput
  create: Prisma.XOR<Prisma.EntityCreateWithoutLedgersInput, Prisma.EntityUncheckedCreateWithoutLedgersInput>
}

export type EntityUpsertWithoutLedgersInput = {
  update: Prisma.XOR<Prisma.EntityUpdateWithoutLedgersInput, Prisma.EntityUncheckedUpdateWithoutLedgersInput>
  create: Prisma.XOR<Prisma.EntityCreateWithoutLedgersInput, Prisma.EntityUncheckedCreateWithoutLedgersInput>
  where?: Prisma.EntityWhereInput
}

export type EntityUpdateToOneWithWhereWithoutLedgersInput = {
  where?: Prisma.EntityWhereInput
  data: Prisma.XOR<Prisma.EntityUpdateWithoutLedgersInput, Prisma.EntityUncheckedUpdateWithoutLedgersInput>
}

export type EntityUpdateWithoutLedgersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  combineUid?: Prisma.StringFieldUpdateOperationsInput | string
  combineHref?: Prisma.StringFieldUpdateOperationsInput | string
  combineData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSmall?: Prisma.StringFieldUpdateOperationsInput | string
  imageLarge?: Prisma.StringFieldUpdateOperationsInput | string
  auctionItems?: Prisma.AuctionListingItemUpdateManyWithoutEntityNestedInput
}

export type EntityUncheckedUpdateWithoutLedgersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  combineUid?: Prisma.StringFieldUpdateOperationsInput | string
  combineHref?: Prisma.StringFieldUpdateOperationsInput | string
  combineData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSmall?: Prisma.StringFieldUpdateOperationsInput | string
  imageLarge?: Prisma.StringFieldUpdateOperationsInput | string
  auctionItems?: Prisma.AuctionListingItemUncheckedUpdateManyWithoutEntityNestedInput
}


/**
 * Count Type EntityCountOutputType
 */

export type EntityCountOutputType = {
  ledgers: number
  auctionItems: number
}

export type EntityCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ledgers?: boolean | EntityCountOutputTypeCountLedgersArgs
  auctionItems?: boolean | EntityCountOutputTypeCountAuctionItemsArgs
}

/**
 * EntityCountOutputType without action
 */
export type EntityCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntityCountOutputType
   */
  select?: Prisma.EntityCountOutputTypeSelect<ExtArgs> | null
}

/**
 * EntityCountOutputType without action
 */
export type EntityCountOutputTypeCountLedgersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EntityLedgerWhereInput
}

/**
 * EntityCountOutputType without action
 */
export type EntityCountOutputTypeCountAuctionItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AuctionListingItemWhereInput
}


export type EntitySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  type?: boolean
  combineUid?: boolean
  combineHref?: boolean
  combineData?: boolean
  imageSmall?: boolean
  imageLarge?: boolean
  ledgers?: boolean | Prisma.Entity$ledgersArgs<ExtArgs>
  auctionItems?: boolean | Prisma.Entity$auctionItemsArgs<ExtArgs>
  _count?: boolean | Prisma.EntityCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["entity"]>

export type EntitySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  type?: boolean
  combineUid?: boolean
  combineHref?: boolean
  combineData?: boolean
  imageSmall?: boolean
  imageLarge?: boolean
}, ExtArgs["result"]["entity"]>

export type EntitySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  type?: boolean
  combineUid?: boolean
  combineHref?: boolean
  combineData?: boolean
  imageSmall?: boolean
  imageLarge?: boolean
}, ExtArgs["result"]["entity"]>

export type EntitySelectScalar = {
  id?: boolean
  name?: boolean
  type?: boolean
  combineUid?: boolean
  combineHref?: boolean
  combineData?: boolean
  imageSmall?: boolean
  imageLarge?: boolean
}

export type EntityOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "type" | "combineUid" | "combineHref" | "combineData" | "imageSmall" | "imageLarge", ExtArgs["result"]["entity"]>
export type EntityInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ledgers?: boolean | Prisma.Entity$ledgersArgs<ExtArgs>
  auctionItems?: boolean | Prisma.Entity$auctionItemsArgs<ExtArgs>
  _count?: boolean | Prisma.EntityCountOutputTypeDefaultArgs<ExtArgs>
}
export type EntityIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type EntityIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $EntityPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Entity"
  objects: {
    ledgers: Prisma.$EntityLedgerPayload<ExtArgs>[]
    auctionItems: Prisma.$AuctionListingItemPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    type: string
    combineUid: string
    combineHref: string
    combineData: runtime.JsonValue
    imageSmall: string
    imageLarge: string
  }, ExtArgs["result"]["entity"]>
  composites: {}
}

export type EntityGetPayload<S extends boolean | null | undefined | EntityDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EntityPayload, S>

export type EntityCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EntityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: EntityCountAggregateInputType | true
  }

export interface EntityDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Entity'], meta: { name: 'Entity' } }
  /**
   * Find zero or one Entity that matches the filter.
   * @param {EntityFindUniqueArgs} args - Arguments to find a Entity
   * @example
   * // Get one Entity
   * const entity = await prisma.entity.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EntityFindUniqueArgs>(args: Prisma.SelectSubset<T, EntityFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EntityClient<runtime.Types.Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Entity that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EntityFindUniqueOrThrowArgs} args - Arguments to find a Entity
   * @example
   * // Get one Entity
   * const entity = await prisma.entity.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EntityFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EntityFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EntityClient<runtime.Types.Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Entity that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntityFindFirstArgs} args - Arguments to find a Entity
   * @example
   * // Get one Entity
   * const entity = await prisma.entity.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EntityFindFirstArgs>(args?: Prisma.SelectSubset<T, EntityFindFirstArgs<ExtArgs>>): Prisma.Prisma__EntityClient<runtime.Types.Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Entity that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntityFindFirstOrThrowArgs} args - Arguments to find a Entity
   * @example
   * // Get one Entity
   * const entity = await prisma.entity.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EntityFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EntityFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EntityClient<runtime.Types.Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Entities that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntityFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Entities
   * const entities = await prisma.entity.findMany()
   * 
   * // Get first 10 Entities
   * const entities = await prisma.entity.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const entityWithIdOnly = await prisma.entity.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EntityFindManyArgs>(args?: Prisma.SelectSubset<T, EntityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Entity.
   * @param {EntityCreateArgs} args - Arguments to create a Entity.
   * @example
   * // Create one Entity
   * const Entity = await prisma.entity.create({
   *   data: {
   *     // ... data to create a Entity
   *   }
   * })
   * 
   */
  create<T extends EntityCreateArgs>(args: Prisma.SelectSubset<T, EntityCreateArgs<ExtArgs>>): Prisma.Prisma__EntityClient<runtime.Types.Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Entities.
   * @param {EntityCreateManyArgs} args - Arguments to create many Entities.
   * @example
   * // Create many Entities
   * const entity = await prisma.entity.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EntityCreateManyArgs>(args?: Prisma.SelectSubset<T, EntityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Entities and returns the data saved in the database.
   * @param {EntityCreateManyAndReturnArgs} args - Arguments to create many Entities.
   * @example
   * // Create many Entities
   * const entity = await prisma.entity.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Entities and only return the `id`
   * const entityWithIdOnly = await prisma.entity.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EntityCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EntityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Entity.
   * @param {EntityDeleteArgs} args - Arguments to delete one Entity.
   * @example
   * // Delete one Entity
   * const Entity = await prisma.entity.delete({
   *   where: {
   *     // ... filter to delete one Entity
   *   }
   * })
   * 
   */
  delete<T extends EntityDeleteArgs>(args: Prisma.SelectSubset<T, EntityDeleteArgs<ExtArgs>>): Prisma.Prisma__EntityClient<runtime.Types.Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Entity.
   * @param {EntityUpdateArgs} args - Arguments to update one Entity.
   * @example
   * // Update one Entity
   * const entity = await prisma.entity.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EntityUpdateArgs>(args: Prisma.SelectSubset<T, EntityUpdateArgs<ExtArgs>>): Prisma.Prisma__EntityClient<runtime.Types.Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Entities.
   * @param {EntityDeleteManyArgs} args - Arguments to filter Entities to delete.
   * @example
   * // Delete a few Entities
   * const { count } = await prisma.entity.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EntityDeleteManyArgs>(args?: Prisma.SelectSubset<T, EntityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Entities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntityUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Entities
   * const entity = await prisma.entity.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EntityUpdateManyArgs>(args: Prisma.SelectSubset<T, EntityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Entities and returns the data updated in the database.
   * @param {EntityUpdateManyAndReturnArgs} args - Arguments to update many Entities.
   * @example
   * // Update many Entities
   * const entity = await prisma.entity.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Entities and only return the `id`
   * const entityWithIdOnly = await prisma.entity.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EntityUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EntityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Entity.
   * @param {EntityUpsertArgs} args - Arguments to update or create a Entity.
   * @example
   * // Update or create a Entity
   * const entity = await prisma.entity.upsert({
   *   create: {
   *     // ... data to create a Entity
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Entity we want to update
   *   }
   * })
   */
  upsert<T extends EntityUpsertArgs>(args: Prisma.SelectSubset<T, EntityUpsertArgs<ExtArgs>>): Prisma.Prisma__EntityClient<runtime.Types.Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Entities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntityCountArgs} args - Arguments to filter Entities to count.
   * @example
   * // Count the number of Entities
   * const count = await prisma.entity.count({
   *   where: {
   *     // ... the filter for the Entities we want to count
   *   }
   * })
  **/
  count<T extends EntityCountArgs>(
    args?: Prisma.Subset<T, EntityCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EntityCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Entity.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EntityAggregateArgs>(args: Prisma.Subset<T, EntityAggregateArgs>): Prisma.PrismaPromise<GetEntityAggregateType<T>>

  /**
   * Group by Entity.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EntityGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EntityGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EntityGroupByArgs['orderBy'] }
      : { orderBy?: EntityGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EntityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEntityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Entity model
 */
readonly fields: EntityFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Entity.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EntityClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  ledgers<T extends Prisma.Entity$ledgersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Entity$ledgersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EntityLedgerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  auctionItems<T extends Prisma.Entity$auctionItemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Entity$auctionItemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AuctionListingItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Entity model
 */
export interface EntityFieldRefs {
  readonly id: Prisma.FieldRef<"Entity", 'String'>
  readonly name: Prisma.FieldRef<"Entity", 'String'>
  readonly type: Prisma.FieldRef<"Entity", 'String'>
  readonly combineUid: Prisma.FieldRef<"Entity", 'String'>
  readonly combineHref: Prisma.FieldRef<"Entity", 'String'>
  readonly combineData: Prisma.FieldRef<"Entity", 'Json'>
  readonly imageSmall: Prisma.FieldRef<"Entity", 'String'>
  readonly imageLarge: Prisma.FieldRef<"Entity", 'String'>
}
    

// Custom InputTypes
/**
 * Entity findUnique
 */
export type EntityFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Entity
   */
  select?: Prisma.EntitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Entity
   */
  omit?: Prisma.EntityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityInclude<ExtArgs> | null
  /**
   * Filter, which Entity to fetch.
   */
  where: Prisma.EntityWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Entity findUniqueOrThrow
 */
export type EntityFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Entity
   */
  select?: Prisma.EntitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Entity
   */
  omit?: Prisma.EntityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityInclude<ExtArgs> | null
  /**
   * Filter, which Entity to fetch.
   */
  where: Prisma.EntityWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Entity findFirst
 */
export type EntityFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Entity
   */
  select?: Prisma.EntitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Entity
   */
  omit?: Prisma.EntityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityInclude<ExtArgs> | null
  /**
   * Filter, which Entity to fetch.
   */
  where?: Prisma.EntityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Entities to fetch.
   */
  orderBy?: Prisma.EntityOrderByWithRelationInput | Prisma.EntityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Entities.
   */
  cursor?: Prisma.EntityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Entities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Entities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Entities.
   */
  distinct?: Prisma.EntityScalarFieldEnum | Prisma.EntityScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Entity findFirstOrThrow
 */
export type EntityFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Entity
   */
  select?: Prisma.EntitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Entity
   */
  omit?: Prisma.EntityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityInclude<ExtArgs> | null
  /**
   * Filter, which Entity to fetch.
   */
  where?: Prisma.EntityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Entities to fetch.
   */
  orderBy?: Prisma.EntityOrderByWithRelationInput | Prisma.EntityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Entities.
   */
  cursor?: Prisma.EntityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Entities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Entities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Entities.
   */
  distinct?: Prisma.EntityScalarFieldEnum | Prisma.EntityScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Entity findMany
 */
export type EntityFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Entity
   */
  select?: Prisma.EntitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Entity
   */
  omit?: Prisma.EntityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityInclude<ExtArgs> | null
  /**
   * Filter, which Entities to fetch.
   */
  where?: Prisma.EntityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Entities to fetch.
   */
  orderBy?: Prisma.EntityOrderByWithRelationInput | Prisma.EntityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Entities.
   */
  cursor?: Prisma.EntityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Entities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Entities.
   */
  skip?: number
  distinct?: Prisma.EntityScalarFieldEnum | Prisma.EntityScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Entity create
 */
export type EntityCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Entity
   */
  select?: Prisma.EntitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Entity
   */
  omit?: Prisma.EntityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityInclude<ExtArgs> | null
  /**
   * The data needed to create a Entity.
   */
  data: Prisma.XOR<Prisma.EntityCreateInput, Prisma.EntityUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Entity createMany
 */
export type EntityCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Entities.
   */
  data: Prisma.EntityCreateManyInput | Prisma.EntityCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Entity createManyAndReturn
 */
export type EntityCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Entity
   */
  select?: Prisma.EntitySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Entity
   */
  omit?: Prisma.EntityOmit<ExtArgs> | null
  /**
   * The data used to create many Entities.
   */
  data: Prisma.EntityCreateManyInput | Prisma.EntityCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Entity update
 */
export type EntityUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Entity
   */
  select?: Prisma.EntitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Entity
   */
  omit?: Prisma.EntityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityInclude<ExtArgs> | null
  /**
   * The data needed to update a Entity.
   */
  data: Prisma.XOR<Prisma.EntityUpdateInput, Prisma.EntityUncheckedUpdateInput>
  /**
   * Choose, which Entity to update.
   */
  where: Prisma.EntityWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Entity updateMany
 */
export type EntityUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Entities.
   */
  data: Prisma.XOR<Prisma.EntityUpdateManyMutationInput, Prisma.EntityUncheckedUpdateManyInput>
  /**
   * Filter which Entities to update
   */
  where?: Prisma.EntityWhereInput
  /**
   * Limit how many Entities to update.
   */
  limit?: number
}

/**
 * Entity updateManyAndReturn
 */
export type EntityUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Entity
   */
  select?: Prisma.EntitySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Entity
   */
  omit?: Prisma.EntityOmit<ExtArgs> | null
  /**
   * The data used to update Entities.
   */
  data: Prisma.XOR<Prisma.EntityUpdateManyMutationInput, Prisma.EntityUncheckedUpdateManyInput>
  /**
   * Filter which Entities to update
   */
  where?: Prisma.EntityWhereInput
  /**
   * Limit how many Entities to update.
   */
  limit?: number
}

/**
 * Entity upsert
 */
export type EntityUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Entity
   */
  select?: Prisma.EntitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Entity
   */
  omit?: Prisma.EntityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityInclude<ExtArgs> | null
  /**
   * The filter to search for the Entity to update in case it exists.
   */
  where: Prisma.EntityWhereUniqueInput
  /**
   * In case the Entity found by the `where` argument doesn't exist, create a new Entity with this data.
   */
  create: Prisma.XOR<Prisma.EntityCreateInput, Prisma.EntityUncheckedCreateInput>
  /**
   * In case the Entity was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EntityUpdateInput, Prisma.EntityUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Entity delete
 */
export type EntityDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Entity
   */
  select?: Prisma.EntitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Entity
   */
  omit?: Prisma.EntityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityInclude<ExtArgs> | null
  /**
   * Filter which Entity to delete.
   */
  where: Prisma.EntityWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Entity deleteMany
 */
export type EntityDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Entities to delete
   */
  where?: Prisma.EntityWhereInput
  /**
   * Limit how many Entities to delete.
   */
  limit?: number
}

/**
 * Entity.ledgers
 */
export type Entity$ledgersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EntityLedger
   */
  select?: Prisma.EntityLedgerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EntityLedger
   */
  omit?: Prisma.EntityLedgerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityLedgerInclude<ExtArgs> | null
  where?: Prisma.EntityLedgerWhereInput
  orderBy?: Prisma.EntityLedgerOrderByWithRelationInput | Prisma.EntityLedgerOrderByWithRelationInput[]
  cursor?: Prisma.EntityLedgerWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EntityLedgerScalarFieldEnum | Prisma.EntityLedgerScalarFieldEnum[]
}

/**
 * Entity.auctionItems
 */
export type Entity$auctionItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionListingItem
   */
  select?: Prisma.AuctionListingItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionListingItem
   */
  omit?: Prisma.AuctionListingItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionListingItemInclude<ExtArgs> | null
  where?: Prisma.AuctionListingItemWhereInput
  orderBy?: Prisma.AuctionListingItemOrderByWithRelationInput | Prisma.AuctionListingItemOrderByWithRelationInput[]
  cursor?: Prisma.AuctionListingItemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AuctionListingItemScalarFieldEnum | Prisma.AuctionListingItemScalarFieldEnum[]
}

/**
 * Entity without action
 */
export type EntityDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Entity
   */
  select?: Prisma.EntitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Entity
   */
  omit?: Prisma.EntityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EntityInclude<ExtArgs> | null
}
