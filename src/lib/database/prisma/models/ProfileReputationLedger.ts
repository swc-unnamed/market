
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ProfileReputationLedger` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ProfileReputationLedger
 * 
 */
export type ProfileReputationLedgerModel = runtime.Types.Result.DefaultSelection<Prisma.$ProfileReputationLedgerPayload>

export type AggregateProfileReputationLedger = {
  _count: ProfileReputationLedgerCountAggregateOutputType | null
  _avg: ProfileReputationLedgerAvgAggregateOutputType | null
  _sum: ProfileReputationLedgerSumAggregateOutputType | null
  _min: ProfileReputationLedgerMinAggregateOutputType | null
  _max: ProfileReputationLedgerMaxAggregateOutputType | null
}

export type ProfileReputationLedgerAvgAggregateOutputType = {
  value: number | null
}

export type ProfileReputationLedgerSumAggregateOutputType = {
  value: number | null
}

export type ProfileReputationLedgerMinAggregateOutputType = {
  id: string | null
  profileId: string | null
  value: number | null
  reason: string | null
  timestamp: Date | null
}

export type ProfileReputationLedgerMaxAggregateOutputType = {
  id: string | null
  profileId: string | null
  value: number | null
  reason: string | null
  timestamp: Date | null
}

export type ProfileReputationLedgerCountAggregateOutputType = {
  id: number
  profileId: number
  value: number
  reason: number
  timestamp: number
  _all: number
}


export type ProfileReputationLedgerAvgAggregateInputType = {
  value?: true
}

export type ProfileReputationLedgerSumAggregateInputType = {
  value?: true
}

export type ProfileReputationLedgerMinAggregateInputType = {
  id?: true
  profileId?: true
  value?: true
  reason?: true
  timestamp?: true
}

export type ProfileReputationLedgerMaxAggregateInputType = {
  id?: true
  profileId?: true
  value?: true
  reason?: true
  timestamp?: true
}

export type ProfileReputationLedgerCountAggregateInputType = {
  id?: true
  profileId?: true
  value?: true
  reason?: true
  timestamp?: true
  _all?: true
}

export type ProfileReputationLedgerAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProfileReputationLedger to aggregate.
   */
  where?: Prisma.ProfileReputationLedgerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProfileReputationLedgers to fetch.
   */
  orderBy?: Prisma.ProfileReputationLedgerOrderByWithRelationInput | Prisma.ProfileReputationLedgerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProfileReputationLedgerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProfileReputationLedgers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProfileReputationLedgers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProfileReputationLedgers
  **/
  _count?: true | ProfileReputationLedgerCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProfileReputationLedgerAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProfileReputationLedgerSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProfileReputationLedgerMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProfileReputationLedgerMaxAggregateInputType
}

export type GetProfileReputationLedgerAggregateType<T extends ProfileReputationLedgerAggregateArgs> = {
      [P in keyof T & keyof AggregateProfileReputationLedger]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProfileReputationLedger[P]>
    : Prisma.GetScalarType<T[P], AggregateProfileReputationLedger[P]>
}




export type ProfileReputationLedgerGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProfileReputationLedgerWhereInput
  orderBy?: Prisma.ProfileReputationLedgerOrderByWithAggregationInput | Prisma.ProfileReputationLedgerOrderByWithAggregationInput[]
  by: Prisma.ProfileReputationLedgerScalarFieldEnum[] | Prisma.ProfileReputationLedgerScalarFieldEnum
  having?: Prisma.ProfileReputationLedgerScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProfileReputationLedgerCountAggregateInputType | true
  _avg?: ProfileReputationLedgerAvgAggregateInputType
  _sum?: ProfileReputationLedgerSumAggregateInputType
  _min?: ProfileReputationLedgerMinAggregateInputType
  _max?: ProfileReputationLedgerMaxAggregateInputType
}

export type ProfileReputationLedgerGroupByOutputType = {
  id: string
  profileId: string
  value: number
  reason: string
  timestamp: Date
  _count: ProfileReputationLedgerCountAggregateOutputType | null
  _avg: ProfileReputationLedgerAvgAggregateOutputType | null
  _sum: ProfileReputationLedgerSumAggregateOutputType | null
  _min: ProfileReputationLedgerMinAggregateOutputType | null
  _max: ProfileReputationLedgerMaxAggregateOutputType | null
}

type GetProfileReputationLedgerGroupByPayload<T extends ProfileReputationLedgerGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProfileReputationLedgerGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProfileReputationLedgerGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProfileReputationLedgerGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProfileReputationLedgerGroupByOutputType[P]>
      }
    >
  > 



export type ProfileReputationLedgerWhereInput = {
  AND?: Prisma.ProfileReputationLedgerWhereInput | Prisma.ProfileReputationLedgerWhereInput[]
  OR?: Prisma.ProfileReputationLedgerWhereInput[]
  NOT?: Prisma.ProfileReputationLedgerWhereInput | Prisma.ProfileReputationLedgerWhereInput[]
  id?: Prisma.StringFilter<"ProfileReputationLedger"> | string
  profileId?: Prisma.StringFilter<"ProfileReputationLedger"> | string
  value?: Prisma.IntFilter<"ProfileReputationLedger"> | number
  reason?: Prisma.StringFilter<"ProfileReputationLedger"> | string
  timestamp?: Prisma.DateTimeFilter<"ProfileReputationLedger"> | Date | string
  profile?: Prisma.XOR<Prisma.ProfileScalarRelationFilter, Prisma.ProfileWhereInput>
}

export type ProfileReputationLedgerOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  profileId?: Prisma.SortOrder
  value?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  profile?: Prisma.ProfileOrderByWithRelationInput
}

export type ProfileReputationLedgerWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProfileReputationLedgerWhereInput | Prisma.ProfileReputationLedgerWhereInput[]
  OR?: Prisma.ProfileReputationLedgerWhereInput[]
  NOT?: Prisma.ProfileReputationLedgerWhereInput | Prisma.ProfileReputationLedgerWhereInput[]
  profileId?: Prisma.StringFilter<"ProfileReputationLedger"> | string
  value?: Prisma.IntFilter<"ProfileReputationLedger"> | number
  reason?: Prisma.StringFilter<"ProfileReputationLedger"> | string
  timestamp?: Prisma.DateTimeFilter<"ProfileReputationLedger"> | Date | string
  profile?: Prisma.XOR<Prisma.ProfileScalarRelationFilter, Prisma.ProfileWhereInput>
}, "id">

export type ProfileReputationLedgerOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  profileId?: Prisma.SortOrder
  value?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  _count?: Prisma.ProfileReputationLedgerCountOrderByAggregateInput
  _avg?: Prisma.ProfileReputationLedgerAvgOrderByAggregateInput
  _max?: Prisma.ProfileReputationLedgerMaxOrderByAggregateInput
  _min?: Prisma.ProfileReputationLedgerMinOrderByAggregateInput
  _sum?: Prisma.ProfileReputationLedgerSumOrderByAggregateInput
}

export type ProfileReputationLedgerScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProfileReputationLedgerScalarWhereWithAggregatesInput | Prisma.ProfileReputationLedgerScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProfileReputationLedgerScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProfileReputationLedgerScalarWhereWithAggregatesInput | Prisma.ProfileReputationLedgerScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ProfileReputationLedger"> | string
  profileId?: Prisma.StringWithAggregatesFilter<"ProfileReputationLedger"> | string
  value?: Prisma.IntWithAggregatesFilter<"ProfileReputationLedger"> | number
  reason?: Prisma.StringWithAggregatesFilter<"ProfileReputationLedger"> | string
  timestamp?: Prisma.DateTimeWithAggregatesFilter<"ProfileReputationLedger"> | Date | string
}

export type ProfileReputationLedgerCreateInput = {
  id?: string
  value: number
  reason: string
  timestamp?: Date | string
  profile: Prisma.ProfileCreateNestedOneWithoutReputationLedgerInput
}

export type ProfileReputationLedgerUncheckedCreateInput = {
  id?: string
  profileId: string
  value: number
  reason: string
  timestamp?: Date | string
}

export type ProfileReputationLedgerUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  profile?: Prisma.ProfileUpdateOneRequiredWithoutReputationLedgerNestedInput
}

export type ProfileReputationLedgerUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  profileId?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProfileReputationLedgerCreateManyInput = {
  id?: string
  profileId: string
  value: number
  reason: string
  timestamp?: Date | string
}

export type ProfileReputationLedgerUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProfileReputationLedgerUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  profileId?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProfileReputationLedgerListRelationFilter = {
  every?: Prisma.ProfileReputationLedgerWhereInput
  some?: Prisma.ProfileReputationLedgerWhereInput
  none?: Prisma.ProfileReputationLedgerWhereInput
}

export type ProfileReputationLedgerOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProfileReputationLedgerCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  profileId?: Prisma.SortOrder
  value?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type ProfileReputationLedgerAvgOrderByAggregateInput = {
  value?: Prisma.SortOrder
}

export type ProfileReputationLedgerMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  profileId?: Prisma.SortOrder
  value?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type ProfileReputationLedgerMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  profileId?: Prisma.SortOrder
  value?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type ProfileReputationLedgerSumOrderByAggregateInput = {
  value?: Prisma.SortOrder
}

export type ProfileReputationLedgerCreateNestedManyWithoutProfileInput = {
  create?: Prisma.XOR<Prisma.ProfileReputationLedgerCreateWithoutProfileInput, Prisma.ProfileReputationLedgerUncheckedCreateWithoutProfileInput> | Prisma.ProfileReputationLedgerCreateWithoutProfileInput[] | Prisma.ProfileReputationLedgerUncheckedCreateWithoutProfileInput[]
  connectOrCreate?: Prisma.ProfileReputationLedgerCreateOrConnectWithoutProfileInput | Prisma.ProfileReputationLedgerCreateOrConnectWithoutProfileInput[]
  createMany?: Prisma.ProfileReputationLedgerCreateManyProfileInputEnvelope
  connect?: Prisma.ProfileReputationLedgerWhereUniqueInput | Prisma.ProfileReputationLedgerWhereUniqueInput[]
}

export type ProfileReputationLedgerUncheckedCreateNestedManyWithoutProfileInput = {
  create?: Prisma.XOR<Prisma.ProfileReputationLedgerCreateWithoutProfileInput, Prisma.ProfileReputationLedgerUncheckedCreateWithoutProfileInput> | Prisma.ProfileReputationLedgerCreateWithoutProfileInput[] | Prisma.ProfileReputationLedgerUncheckedCreateWithoutProfileInput[]
  connectOrCreate?: Prisma.ProfileReputationLedgerCreateOrConnectWithoutProfileInput | Prisma.ProfileReputationLedgerCreateOrConnectWithoutProfileInput[]
  createMany?: Prisma.ProfileReputationLedgerCreateManyProfileInputEnvelope
  connect?: Prisma.ProfileReputationLedgerWhereUniqueInput | Prisma.ProfileReputationLedgerWhereUniqueInput[]
}

export type ProfileReputationLedgerUpdateManyWithoutProfileNestedInput = {
  create?: Prisma.XOR<Prisma.ProfileReputationLedgerCreateWithoutProfileInput, Prisma.ProfileReputationLedgerUncheckedCreateWithoutProfileInput> | Prisma.ProfileReputationLedgerCreateWithoutProfileInput[] | Prisma.ProfileReputationLedgerUncheckedCreateWithoutProfileInput[]
  connectOrCreate?: Prisma.ProfileReputationLedgerCreateOrConnectWithoutProfileInput | Prisma.ProfileReputationLedgerCreateOrConnectWithoutProfileInput[]
  upsert?: Prisma.ProfileReputationLedgerUpsertWithWhereUniqueWithoutProfileInput | Prisma.ProfileReputationLedgerUpsertWithWhereUniqueWithoutProfileInput[]
  createMany?: Prisma.ProfileReputationLedgerCreateManyProfileInputEnvelope
  set?: Prisma.ProfileReputationLedgerWhereUniqueInput | Prisma.ProfileReputationLedgerWhereUniqueInput[]
  disconnect?: Prisma.ProfileReputationLedgerWhereUniqueInput | Prisma.ProfileReputationLedgerWhereUniqueInput[]
  delete?: Prisma.ProfileReputationLedgerWhereUniqueInput | Prisma.ProfileReputationLedgerWhereUniqueInput[]
  connect?: Prisma.ProfileReputationLedgerWhereUniqueInput | Prisma.ProfileReputationLedgerWhereUniqueInput[]
  update?: Prisma.ProfileReputationLedgerUpdateWithWhereUniqueWithoutProfileInput | Prisma.ProfileReputationLedgerUpdateWithWhereUniqueWithoutProfileInput[]
  updateMany?: Prisma.ProfileReputationLedgerUpdateManyWithWhereWithoutProfileInput | Prisma.ProfileReputationLedgerUpdateManyWithWhereWithoutProfileInput[]
  deleteMany?: Prisma.ProfileReputationLedgerScalarWhereInput | Prisma.ProfileReputationLedgerScalarWhereInput[]
}

export type ProfileReputationLedgerUncheckedUpdateManyWithoutProfileNestedInput = {
  create?: Prisma.XOR<Prisma.ProfileReputationLedgerCreateWithoutProfileInput, Prisma.ProfileReputationLedgerUncheckedCreateWithoutProfileInput> | Prisma.ProfileReputationLedgerCreateWithoutProfileInput[] | Prisma.ProfileReputationLedgerUncheckedCreateWithoutProfileInput[]
  connectOrCreate?: Prisma.ProfileReputationLedgerCreateOrConnectWithoutProfileInput | Prisma.ProfileReputationLedgerCreateOrConnectWithoutProfileInput[]
  upsert?: Prisma.ProfileReputationLedgerUpsertWithWhereUniqueWithoutProfileInput | Prisma.ProfileReputationLedgerUpsertWithWhereUniqueWithoutProfileInput[]
  createMany?: Prisma.ProfileReputationLedgerCreateManyProfileInputEnvelope
  set?: Prisma.ProfileReputationLedgerWhereUniqueInput | Prisma.ProfileReputationLedgerWhereUniqueInput[]
  disconnect?: Prisma.ProfileReputationLedgerWhereUniqueInput | Prisma.ProfileReputationLedgerWhereUniqueInput[]
  delete?: Prisma.ProfileReputationLedgerWhereUniqueInput | Prisma.ProfileReputationLedgerWhereUniqueInput[]
  connect?: Prisma.ProfileReputationLedgerWhereUniqueInput | Prisma.ProfileReputationLedgerWhereUniqueInput[]
  update?: Prisma.ProfileReputationLedgerUpdateWithWhereUniqueWithoutProfileInput | Prisma.ProfileReputationLedgerUpdateWithWhereUniqueWithoutProfileInput[]
  updateMany?: Prisma.ProfileReputationLedgerUpdateManyWithWhereWithoutProfileInput | Prisma.ProfileReputationLedgerUpdateManyWithWhereWithoutProfileInput[]
  deleteMany?: Prisma.ProfileReputationLedgerScalarWhereInput | Prisma.ProfileReputationLedgerScalarWhereInput[]
}

export type ProfileReputationLedgerCreateWithoutProfileInput = {
  id?: string
  value: number
  reason: string
  timestamp?: Date | string
}

export type ProfileReputationLedgerUncheckedCreateWithoutProfileInput = {
  id?: string
  value: number
  reason: string
  timestamp?: Date | string
}

export type ProfileReputationLedgerCreateOrConnectWithoutProfileInput = {
  where: Prisma.ProfileReputationLedgerWhereUniqueInput
  create: Prisma.XOR<Prisma.ProfileReputationLedgerCreateWithoutProfileInput, Prisma.ProfileReputationLedgerUncheckedCreateWithoutProfileInput>
}

export type ProfileReputationLedgerCreateManyProfileInputEnvelope = {
  data: Prisma.ProfileReputationLedgerCreateManyProfileInput | Prisma.ProfileReputationLedgerCreateManyProfileInput[]
  skipDuplicates?: boolean
}

export type ProfileReputationLedgerUpsertWithWhereUniqueWithoutProfileInput = {
  where: Prisma.ProfileReputationLedgerWhereUniqueInput
  update: Prisma.XOR<Prisma.ProfileReputationLedgerUpdateWithoutProfileInput, Prisma.ProfileReputationLedgerUncheckedUpdateWithoutProfileInput>
  create: Prisma.XOR<Prisma.ProfileReputationLedgerCreateWithoutProfileInput, Prisma.ProfileReputationLedgerUncheckedCreateWithoutProfileInput>
}

export type ProfileReputationLedgerUpdateWithWhereUniqueWithoutProfileInput = {
  where: Prisma.ProfileReputationLedgerWhereUniqueInput
  data: Prisma.XOR<Prisma.ProfileReputationLedgerUpdateWithoutProfileInput, Prisma.ProfileReputationLedgerUncheckedUpdateWithoutProfileInput>
}

export type ProfileReputationLedgerUpdateManyWithWhereWithoutProfileInput = {
  where: Prisma.ProfileReputationLedgerScalarWhereInput
  data: Prisma.XOR<Prisma.ProfileReputationLedgerUpdateManyMutationInput, Prisma.ProfileReputationLedgerUncheckedUpdateManyWithoutProfileInput>
}

export type ProfileReputationLedgerScalarWhereInput = {
  AND?: Prisma.ProfileReputationLedgerScalarWhereInput | Prisma.ProfileReputationLedgerScalarWhereInput[]
  OR?: Prisma.ProfileReputationLedgerScalarWhereInput[]
  NOT?: Prisma.ProfileReputationLedgerScalarWhereInput | Prisma.ProfileReputationLedgerScalarWhereInput[]
  id?: Prisma.StringFilter<"ProfileReputationLedger"> | string
  profileId?: Prisma.StringFilter<"ProfileReputationLedger"> | string
  value?: Prisma.IntFilter<"ProfileReputationLedger"> | number
  reason?: Prisma.StringFilter<"ProfileReputationLedger"> | string
  timestamp?: Prisma.DateTimeFilter<"ProfileReputationLedger"> | Date | string
}

export type ProfileReputationLedgerCreateManyProfileInput = {
  id?: string
  value: number
  reason: string
  timestamp?: Date | string
}

export type ProfileReputationLedgerUpdateWithoutProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProfileReputationLedgerUncheckedUpdateWithoutProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProfileReputationLedgerUncheckedUpdateManyWithoutProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ProfileReputationLedgerSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  profileId?: boolean
  value?: boolean
  reason?: boolean
  timestamp?: boolean
  profile?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["profileReputationLedger"]>

export type ProfileReputationLedgerSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  profileId?: boolean
  value?: boolean
  reason?: boolean
  timestamp?: boolean
  profile?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["profileReputationLedger"]>

export type ProfileReputationLedgerSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  profileId?: boolean
  value?: boolean
  reason?: boolean
  timestamp?: boolean
  profile?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["profileReputationLedger"]>

export type ProfileReputationLedgerSelectScalar = {
  id?: boolean
  profileId?: boolean
  value?: boolean
  reason?: boolean
  timestamp?: boolean
}

export type ProfileReputationLedgerOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "profileId" | "value" | "reason" | "timestamp", ExtArgs["result"]["profileReputationLedger"]>
export type ProfileReputationLedgerInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  profile?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}
export type ProfileReputationLedgerIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  profile?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}
export type ProfileReputationLedgerIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  profile?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}

export type $ProfileReputationLedgerPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProfileReputationLedger"
  objects: {
    profile: Prisma.$ProfilePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    profileId: string
    value: number
    reason: string
    timestamp: Date
  }, ExtArgs["result"]["profileReputationLedger"]>
  composites: {}
}

export type ProfileReputationLedgerGetPayload<S extends boolean | null | undefined | ProfileReputationLedgerDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProfileReputationLedgerPayload, S>

export type ProfileReputationLedgerCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProfileReputationLedgerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: ProfileReputationLedgerCountAggregateInputType | true
  }

export interface ProfileReputationLedgerDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfileReputationLedger'], meta: { name: 'ProfileReputationLedger' } }
  /**
   * Find zero or one ProfileReputationLedger that matches the filter.
   * @param {ProfileReputationLedgerFindUniqueArgs} args - Arguments to find a ProfileReputationLedger
   * @example
   * // Get one ProfileReputationLedger
   * const profileReputationLedger = await prisma.profileReputationLedger.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProfileReputationLedgerFindUniqueArgs>(args: Prisma.SelectSubset<T, ProfileReputationLedgerFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProfileReputationLedgerClient<runtime.Types.Result.GetResult<Prisma.$ProfileReputationLedgerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProfileReputationLedger that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProfileReputationLedgerFindUniqueOrThrowArgs} args - Arguments to find a ProfileReputationLedger
   * @example
   * // Get one ProfileReputationLedger
   * const profileReputationLedger = await prisma.profileReputationLedger.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProfileReputationLedgerFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProfileReputationLedgerFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProfileReputationLedgerClient<runtime.Types.Result.GetResult<Prisma.$ProfileReputationLedgerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProfileReputationLedger that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileReputationLedgerFindFirstArgs} args - Arguments to find a ProfileReputationLedger
   * @example
   * // Get one ProfileReputationLedger
   * const profileReputationLedger = await prisma.profileReputationLedger.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProfileReputationLedgerFindFirstArgs>(args?: Prisma.SelectSubset<T, ProfileReputationLedgerFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProfileReputationLedgerClient<runtime.Types.Result.GetResult<Prisma.$ProfileReputationLedgerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProfileReputationLedger that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileReputationLedgerFindFirstOrThrowArgs} args - Arguments to find a ProfileReputationLedger
   * @example
   * // Get one ProfileReputationLedger
   * const profileReputationLedger = await prisma.profileReputationLedger.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProfileReputationLedgerFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProfileReputationLedgerFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProfileReputationLedgerClient<runtime.Types.Result.GetResult<Prisma.$ProfileReputationLedgerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProfileReputationLedgers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileReputationLedgerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProfileReputationLedgers
   * const profileReputationLedgers = await prisma.profileReputationLedger.findMany()
   * 
   * // Get first 10 ProfileReputationLedgers
   * const profileReputationLedgers = await prisma.profileReputationLedger.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const profileReputationLedgerWithIdOnly = await prisma.profileReputationLedger.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProfileReputationLedgerFindManyArgs>(args?: Prisma.SelectSubset<T, ProfileReputationLedgerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProfileReputationLedgerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProfileReputationLedger.
   * @param {ProfileReputationLedgerCreateArgs} args - Arguments to create a ProfileReputationLedger.
   * @example
   * // Create one ProfileReputationLedger
   * const ProfileReputationLedger = await prisma.profileReputationLedger.create({
   *   data: {
   *     // ... data to create a ProfileReputationLedger
   *   }
   * })
   * 
   */
  create<T extends ProfileReputationLedgerCreateArgs>(args: Prisma.SelectSubset<T, ProfileReputationLedgerCreateArgs<ExtArgs>>): Prisma.Prisma__ProfileReputationLedgerClient<runtime.Types.Result.GetResult<Prisma.$ProfileReputationLedgerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProfileReputationLedgers.
   * @param {ProfileReputationLedgerCreateManyArgs} args - Arguments to create many ProfileReputationLedgers.
   * @example
   * // Create many ProfileReputationLedgers
   * const profileReputationLedger = await prisma.profileReputationLedger.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProfileReputationLedgerCreateManyArgs>(args?: Prisma.SelectSubset<T, ProfileReputationLedgerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProfileReputationLedgers and returns the data saved in the database.
   * @param {ProfileReputationLedgerCreateManyAndReturnArgs} args - Arguments to create many ProfileReputationLedgers.
   * @example
   * // Create many ProfileReputationLedgers
   * const profileReputationLedger = await prisma.profileReputationLedger.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProfileReputationLedgers and only return the `id`
   * const profileReputationLedgerWithIdOnly = await prisma.profileReputationLedger.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProfileReputationLedgerCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProfileReputationLedgerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProfileReputationLedgerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProfileReputationLedger.
   * @param {ProfileReputationLedgerDeleteArgs} args - Arguments to delete one ProfileReputationLedger.
   * @example
   * // Delete one ProfileReputationLedger
   * const ProfileReputationLedger = await prisma.profileReputationLedger.delete({
   *   where: {
   *     // ... filter to delete one ProfileReputationLedger
   *   }
   * })
   * 
   */
  delete<T extends ProfileReputationLedgerDeleteArgs>(args: Prisma.SelectSubset<T, ProfileReputationLedgerDeleteArgs<ExtArgs>>): Prisma.Prisma__ProfileReputationLedgerClient<runtime.Types.Result.GetResult<Prisma.$ProfileReputationLedgerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProfileReputationLedger.
   * @param {ProfileReputationLedgerUpdateArgs} args - Arguments to update one ProfileReputationLedger.
   * @example
   * // Update one ProfileReputationLedger
   * const profileReputationLedger = await prisma.profileReputationLedger.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProfileReputationLedgerUpdateArgs>(args: Prisma.SelectSubset<T, ProfileReputationLedgerUpdateArgs<ExtArgs>>): Prisma.Prisma__ProfileReputationLedgerClient<runtime.Types.Result.GetResult<Prisma.$ProfileReputationLedgerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProfileReputationLedgers.
   * @param {ProfileReputationLedgerDeleteManyArgs} args - Arguments to filter ProfileReputationLedgers to delete.
   * @example
   * // Delete a few ProfileReputationLedgers
   * const { count } = await prisma.profileReputationLedger.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProfileReputationLedgerDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProfileReputationLedgerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProfileReputationLedgers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileReputationLedgerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProfileReputationLedgers
   * const profileReputationLedger = await prisma.profileReputationLedger.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProfileReputationLedgerUpdateManyArgs>(args: Prisma.SelectSubset<T, ProfileReputationLedgerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProfileReputationLedgers and returns the data updated in the database.
   * @param {ProfileReputationLedgerUpdateManyAndReturnArgs} args - Arguments to update many ProfileReputationLedgers.
   * @example
   * // Update many ProfileReputationLedgers
   * const profileReputationLedger = await prisma.profileReputationLedger.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProfileReputationLedgers and only return the `id`
   * const profileReputationLedgerWithIdOnly = await prisma.profileReputationLedger.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProfileReputationLedgerUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProfileReputationLedgerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProfileReputationLedgerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProfileReputationLedger.
   * @param {ProfileReputationLedgerUpsertArgs} args - Arguments to update or create a ProfileReputationLedger.
   * @example
   * // Update or create a ProfileReputationLedger
   * const profileReputationLedger = await prisma.profileReputationLedger.upsert({
   *   create: {
   *     // ... data to create a ProfileReputationLedger
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProfileReputationLedger we want to update
   *   }
   * })
   */
  upsert<T extends ProfileReputationLedgerUpsertArgs>(args: Prisma.SelectSubset<T, ProfileReputationLedgerUpsertArgs<ExtArgs>>): Prisma.Prisma__ProfileReputationLedgerClient<runtime.Types.Result.GetResult<Prisma.$ProfileReputationLedgerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProfileReputationLedgers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileReputationLedgerCountArgs} args - Arguments to filter ProfileReputationLedgers to count.
   * @example
   * // Count the number of ProfileReputationLedgers
   * const count = await prisma.profileReputationLedger.count({
   *   where: {
   *     // ... the filter for the ProfileReputationLedgers we want to count
   *   }
   * })
  **/
  count<T extends ProfileReputationLedgerCountArgs>(
    args?: Prisma.Subset<T, ProfileReputationLedgerCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProfileReputationLedgerCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProfileReputationLedger.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileReputationLedgerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProfileReputationLedgerAggregateArgs>(args: Prisma.Subset<T, ProfileReputationLedgerAggregateArgs>): Prisma.PrismaPromise<GetProfileReputationLedgerAggregateType<T>>

  /**
   * Group by ProfileReputationLedger.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileReputationLedgerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProfileReputationLedgerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProfileReputationLedgerGroupByArgs['orderBy'] }
      : { orderBy?: ProfileReputationLedgerGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProfileReputationLedgerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileReputationLedgerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProfileReputationLedger model
 */
readonly fields: ProfileReputationLedgerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProfileReputationLedger.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProfileReputationLedgerClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  profile<T extends Prisma.ProfileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProfileDefaultArgs<ExtArgs>>): Prisma.Prisma__ProfileClient<runtime.Types.Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProfileReputationLedger model
 */
export interface ProfileReputationLedgerFieldRefs {
  readonly id: Prisma.FieldRef<"ProfileReputationLedger", 'String'>
  readonly profileId: Prisma.FieldRef<"ProfileReputationLedger", 'String'>
  readonly value: Prisma.FieldRef<"ProfileReputationLedger", 'Int'>
  readonly reason: Prisma.FieldRef<"ProfileReputationLedger", 'String'>
  readonly timestamp: Prisma.FieldRef<"ProfileReputationLedger", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ProfileReputationLedger findUnique
 */
export type ProfileReputationLedgerFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileReputationLedger
   */
  select?: Prisma.ProfileReputationLedgerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileReputationLedger
   */
  omit?: Prisma.ProfileReputationLedgerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileReputationLedgerInclude<ExtArgs> | null
  /**
   * Filter, which ProfileReputationLedger to fetch.
   */
  where: Prisma.ProfileReputationLedgerWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProfileReputationLedger findUniqueOrThrow
 */
export type ProfileReputationLedgerFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileReputationLedger
   */
  select?: Prisma.ProfileReputationLedgerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileReputationLedger
   */
  omit?: Prisma.ProfileReputationLedgerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileReputationLedgerInclude<ExtArgs> | null
  /**
   * Filter, which ProfileReputationLedger to fetch.
   */
  where: Prisma.ProfileReputationLedgerWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProfileReputationLedger findFirst
 */
export type ProfileReputationLedgerFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileReputationLedger
   */
  select?: Prisma.ProfileReputationLedgerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileReputationLedger
   */
  omit?: Prisma.ProfileReputationLedgerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileReputationLedgerInclude<ExtArgs> | null
  /**
   * Filter, which ProfileReputationLedger to fetch.
   */
  where?: Prisma.ProfileReputationLedgerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProfileReputationLedgers to fetch.
   */
  orderBy?: Prisma.ProfileReputationLedgerOrderByWithRelationInput | Prisma.ProfileReputationLedgerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProfileReputationLedgers.
   */
  cursor?: Prisma.ProfileReputationLedgerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProfileReputationLedgers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProfileReputationLedgers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProfileReputationLedgers.
   */
  distinct?: Prisma.ProfileReputationLedgerScalarFieldEnum | Prisma.ProfileReputationLedgerScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProfileReputationLedger findFirstOrThrow
 */
export type ProfileReputationLedgerFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileReputationLedger
   */
  select?: Prisma.ProfileReputationLedgerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileReputationLedger
   */
  omit?: Prisma.ProfileReputationLedgerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileReputationLedgerInclude<ExtArgs> | null
  /**
   * Filter, which ProfileReputationLedger to fetch.
   */
  where?: Prisma.ProfileReputationLedgerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProfileReputationLedgers to fetch.
   */
  orderBy?: Prisma.ProfileReputationLedgerOrderByWithRelationInput | Prisma.ProfileReputationLedgerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProfileReputationLedgers.
   */
  cursor?: Prisma.ProfileReputationLedgerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProfileReputationLedgers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProfileReputationLedgers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProfileReputationLedgers.
   */
  distinct?: Prisma.ProfileReputationLedgerScalarFieldEnum | Prisma.ProfileReputationLedgerScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProfileReputationLedger findMany
 */
export type ProfileReputationLedgerFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileReputationLedger
   */
  select?: Prisma.ProfileReputationLedgerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileReputationLedger
   */
  omit?: Prisma.ProfileReputationLedgerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileReputationLedgerInclude<ExtArgs> | null
  /**
   * Filter, which ProfileReputationLedgers to fetch.
   */
  where?: Prisma.ProfileReputationLedgerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProfileReputationLedgers to fetch.
   */
  orderBy?: Prisma.ProfileReputationLedgerOrderByWithRelationInput | Prisma.ProfileReputationLedgerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProfileReputationLedgers.
   */
  cursor?: Prisma.ProfileReputationLedgerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProfileReputationLedgers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProfileReputationLedgers.
   */
  skip?: number
  distinct?: Prisma.ProfileReputationLedgerScalarFieldEnum | Prisma.ProfileReputationLedgerScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProfileReputationLedger create
 */
export type ProfileReputationLedgerCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileReputationLedger
   */
  select?: Prisma.ProfileReputationLedgerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileReputationLedger
   */
  omit?: Prisma.ProfileReputationLedgerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileReputationLedgerInclude<ExtArgs> | null
  /**
   * The data needed to create a ProfileReputationLedger.
   */
  data: Prisma.XOR<Prisma.ProfileReputationLedgerCreateInput, Prisma.ProfileReputationLedgerUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProfileReputationLedger createMany
 */
export type ProfileReputationLedgerCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProfileReputationLedgers.
   */
  data: Prisma.ProfileReputationLedgerCreateManyInput | Prisma.ProfileReputationLedgerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProfileReputationLedger createManyAndReturn
 */
export type ProfileReputationLedgerCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileReputationLedger
   */
  select?: Prisma.ProfileReputationLedgerSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileReputationLedger
   */
  omit?: Prisma.ProfileReputationLedgerOmit<ExtArgs> | null
  /**
   * The data used to create many ProfileReputationLedgers.
   */
  data: Prisma.ProfileReputationLedgerCreateManyInput | Prisma.ProfileReputationLedgerCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileReputationLedgerIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProfileReputationLedger update
 */
export type ProfileReputationLedgerUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileReputationLedger
   */
  select?: Prisma.ProfileReputationLedgerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileReputationLedger
   */
  omit?: Prisma.ProfileReputationLedgerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileReputationLedgerInclude<ExtArgs> | null
  /**
   * The data needed to update a ProfileReputationLedger.
   */
  data: Prisma.XOR<Prisma.ProfileReputationLedgerUpdateInput, Prisma.ProfileReputationLedgerUncheckedUpdateInput>
  /**
   * Choose, which ProfileReputationLedger to update.
   */
  where: Prisma.ProfileReputationLedgerWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProfileReputationLedger updateMany
 */
export type ProfileReputationLedgerUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProfileReputationLedgers.
   */
  data: Prisma.XOR<Prisma.ProfileReputationLedgerUpdateManyMutationInput, Prisma.ProfileReputationLedgerUncheckedUpdateManyInput>
  /**
   * Filter which ProfileReputationLedgers to update
   */
  where?: Prisma.ProfileReputationLedgerWhereInput
  /**
   * Limit how many ProfileReputationLedgers to update.
   */
  limit?: number
}

/**
 * ProfileReputationLedger updateManyAndReturn
 */
export type ProfileReputationLedgerUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileReputationLedger
   */
  select?: Prisma.ProfileReputationLedgerSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileReputationLedger
   */
  omit?: Prisma.ProfileReputationLedgerOmit<ExtArgs> | null
  /**
   * The data used to update ProfileReputationLedgers.
   */
  data: Prisma.XOR<Prisma.ProfileReputationLedgerUpdateManyMutationInput, Prisma.ProfileReputationLedgerUncheckedUpdateManyInput>
  /**
   * Filter which ProfileReputationLedgers to update
   */
  where?: Prisma.ProfileReputationLedgerWhereInput
  /**
   * Limit how many ProfileReputationLedgers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileReputationLedgerIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProfileReputationLedger upsert
 */
export type ProfileReputationLedgerUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileReputationLedger
   */
  select?: Prisma.ProfileReputationLedgerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileReputationLedger
   */
  omit?: Prisma.ProfileReputationLedgerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileReputationLedgerInclude<ExtArgs> | null
  /**
   * The filter to search for the ProfileReputationLedger to update in case it exists.
   */
  where: Prisma.ProfileReputationLedgerWhereUniqueInput
  /**
   * In case the ProfileReputationLedger found by the `where` argument doesn't exist, create a new ProfileReputationLedger with this data.
   */
  create: Prisma.XOR<Prisma.ProfileReputationLedgerCreateInput, Prisma.ProfileReputationLedgerUncheckedCreateInput>
  /**
   * In case the ProfileReputationLedger was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProfileReputationLedgerUpdateInput, Prisma.ProfileReputationLedgerUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProfileReputationLedger delete
 */
export type ProfileReputationLedgerDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileReputationLedger
   */
  select?: Prisma.ProfileReputationLedgerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileReputationLedger
   */
  omit?: Prisma.ProfileReputationLedgerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileReputationLedgerInclude<ExtArgs> | null
  /**
   * Filter which ProfileReputationLedger to delete.
   */
  where: Prisma.ProfileReputationLedgerWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProfileReputationLedger deleteMany
 */
export type ProfileReputationLedgerDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProfileReputationLedgers to delete
   */
  where?: Prisma.ProfileReputationLedgerWhereInput
  /**
   * Limit how many ProfileReputationLedgers to delete.
   */
  limit?: number
}

/**
 * ProfileReputationLedger without action
 */
export type ProfileReputationLedgerDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileReputationLedger
   */
  select?: Prisma.ProfileReputationLedgerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileReputationLedger
   */
  omit?: Prisma.ProfileReputationLedgerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileReputationLedgerInclude<ExtArgs> | null
}
