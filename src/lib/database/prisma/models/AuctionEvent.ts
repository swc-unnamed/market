
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `AuctionEvent` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model AuctionEvent
 * 
 */
export type AuctionEventModel = runtime.Types.Result.DefaultSelection<Prisma.$AuctionEventPayload>

export type AggregateAuctionEvent = {
  _count: AuctionEventCountAggregateOutputType | null
  _min: AuctionEventMinAggregateOutputType | null
  _max: AuctionEventMaxAggregateOutputType | null
}

export type AuctionEventMinAggregateOutputType = {
  id: string | null
  message: string | null
  href: string | null
  createdAt: Date | null
}

export type AuctionEventMaxAggregateOutputType = {
  id: string | null
  message: string | null
  href: string | null
  createdAt: Date | null
}

export type AuctionEventCountAggregateOutputType = {
  id: number
  message: number
  href: number
  createdAt: number
  _all: number
}


export type AuctionEventMinAggregateInputType = {
  id?: true
  message?: true
  href?: true
  createdAt?: true
}

export type AuctionEventMaxAggregateInputType = {
  id?: true
  message?: true
  href?: true
  createdAt?: true
}

export type AuctionEventCountAggregateInputType = {
  id?: true
  message?: true
  href?: true
  createdAt?: true
  _all?: true
}

export type AuctionEventAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AuctionEvent to aggregate.
   */
  where?: Prisma.AuctionEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AuctionEvents to fetch.
   */
  orderBy?: Prisma.AuctionEventOrderByWithRelationInput | Prisma.AuctionEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AuctionEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AuctionEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AuctionEvents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AuctionEvents
  **/
  _count?: true | AuctionEventCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AuctionEventMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AuctionEventMaxAggregateInputType
}

export type GetAuctionEventAggregateType<T extends AuctionEventAggregateArgs> = {
      [P in keyof T & keyof AggregateAuctionEvent]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAuctionEvent[P]>
    : Prisma.GetScalarType<T[P], AggregateAuctionEvent[P]>
}




export type AuctionEventGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AuctionEventWhereInput
  orderBy?: Prisma.AuctionEventOrderByWithAggregationInput | Prisma.AuctionEventOrderByWithAggregationInput[]
  by: Prisma.AuctionEventScalarFieldEnum[] | Prisma.AuctionEventScalarFieldEnum
  having?: Prisma.AuctionEventScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AuctionEventCountAggregateInputType | true
  _min?: AuctionEventMinAggregateInputType
  _max?: AuctionEventMaxAggregateInputType
}

export type AuctionEventGroupByOutputType = {
  id: string
  message: string
  href: string | null
  createdAt: Date
  _count: AuctionEventCountAggregateOutputType | null
  _min: AuctionEventMinAggregateOutputType | null
  _max: AuctionEventMaxAggregateOutputType | null
}

type GetAuctionEventGroupByPayload<T extends AuctionEventGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AuctionEventGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AuctionEventGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AuctionEventGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AuctionEventGroupByOutputType[P]>
      }
    >
  > 



export type AuctionEventWhereInput = {
  AND?: Prisma.AuctionEventWhereInput | Prisma.AuctionEventWhereInput[]
  OR?: Prisma.AuctionEventWhereInput[]
  NOT?: Prisma.AuctionEventWhereInput | Prisma.AuctionEventWhereInput[]
  id?: Prisma.StringFilter<"AuctionEvent"> | string
  message?: Prisma.StringFilter<"AuctionEvent"> | string
  href?: Prisma.StringNullableFilter<"AuctionEvent"> | string | null
  createdAt?: Prisma.DateTimeFilter<"AuctionEvent"> | Date | string
}

export type AuctionEventOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  message?: Prisma.SortOrder
  href?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AuctionEventWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.AuctionEventWhereInput | Prisma.AuctionEventWhereInput[]
  OR?: Prisma.AuctionEventWhereInput[]
  NOT?: Prisma.AuctionEventWhereInput | Prisma.AuctionEventWhereInput[]
  message?: Prisma.StringFilter<"AuctionEvent"> | string
  href?: Prisma.StringNullableFilter<"AuctionEvent"> | string | null
  createdAt?: Prisma.DateTimeFilter<"AuctionEvent"> | Date | string
}, "id">

export type AuctionEventOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  message?: Prisma.SortOrder
  href?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.AuctionEventCountOrderByAggregateInput
  _max?: Prisma.AuctionEventMaxOrderByAggregateInput
  _min?: Prisma.AuctionEventMinOrderByAggregateInput
}

export type AuctionEventScalarWhereWithAggregatesInput = {
  AND?: Prisma.AuctionEventScalarWhereWithAggregatesInput | Prisma.AuctionEventScalarWhereWithAggregatesInput[]
  OR?: Prisma.AuctionEventScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AuctionEventScalarWhereWithAggregatesInput | Prisma.AuctionEventScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"AuctionEvent"> | string
  message?: Prisma.StringWithAggregatesFilter<"AuctionEvent"> | string
  href?: Prisma.StringNullableWithAggregatesFilter<"AuctionEvent"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AuctionEvent"> | Date | string
}

export type AuctionEventCreateInput = {
  id?: string
  message: string
  href?: string | null
  createdAt?: Date | string
}

export type AuctionEventUncheckedCreateInput = {
  id?: string
  message: string
  href?: string | null
  createdAt?: Date | string
}

export type AuctionEventUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  href?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AuctionEventUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  href?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AuctionEventCreateManyInput = {
  id?: string
  message: string
  href?: string | null
  createdAt?: Date | string
}

export type AuctionEventUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  href?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AuctionEventUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  href?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AuctionEventCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  message?: Prisma.SortOrder
  href?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AuctionEventMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  message?: Prisma.SortOrder
  href?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AuctionEventMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  message?: Prisma.SortOrder
  href?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}



export type AuctionEventSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  message?: boolean
  href?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["auctionEvent"]>

export type AuctionEventSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  message?: boolean
  href?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["auctionEvent"]>

export type AuctionEventSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  message?: boolean
  href?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["auctionEvent"]>

export type AuctionEventSelectScalar = {
  id?: boolean
  message?: boolean
  href?: boolean
  createdAt?: boolean
}

export type AuctionEventOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "message" | "href" | "createdAt", ExtArgs["result"]["auctionEvent"]>

export type $AuctionEventPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AuctionEvent"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    message: string
    href: string | null
    createdAt: Date
  }, ExtArgs["result"]["auctionEvent"]>
  composites: {}
}

export type AuctionEventGetPayload<S extends boolean | null | undefined | AuctionEventDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AuctionEventPayload, S>

export type AuctionEventCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AuctionEventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: AuctionEventCountAggregateInputType | true
  }

export interface AuctionEventDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuctionEvent'], meta: { name: 'AuctionEvent' } }
  /**
   * Find zero or one AuctionEvent that matches the filter.
   * @param {AuctionEventFindUniqueArgs} args - Arguments to find a AuctionEvent
   * @example
   * // Get one AuctionEvent
   * const auctionEvent = await prisma.auctionEvent.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AuctionEventFindUniqueArgs>(args: Prisma.SelectSubset<T, AuctionEventFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AuctionEventClient<runtime.Types.Result.GetResult<Prisma.$AuctionEventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AuctionEvent that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AuctionEventFindUniqueOrThrowArgs} args - Arguments to find a AuctionEvent
   * @example
   * // Get one AuctionEvent
   * const auctionEvent = await prisma.auctionEvent.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AuctionEventFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AuctionEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AuctionEventClient<runtime.Types.Result.GetResult<Prisma.$AuctionEventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AuctionEvent that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuctionEventFindFirstArgs} args - Arguments to find a AuctionEvent
   * @example
   * // Get one AuctionEvent
   * const auctionEvent = await prisma.auctionEvent.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AuctionEventFindFirstArgs>(args?: Prisma.SelectSubset<T, AuctionEventFindFirstArgs<ExtArgs>>): Prisma.Prisma__AuctionEventClient<runtime.Types.Result.GetResult<Prisma.$AuctionEventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AuctionEvent that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuctionEventFindFirstOrThrowArgs} args - Arguments to find a AuctionEvent
   * @example
   * // Get one AuctionEvent
   * const auctionEvent = await prisma.auctionEvent.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AuctionEventFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AuctionEventFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AuctionEventClient<runtime.Types.Result.GetResult<Prisma.$AuctionEventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AuctionEvents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuctionEventFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AuctionEvents
   * const auctionEvents = await prisma.auctionEvent.findMany()
   * 
   * // Get first 10 AuctionEvents
   * const auctionEvents = await prisma.auctionEvent.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const auctionEventWithIdOnly = await prisma.auctionEvent.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AuctionEventFindManyArgs>(args?: Prisma.SelectSubset<T, AuctionEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AuctionEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AuctionEvent.
   * @param {AuctionEventCreateArgs} args - Arguments to create a AuctionEvent.
   * @example
   * // Create one AuctionEvent
   * const AuctionEvent = await prisma.auctionEvent.create({
   *   data: {
   *     // ... data to create a AuctionEvent
   *   }
   * })
   * 
   */
  create<T extends AuctionEventCreateArgs>(args: Prisma.SelectSubset<T, AuctionEventCreateArgs<ExtArgs>>): Prisma.Prisma__AuctionEventClient<runtime.Types.Result.GetResult<Prisma.$AuctionEventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AuctionEvents.
   * @param {AuctionEventCreateManyArgs} args - Arguments to create many AuctionEvents.
   * @example
   * // Create many AuctionEvents
   * const auctionEvent = await prisma.auctionEvent.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AuctionEventCreateManyArgs>(args?: Prisma.SelectSubset<T, AuctionEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AuctionEvents and returns the data saved in the database.
   * @param {AuctionEventCreateManyAndReturnArgs} args - Arguments to create many AuctionEvents.
   * @example
   * // Create many AuctionEvents
   * const auctionEvent = await prisma.auctionEvent.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AuctionEvents and only return the `id`
   * const auctionEventWithIdOnly = await prisma.auctionEvent.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AuctionEventCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AuctionEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AuctionEventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AuctionEvent.
   * @param {AuctionEventDeleteArgs} args - Arguments to delete one AuctionEvent.
   * @example
   * // Delete one AuctionEvent
   * const AuctionEvent = await prisma.auctionEvent.delete({
   *   where: {
   *     // ... filter to delete one AuctionEvent
   *   }
   * })
   * 
   */
  delete<T extends AuctionEventDeleteArgs>(args: Prisma.SelectSubset<T, AuctionEventDeleteArgs<ExtArgs>>): Prisma.Prisma__AuctionEventClient<runtime.Types.Result.GetResult<Prisma.$AuctionEventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AuctionEvent.
   * @param {AuctionEventUpdateArgs} args - Arguments to update one AuctionEvent.
   * @example
   * // Update one AuctionEvent
   * const auctionEvent = await prisma.auctionEvent.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AuctionEventUpdateArgs>(args: Prisma.SelectSubset<T, AuctionEventUpdateArgs<ExtArgs>>): Prisma.Prisma__AuctionEventClient<runtime.Types.Result.GetResult<Prisma.$AuctionEventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AuctionEvents.
   * @param {AuctionEventDeleteManyArgs} args - Arguments to filter AuctionEvents to delete.
   * @example
   * // Delete a few AuctionEvents
   * const { count } = await prisma.auctionEvent.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AuctionEventDeleteManyArgs>(args?: Prisma.SelectSubset<T, AuctionEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AuctionEvents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuctionEventUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AuctionEvents
   * const auctionEvent = await prisma.auctionEvent.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AuctionEventUpdateManyArgs>(args: Prisma.SelectSubset<T, AuctionEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AuctionEvents and returns the data updated in the database.
   * @param {AuctionEventUpdateManyAndReturnArgs} args - Arguments to update many AuctionEvents.
   * @example
   * // Update many AuctionEvents
   * const auctionEvent = await prisma.auctionEvent.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AuctionEvents and only return the `id`
   * const auctionEventWithIdOnly = await prisma.auctionEvent.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AuctionEventUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AuctionEventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AuctionEventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AuctionEvent.
   * @param {AuctionEventUpsertArgs} args - Arguments to update or create a AuctionEvent.
   * @example
   * // Update or create a AuctionEvent
   * const auctionEvent = await prisma.auctionEvent.upsert({
   *   create: {
   *     // ... data to create a AuctionEvent
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AuctionEvent we want to update
   *   }
   * })
   */
  upsert<T extends AuctionEventUpsertArgs>(args: Prisma.SelectSubset<T, AuctionEventUpsertArgs<ExtArgs>>): Prisma.Prisma__AuctionEventClient<runtime.Types.Result.GetResult<Prisma.$AuctionEventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AuctionEvents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuctionEventCountArgs} args - Arguments to filter AuctionEvents to count.
   * @example
   * // Count the number of AuctionEvents
   * const count = await prisma.auctionEvent.count({
   *   where: {
   *     // ... the filter for the AuctionEvents we want to count
   *   }
   * })
  **/
  count<T extends AuctionEventCountArgs>(
    args?: Prisma.Subset<T, AuctionEventCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AuctionEventCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AuctionEvent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuctionEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AuctionEventAggregateArgs>(args: Prisma.Subset<T, AuctionEventAggregateArgs>): Prisma.PrismaPromise<GetAuctionEventAggregateType<T>>

  /**
   * Group by AuctionEvent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuctionEventGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AuctionEventGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AuctionEventGroupByArgs['orderBy'] }
      : { orderBy?: AuctionEventGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AuctionEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuctionEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AuctionEvent model
 */
readonly fields: AuctionEventFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AuctionEvent.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AuctionEventClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AuctionEvent model
 */
export interface AuctionEventFieldRefs {
  readonly id: Prisma.FieldRef<"AuctionEvent", 'String'>
  readonly message: Prisma.FieldRef<"AuctionEvent", 'String'>
  readonly href: Prisma.FieldRef<"AuctionEvent", 'String'>
  readonly createdAt: Prisma.FieldRef<"AuctionEvent", 'DateTime'>
}
    

// Custom InputTypes
/**
 * AuctionEvent findUnique
 */
export type AuctionEventFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionEvent
   */
  select?: Prisma.AuctionEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionEvent
   */
  omit?: Prisma.AuctionEventOmit<ExtArgs> | null
  /**
   * Filter, which AuctionEvent to fetch.
   */
  where: Prisma.AuctionEventWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionEvent findUniqueOrThrow
 */
export type AuctionEventFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionEvent
   */
  select?: Prisma.AuctionEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionEvent
   */
  omit?: Prisma.AuctionEventOmit<ExtArgs> | null
  /**
   * Filter, which AuctionEvent to fetch.
   */
  where: Prisma.AuctionEventWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionEvent findFirst
 */
export type AuctionEventFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionEvent
   */
  select?: Prisma.AuctionEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionEvent
   */
  omit?: Prisma.AuctionEventOmit<ExtArgs> | null
  /**
   * Filter, which AuctionEvent to fetch.
   */
  where?: Prisma.AuctionEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AuctionEvents to fetch.
   */
  orderBy?: Prisma.AuctionEventOrderByWithRelationInput | Prisma.AuctionEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AuctionEvents.
   */
  cursor?: Prisma.AuctionEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AuctionEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AuctionEvents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AuctionEvents.
   */
  distinct?: Prisma.AuctionEventScalarFieldEnum | Prisma.AuctionEventScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionEvent findFirstOrThrow
 */
export type AuctionEventFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionEvent
   */
  select?: Prisma.AuctionEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionEvent
   */
  omit?: Prisma.AuctionEventOmit<ExtArgs> | null
  /**
   * Filter, which AuctionEvent to fetch.
   */
  where?: Prisma.AuctionEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AuctionEvents to fetch.
   */
  orderBy?: Prisma.AuctionEventOrderByWithRelationInput | Prisma.AuctionEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AuctionEvents.
   */
  cursor?: Prisma.AuctionEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AuctionEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AuctionEvents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AuctionEvents.
   */
  distinct?: Prisma.AuctionEventScalarFieldEnum | Prisma.AuctionEventScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionEvent findMany
 */
export type AuctionEventFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionEvent
   */
  select?: Prisma.AuctionEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionEvent
   */
  omit?: Prisma.AuctionEventOmit<ExtArgs> | null
  /**
   * Filter, which AuctionEvents to fetch.
   */
  where?: Prisma.AuctionEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AuctionEvents to fetch.
   */
  orderBy?: Prisma.AuctionEventOrderByWithRelationInput | Prisma.AuctionEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AuctionEvents.
   */
  cursor?: Prisma.AuctionEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AuctionEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AuctionEvents.
   */
  skip?: number
  distinct?: Prisma.AuctionEventScalarFieldEnum | Prisma.AuctionEventScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionEvent create
 */
export type AuctionEventCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionEvent
   */
  select?: Prisma.AuctionEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionEvent
   */
  omit?: Prisma.AuctionEventOmit<ExtArgs> | null
  /**
   * The data needed to create a AuctionEvent.
   */
  data: Prisma.XOR<Prisma.AuctionEventCreateInput, Prisma.AuctionEventUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionEvent createMany
 */
export type AuctionEventCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AuctionEvents.
   */
  data: Prisma.AuctionEventCreateManyInput | Prisma.AuctionEventCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AuctionEvent createManyAndReturn
 */
export type AuctionEventCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionEvent
   */
  select?: Prisma.AuctionEventSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionEvent
   */
  omit?: Prisma.AuctionEventOmit<ExtArgs> | null
  /**
   * The data used to create many AuctionEvents.
   */
  data: Prisma.AuctionEventCreateManyInput | Prisma.AuctionEventCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AuctionEvent update
 */
export type AuctionEventUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionEvent
   */
  select?: Prisma.AuctionEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionEvent
   */
  omit?: Prisma.AuctionEventOmit<ExtArgs> | null
  /**
   * The data needed to update a AuctionEvent.
   */
  data: Prisma.XOR<Prisma.AuctionEventUpdateInput, Prisma.AuctionEventUncheckedUpdateInput>
  /**
   * Choose, which AuctionEvent to update.
   */
  where: Prisma.AuctionEventWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionEvent updateMany
 */
export type AuctionEventUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AuctionEvents.
   */
  data: Prisma.XOR<Prisma.AuctionEventUpdateManyMutationInput, Prisma.AuctionEventUncheckedUpdateManyInput>
  /**
   * Filter which AuctionEvents to update
   */
  where?: Prisma.AuctionEventWhereInput
  /**
   * Limit how many AuctionEvents to update.
   */
  limit?: number
}

/**
 * AuctionEvent updateManyAndReturn
 */
export type AuctionEventUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionEvent
   */
  select?: Prisma.AuctionEventSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionEvent
   */
  omit?: Prisma.AuctionEventOmit<ExtArgs> | null
  /**
   * The data used to update AuctionEvents.
   */
  data: Prisma.XOR<Prisma.AuctionEventUpdateManyMutationInput, Prisma.AuctionEventUncheckedUpdateManyInput>
  /**
   * Filter which AuctionEvents to update
   */
  where?: Prisma.AuctionEventWhereInput
  /**
   * Limit how many AuctionEvents to update.
   */
  limit?: number
}

/**
 * AuctionEvent upsert
 */
export type AuctionEventUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionEvent
   */
  select?: Prisma.AuctionEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionEvent
   */
  omit?: Prisma.AuctionEventOmit<ExtArgs> | null
  /**
   * The filter to search for the AuctionEvent to update in case it exists.
   */
  where: Prisma.AuctionEventWhereUniqueInput
  /**
   * In case the AuctionEvent found by the `where` argument doesn't exist, create a new AuctionEvent with this data.
   */
  create: Prisma.XOR<Prisma.AuctionEventCreateInput, Prisma.AuctionEventUncheckedCreateInput>
  /**
   * In case the AuctionEvent was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AuctionEventUpdateInput, Prisma.AuctionEventUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionEvent delete
 */
export type AuctionEventDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionEvent
   */
  select?: Prisma.AuctionEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionEvent
   */
  omit?: Prisma.AuctionEventOmit<ExtArgs> | null
  /**
   * Filter which AuctionEvent to delete.
   */
  where: Prisma.AuctionEventWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionEvent deleteMany
 */
export type AuctionEventDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AuctionEvents to delete
   */
  where?: Prisma.AuctionEventWhereInput
  /**
   * Limit how many AuctionEvents to delete.
   */
  limit?: number
}

/**
 * AuctionEvent without action
 */
export type AuctionEventDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionEvent
   */
  select?: Prisma.AuctionEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionEvent
   */
  omit?: Prisma.AuctionEventOmit<ExtArgs> | null
}
