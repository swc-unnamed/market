
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `AuctionReview` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model AuctionReview
 * 
 */
export type AuctionReviewModel = runtime.Types.Result.DefaultSelection<Prisma.$AuctionReviewPayload>

export type AggregateAuctionReview = {
  _count: AuctionReviewCountAggregateOutputType | null
  _min: AuctionReviewMinAggregateOutputType | null
  _max: AuctionReviewMaxAggregateOutputType | null
}

export type AuctionReviewMinAggregateOutputType = {
  id: string | null
  listingId: string | null
  reviewerId: string | null
  revieweeId: string | null
  createdAt: Date | null
  completedAt: Date | null
}

export type AuctionReviewMaxAggregateOutputType = {
  id: string | null
  listingId: string | null
  reviewerId: string | null
  revieweeId: string | null
  createdAt: Date | null
  completedAt: Date | null
}

export type AuctionReviewCountAggregateOutputType = {
  id: number
  listingId: number
  reviewerId: number
  revieweeId: number
  createdAt: number
  completedAt: number
  _all: number
}


export type AuctionReviewMinAggregateInputType = {
  id?: true
  listingId?: true
  reviewerId?: true
  revieweeId?: true
  createdAt?: true
  completedAt?: true
}

export type AuctionReviewMaxAggregateInputType = {
  id?: true
  listingId?: true
  reviewerId?: true
  revieweeId?: true
  createdAt?: true
  completedAt?: true
}

export type AuctionReviewCountAggregateInputType = {
  id?: true
  listingId?: true
  reviewerId?: true
  revieweeId?: true
  createdAt?: true
  completedAt?: true
  _all?: true
}

export type AuctionReviewAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AuctionReview to aggregate.
   */
  where?: Prisma.AuctionReviewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AuctionReviews to fetch.
   */
  orderBy?: Prisma.AuctionReviewOrderByWithRelationInput | Prisma.AuctionReviewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AuctionReviewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AuctionReviews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AuctionReviews.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AuctionReviews
  **/
  _count?: true | AuctionReviewCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AuctionReviewMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AuctionReviewMaxAggregateInputType
}

export type GetAuctionReviewAggregateType<T extends AuctionReviewAggregateArgs> = {
      [P in keyof T & keyof AggregateAuctionReview]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAuctionReview[P]>
    : Prisma.GetScalarType<T[P], AggregateAuctionReview[P]>
}




export type AuctionReviewGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AuctionReviewWhereInput
  orderBy?: Prisma.AuctionReviewOrderByWithAggregationInput | Prisma.AuctionReviewOrderByWithAggregationInput[]
  by: Prisma.AuctionReviewScalarFieldEnum[] | Prisma.AuctionReviewScalarFieldEnum
  having?: Prisma.AuctionReviewScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AuctionReviewCountAggregateInputType | true
  _min?: AuctionReviewMinAggregateInputType
  _max?: AuctionReviewMaxAggregateInputType
}

export type AuctionReviewGroupByOutputType = {
  id: string
  listingId: string
  reviewerId: string
  revieweeId: string
  createdAt: Date
  completedAt: Date | null
  _count: AuctionReviewCountAggregateOutputType | null
  _min: AuctionReviewMinAggregateOutputType | null
  _max: AuctionReviewMaxAggregateOutputType | null
}

type GetAuctionReviewGroupByPayload<T extends AuctionReviewGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AuctionReviewGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AuctionReviewGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AuctionReviewGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AuctionReviewGroupByOutputType[P]>
      }
    >
  > 



export type AuctionReviewWhereInput = {
  AND?: Prisma.AuctionReviewWhereInput | Prisma.AuctionReviewWhereInput[]
  OR?: Prisma.AuctionReviewWhereInput[]
  NOT?: Prisma.AuctionReviewWhereInput | Prisma.AuctionReviewWhereInput[]
  id?: Prisma.StringFilter<"AuctionReview"> | string
  listingId?: Prisma.StringFilter<"AuctionReview"> | string
  reviewerId?: Prisma.StringFilter<"AuctionReview"> | string
  revieweeId?: Prisma.StringFilter<"AuctionReview"> | string
  createdAt?: Prisma.DateTimeFilter<"AuctionReview"> | Date | string
  completedAt?: Prisma.DateTimeNullableFilter<"AuctionReview"> | Date | string | null
  listing?: Prisma.XOR<Prisma.AuctionListingScalarRelationFilter, Prisma.AuctionListingWhereInput>
}

export type AuctionReviewOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  listingId?: Prisma.SortOrder
  reviewerId?: Prisma.SortOrder
  revieweeId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  listing?: Prisma.AuctionListingOrderByWithRelationInput
}

export type AuctionReviewWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.AuctionReviewWhereInput | Prisma.AuctionReviewWhereInput[]
  OR?: Prisma.AuctionReviewWhereInput[]
  NOT?: Prisma.AuctionReviewWhereInput | Prisma.AuctionReviewWhereInput[]
  listingId?: Prisma.StringFilter<"AuctionReview"> | string
  reviewerId?: Prisma.StringFilter<"AuctionReview"> | string
  revieweeId?: Prisma.StringFilter<"AuctionReview"> | string
  createdAt?: Prisma.DateTimeFilter<"AuctionReview"> | Date | string
  completedAt?: Prisma.DateTimeNullableFilter<"AuctionReview"> | Date | string | null
  listing?: Prisma.XOR<Prisma.AuctionListingScalarRelationFilter, Prisma.AuctionListingWhereInput>
}, "id">

export type AuctionReviewOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  listingId?: Prisma.SortOrder
  reviewerId?: Prisma.SortOrder
  revieweeId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.AuctionReviewCountOrderByAggregateInput
  _max?: Prisma.AuctionReviewMaxOrderByAggregateInput
  _min?: Prisma.AuctionReviewMinOrderByAggregateInput
}

export type AuctionReviewScalarWhereWithAggregatesInput = {
  AND?: Prisma.AuctionReviewScalarWhereWithAggregatesInput | Prisma.AuctionReviewScalarWhereWithAggregatesInput[]
  OR?: Prisma.AuctionReviewScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AuctionReviewScalarWhereWithAggregatesInput | Prisma.AuctionReviewScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"AuctionReview"> | string
  listingId?: Prisma.StringWithAggregatesFilter<"AuctionReview"> | string
  reviewerId?: Prisma.StringWithAggregatesFilter<"AuctionReview"> | string
  revieweeId?: Prisma.StringWithAggregatesFilter<"AuctionReview"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AuctionReview"> | Date | string
  completedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"AuctionReview"> | Date | string | null
}

export type AuctionReviewCreateInput = {
  id?: string
  reviewerId: string
  revieweeId: string
  createdAt?: Date | string
  completedAt?: Date | string | null
  listing: Prisma.AuctionListingCreateNestedOneWithoutReviewsInput
}

export type AuctionReviewUncheckedCreateInput = {
  id?: string
  listingId: string
  reviewerId: string
  revieweeId: string
  createdAt?: Date | string
  completedAt?: Date | string | null
}

export type AuctionReviewUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reviewerId?: Prisma.StringFieldUpdateOperationsInput | string
  revieweeId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  listing?: Prisma.AuctionListingUpdateOneRequiredWithoutReviewsNestedInput
}

export type AuctionReviewUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  listingId?: Prisma.StringFieldUpdateOperationsInput | string
  reviewerId?: Prisma.StringFieldUpdateOperationsInput | string
  revieweeId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AuctionReviewCreateManyInput = {
  id?: string
  listingId: string
  reviewerId: string
  revieweeId: string
  createdAt?: Date | string
  completedAt?: Date | string | null
}

export type AuctionReviewUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reviewerId?: Prisma.StringFieldUpdateOperationsInput | string
  revieweeId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AuctionReviewUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  listingId?: Prisma.StringFieldUpdateOperationsInput | string
  reviewerId?: Prisma.StringFieldUpdateOperationsInput | string
  revieweeId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AuctionReviewListRelationFilter = {
  every?: Prisma.AuctionReviewWhereInput
  some?: Prisma.AuctionReviewWhereInput
  none?: Prisma.AuctionReviewWhereInput
}

export type AuctionReviewOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AuctionReviewCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  listingId?: Prisma.SortOrder
  reviewerId?: Prisma.SortOrder
  revieweeId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type AuctionReviewMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  listingId?: Prisma.SortOrder
  reviewerId?: Prisma.SortOrder
  revieweeId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type AuctionReviewMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  listingId?: Prisma.SortOrder
  reviewerId?: Prisma.SortOrder
  revieweeId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type AuctionReviewCreateNestedManyWithoutListingInput = {
  create?: Prisma.XOR<Prisma.AuctionReviewCreateWithoutListingInput, Prisma.AuctionReviewUncheckedCreateWithoutListingInput> | Prisma.AuctionReviewCreateWithoutListingInput[] | Prisma.AuctionReviewUncheckedCreateWithoutListingInput[]
  connectOrCreate?: Prisma.AuctionReviewCreateOrConnectWithoutListingInput | Prisma.AuctionReviewCreateOrConnectWithoutListingInput[]
  createMany?: Prisma.AuctionReviewCreateManyListingInputEnvelope
  connect?: Prisma.AuctionReviewWhereUniqueInput | Prisma.AuctionReviewWhereUniqueInput[]
}

export type AuctionReviewUncheckedCreateNestedManyWithoutListingInput = {
  create?: Prisma.XOR<Prisma.AuctionReviewCreateWithoutListingInput, Prisma.AuctionReviewUncheckedCreateWithoutListingInput> | Prisma.AuctionReviewCreateWithoutListingInput[] | Prisma.AuctionReviewUncheckedCreateWithoutListingInput[]
  connectOrCreate?: Prisma.AuctionReviewCreateOrConnectWithoutListingInput | Prisma.AuctionReviewCreateOrConnectWithoutListingInput[]
  createMany?: Prisma.AuctionReviewCreateManyListingInputEnvelope
  connect?: Prisma.AuctionReviewWhereUniqueInput | Prisma.AuctionReviewWhereUniqueInput[]
}

export type AuctionReviewUpdateManyWithoutListingNestedInput = {
  create?: Prisma.XOR<Prisma.AuctionReviewCreateWithoutListingInput, Prisma.AuctionReviewUncheckedCreateWithoutListingInput> | Prisma.AuctionReviewCreateWithoutListingInput[] | Prisma.AuctionReviewUncheckedCreateWithoutListingInput[]
  connectOrCreate?: Prisma.AuctionReviewCreateOrConnectWithoutListingInput | Prisma.AuctionReviewCreateOrConnectWithoutListingInput[]
  upsert?: Prisma.AuctionReviewUpsertWithWhereUniqueWithoutListingInput | Prisma.AuctionReviewUpsertWithWhereUniqueWithoutListingInput[]
  createMany?: Prisma.AuctionReviewCreateManyListingInputEnvelope
  set?: Prisma.AuctionReviewWhereUniqueInput | Prisma.AuctionReviewWhereUniqueInput[]
  disconnect?: Prisma.AuctionReviewWhereUniqueInput | Prisma.AuctionReviewWhereUniqueInput[]
  delete?: Prisma.AuctionReviewWhereUniqueInput | Prisma.AuctionReviewWhereUniqueInput[]
  connect?: Prisma.AuctionReviewWhereUniqueInput | Prisma.AuctionReviewWhereUniqueInput[]
  update?: Prisma.AuctionReviewUpdateWithWhereUniqueWithoutListingInput | Prisma.AuctionReviewUpdateWithWhereUniqueWithoutListingInput[]
  updateMany?: Prisma.AuctionReviewUpdateManyWithWhereWithoutListingInput | Prisma.AuctionReviewUpdateManyWithWhereWithoutListingInput[]
  deleteMany?: Prisma.AuctionReviewScalarWhereInput | Prisma.AuctionReviewScalarWhereInput[]
}

export type AuctionReviewUncheckedUpdateManyWithoutListingNestedInput = {
  create?: Prisma.XOR<Prisma.AuctionReviewCreateWithoutListingInput, Prisma.AuctionReviewUncheckedCreateWithoutListingInput> | Prisma.AuctionReviewCreateWithoutListingInput[] | Prisma.AuctionReviewUncheckedCreateWithoutListingInput[]
  connectOrCreate?: Prisma.AuctionReviewCreateOrConnectWithoutListingInput | Prisma.AuctionReviewCreateOrConnectWithoutListingInput[]
  upsert?: Prisma.AuctionReviewUpsertWithWhereUniqueWithoutListingInput | Prisma.AuctionReviewUpsertWithWhereUniqueWithoutListingInput[]
  createMany?: Prisma.AuctionReviewCreateManyListingInputEnvelope
  set?: Prisma.AuctionReviewWhereUniqueInput | Prisma.AuctionReviewWhereUniqueInput[]
  disconnect?: Prisma.AuctionReviewWhereUniqueInput | Prisma.AuctionReviewWhereUniqueInput[]
  delete?: Prisma.AuctionReviewWhereUniqueInput | Prisma.AuctionReviewWhereUniqueInput[]
  connect?: Prisma.AuctionReviewWhereUniqueInput | Prisma.AuctionReviewWhereUniqueInput[]
  update?: Prisma.AuctionReviewUpdateWithWhereUniqueWithoutListingInput | Prisma.AuctionReviewUpdateWithWhereUniqueWithoutListingInput[]
  updateMany?: Prisma.AuctionReviewUpdateManyWithWhereWithoutListingInput | Prisma.AuctionReviewUpdateManyWithWhereWithoutListingInput[]
  deleteMany?: Prisma.AuctionReviewScalarWhereInput | Prisma.AuctionReviewScalarWhereInput[]
}

export type AuctionReviewCreateWithoutListingInput = {
  id?: string
  reviewerId: string
  revieweeId: string
  createdAt?: Date | string
  completedAt?: Date | string | null
}

export type AuctionReviewUncheckedCreateWithoutListingInput = {
  id?: string
  reviewerId: string
  revieweeId: string
  createdAt?: Date | string
  completedAt?: Date | string | null
}

export type AuctionReviewCreateOrConnectWithoutListingInput = {
  where: Prisma.AuctionReviewWhereUniqueInput
  create: Prisma.XOR<Prisma.AuctionReviewCreateWithoutListingInput, Prisma.AuctionReviewUncheckedCreateWithoutListingInput>
}

export type AuctionReviewCreateManyListingInputEnvelope = {
  data: Prisma.AuctionReviewCreateManyListingInput | Prisma.AuctionReviewCreateManyListingInput[]
  skipDuplicates?: boolean
}

export type AuctionReviewUpsertWithWhereUniqueWithoutListingInput = {
  where: Prisma.AuctionReviewWhereUniqueInput
  update: Prisma.XOR<Prisma.AuctionReviewUpdateWithoutListingInput, Prisma.AuctionReviewUncheckedUpdateWithoutListingInput>
  create: Prisma.XOR<Prisma.AuctionReviewCreateWithoutListingInput, Prisma.AuctionReviewUncheckedCreateWithoutListingInput>
}

export type AuctionReviewUpdateWithWhereUniqueWithoutListingInput = {
  where: Prisma.AuctionReviewWhereUniqueInput
  data: Prisma.XOR<Prisma.AuctionReviewUpdateWithoutListingInput, Prisma.AuctionReviewUncheckedUpdateWithoutListingInput>
}

export type AuctionReviewUpdateManyWithWhereWithoutListingInput = {
  where: Prisma.AuctionReviewScalarWhereInput
  data: Prisma.XOR<Prisma.AuctionReviewUpdateManyMutationInput, Prisma.AuctionReviewUncheckedUpdateManyWithoutListingInput>
}

export type AuctionReviewScalarWhereInput = {
  AND?: Prisma.AuctionReviewScalarWhereInput | Prisma.AuctionReviewScalarWhereInput[]
  OR?: Prisma.AuctionReviewScalarWhereInput[]
  NOT?: Prisma.AuctionReviewScalarWhereInput | Prisma.AuctionReviewScalarWhereInput[]
  id?: Prisma.StringFilter<"AuctionReview"> | string
  listingId?: Prisma.StringFilter<"AuctionReview"> | string
  reviewerId?: Prisma.StringFilter<"AuctionReview"> | string
  revieweeId?: Prisma.StringFilter<"AuctionReview"> | string
  createdAt?: Prisma.DateTimeFilter<"AuctionReview"> | Date | string
  completedAt?: Prisma.DateTimeNullableFilter<"AuctionReview"> | Date | string | null
}

export type AuctionReviewCreateManyListingInput = {
  id?: string
  reviewerId: string
  revieweeId: string
  createdAt?: Date | string
  completedAt?: Date | string | null
}

export type AuctionReviewUpdateWithoutListingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reviewerId?: Prisma.StringFieldUpdateOperationsInput | string
  revieweeId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AuctionReviewUncheckedUpdateWithoutListingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reviewerId?: Prisma.StringFieldUpdateOperationsInput | string
  revieweeId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AuctionReviewUncheckedUpdateManyWithoutListingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reviewerId?: Prisma.StringFieldUpdateOperationsInput | string
  revieweeId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}



export type AuctionReviewSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  listingId?: boolean
  reviewerId?: boolean
  revieweeId?: boolean
  createdAt?: boolean
  completedAt?: boolean
  listing?: boolean | Prisma.AuctionListingDefaultArgs<ExtArgs>
}, ExtArgs["result"]["auctionReview"]>

export type AuctionReviewSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  listingId?: boolean
  reviewerId?: boolean
  revieweeId?: boolean
  createdAt?: boolean
  completedAt?: boolean
  listing?: boolean | Prisma.AuctionListingDefaultArgs<ExtArgs>
}, ExtArgs["result"]["auctionReview"]>

export type AuctionReviewSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  listingId?: boolean
  reviewerId?: boolean
  revieweeId?: boolean
  createdAt?: boolean
  completedAt?: boolean
  listing?: boolean | Prisma.AuctionListingDefaultArgs<ExtArgs>
}, ExtArgs["result"]["auctionReview"]>

export type AuctionReviewSelectScalar = {
  id?: boolean
  listingId?: boolean
  reviewerId?: boolean
  revieweeId?: boolean
  createdAt?: boolean
  completedAt?: boolean
}

export type AuctionReviewOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "listingId" | "reviewerId" | "revieweeId" | "createdAt" | "completedAt", ExtArgs["result"]["auctionReview"]>
export type AuctionReviewInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  listing?: boolean | Prisma.AuctionListingDefaultArgs<ExtArgs>
}
export type AuctionReviewIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  listing?: boolean | Prisma.AuctionListingDefaultArgs<ExtArgs>
}
export type AuctionReviewIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  listing?: boolean | Prisma.AuctionListingDefaultArgs<ExtArgs>
}

export type $AuctionReviewPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AuctionReview"
  objects: {
    listing: Prisma.$AuctionListingPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    listingId: string
    reviewerId: string
    revieweeId: string
    createdAt: Date
    completedAt: Date | null
  }, ExtArgs["result"]["auctionReview"]>
  composites: {}
}

export type AuctionReviewGetPayload<S extends boolean | null | undefined | AuctionReviewDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AuctionReviewPayload, S>

export type AuctionReviewCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AuctionReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: AuctionReviewCountAggregateInputType | true
  }

export interface AuctionReviewDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuctionReview'], meta: { name: 'AuctionReview' } }
  /**
   * Find zero or one AuctionReview that matches the filter.
   * @param {AuctionReviewFindUniqueArgs} args - Arguments to find a AuctionReview
   * @example
   * // Get one AuctionReview
   * const auctionReview = await prisma.auctionReview.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AuctionReviewFindUniqueArgs>(args: Prisma.SelectSubset<T, AuctionReviewFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AuctionReviewClient<runtime.Types.Result.GetResult<Prisma.$AuctionReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AuctionReview that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AuctionReviewFindUniqueOrThrowArgs} args - Arguments to find a AuctionReview
   * @example
   * // Get one AuctionReview
   * const auctionReview = await prisma.auctionReview.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AuctionReviewFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AuctionReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AuctionReviewClient<runtime.Types.Result.GetResult<Prisma.$AuctionReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AuctionReview that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuctionReviewFindFirstArgs} args - Arguments to find a AuctionReview
   * @example
   * // Get one AuctionReview
   * const auctionReview = await prisma.auctionReview.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AuctionReviewFindFirstArgs>(args?: Prisma.SelectSubset<T, AuctionReviewFindFirstArgs<ExtArgs>>): Prisma.Prisma__AuctionReviewClient<runtime.Types.Result.GetResult<Prisma.$AuctionReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AuctionReview that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuctionReviewFindFirstOrThrowArgs} args - Arguments to find a AuctionReview
   * @example
   * // Get one AuctionReview
   * const auctionReview = await prisma.auctionReview.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AuctionReviewFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AuctionReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AuctionReviewClient<runtime.Types.Result.GetResult<Prisma.$AuctionReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AuctionReviews that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuctionReviewFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AuctionReviews
   * const auctionReviews = await prisma.auctionReview.findMany()
   * 
   * // Get first 10 AuctionReviews
   * const auctionReviews = await prisma.auctionReview.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const auctionReviewWithIdOnly = await prisma.auctionReview.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AuctionReviewFindManyArgs>(args?: Prisma.SelectSubset<T, AuctionReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AuctionReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AuctionReview.
   * @param {AuctionReviewCreateArgs} args - Arguments to create a AuctionReview.
   * @example
   * // Create one AuctionReview
   * const AuctionReview = await prisma.auctionReview.create({
   *   data: {
   *     // ... data to create a AuctionReview
   *   }
   * })
   * 
   */
  create<T extends AuctionReviewCreateArgs>(args: Prisma.SelectSubset<T, AuctionReviewCreateArgs<ExtArgs>>): Prisma.Prisma__AuctionReviewClient<runtime.Types.Result.GetResult<Prisma.$AuctionReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AuctionReviews.
   * @param {AuctionReviewCreateManyArgs} args - Arguments to create many AuctionReviews.
   * @example
   * // Create many AuctionReviews
   * const auctionReview = await prisma.auctionReview.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AuctionReviewCreateManyArgs>(args?: Prisma.SelectSubset<T, AuctionReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AuctionReviews and returns the data saved in the database.
   * @param {AuctionReviewCreateManyAndReturnArgs} args - Arguments to create many AuctionReviews.
   * @example
   * // Create many AuctionReviews
   * const auctionReview = await prisma.auctionReview.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AuctionReviews and only return the `id`
   * const auctionReviewWithIdOnly = await prisma.auctionReview.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AuctionReviewCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AuctionReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AuctionReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AuctionReview.
   * @param {AuctionReviewDeleteArgs} args - Arguments to delete one AuctionReview.
   * @example
   * // Delete one AuctionReview
   * const AuctionReview = await prisma.auctionReview.delete({
   *   where: {
   *     // ... filter to delete one AuctionReview
   *   }
   * })
   * 
   */
  delete<T extends AuctionReviewDeleteArgs>(args: Prisma.SelectSubset<T, AuctionReviewDeleteArgs<ExtArgs>>): Prisma.Prisma__AuctionReviewClient<runtime.Types.Result.GetResult<Prisma.$AuctionReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AuctionReview.
   * @param {AuctionReviewUpdateArgs} args - Arguments to update one AuctionReview.
   * @example
   * // Update one AuctionReview
   * const auctionReview = await prisma.auctionReview.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AuctionReviewUpdateArgs>(args: Prisma.SelectSubset<T, AuctionReviewUpdateArgs<ExtArgs>>): Prisma.Prisma__AuctionReviewClient<runtime.Types.Result.GetResult<Prisma.$AuctionReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AuctionReviews.
   * @param {AuctionReviewDeleteManyArgs} args - Arguments to filter AuctionReviews to delete.
   * @example
   * // Delete a few AuctionReviews
   * const { count } = await prisma.auctionReview.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AuctionReviewDeleteManyArgs>(args?: Prisma.SelectSubset<T, AuctionReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AuctionReviews.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuctionReviewUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AuctionReviews
   * const auctionReview = await prisma.auctionReview.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AuctionReviewUpdateManyArgs>(args: Prisma.SelectSubset<T, AuctionReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AuctionReviews and returns the data updated in the database.
   * @param {AuctionReviewUpdateManyAndReturnArgs} args - Arguments to update many AuctionReviews.
   * @example
   * // Update many AuctionReviews
   * const auctionReview = await prisma.auctionReview.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AuctionReviews and only return the `id`
   * const auctionReviewWithIdOnly = await prisma.auctionReview.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AuctionReviewUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AuctionReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AuctionReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AuctionReview.
   * @param {AuctionReviewUpsertArgs} args - Arguments to update or create a AuctionReview.
   * @example
   * // Update or create a AuctionReview
   * const auctionReview = await prisma.auctionReview.upsert({
   *   create: {
   *     // ... data to create a AuctionReview
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AuctionReview we want to update
   *   }
   * })
   */
  upsert<T extends AuctionReviewUpsertArgs>(args: Prisma.SelectSubset<T, AuctionReviewUpsertArgs<ExtArgs>>): Prisma.Prisma__AuctionReviewClient<runtime.Types.Result.GetResult<Prisma.$AuctionReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AuctionReviews.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuctionReviewCountArgs} args - Arguments to filter AuctionReviews to count.
   * @example
   * // Count the number of AuctionReviews
   * const count = await prisma.auctionReview.count({
   *   where: {
   *     // ... the filter for the AuctionReviews we want to count
   *   }
   * })
  **/
  count<T extends AuctionReviewCountArgs>(
    args?: Prisma.Subset<T, AuctionReviewCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AuctionReviewCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AuctionReview.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuctionReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AuctionReviewAggregateArgs>(args: Prisma.Subset<T, AuctionReviewAggregateArgs>): Prisma.PrismaPromise<GetAuctionReviewAggregateType<T>>

  /**
   * Group by AuctionReview.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuctionReviewGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AuctionReviewGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AuctionReviewGroupByArgs['orderBy'] }
      : { orderBy?: AuctionReviewGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AuctionReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuctionReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AuctionReview model
 */
readonly fields: AuctionReviewFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AuctionReview.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AuctionReviewClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  listing<T extends Prisma.AuctionListingDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AuctionListingDefaultArgs<ExtArgs>>): Prisma.Prisma__AuctionListingClient<runtime.Types.Result.GetResult<Prisma.$AuctionListingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AuctionReview model
 */
export interface AuctionReviewFieldRefs {
  readonly id: Prisma.FieldRef<"AuctionReview", 'String'>
  readonly listingId: Prisma.FieldRef<"AuctionReview", 'String'>
  readonly reviewerId: Prisma.FieldRef<"AuctionReview", 'String'>
  readonly revieweeId: Prisma.FieldRef<"AuctionReview", 'String'>
  readonly createdAt: Prisma.FieldRef<"AuctionReview", 'DateTime'>
  readonly completedAt: Prisma.FieldRef<"AuctionReview", 'DateTime'>
}
    

// Custom InputTypes
/**
 * AuctionReview findUnique
 */
export type AuctionReviewFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionReview
   */
  select?: Prisma.AuctionReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionReview
   */
  omit?: Prisma.AuctionReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionReviewInclude<ExtArgs> | null
  /**
   * Filter, which AuctionReview to fetch.
   */
  where: Prisma.AuctionReviewWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionReview findUniqueOrThrow
 */
export type AuctionReviewFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionReview
   */
  select?: Prisma.AuctionReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionReview
   */
  omit?: Prisma.AuctionReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionReviewInclude<ExtArgs> | null
  /**
   * Filter, which AuctionReview to fetch.
   */
  where: Prisma.AuctionReviewWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionReview findFirst
 */
export type AuctionReviewFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionReview
   */
  select?: Prisma.AuctionReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionReview
   */
  omit?: Prisma.AuctionReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionReviewInclude<ExtArgs> | null
  /**
   * Filter, which AuctionReview to fetch.
   */
  where?: Prisma.AuctionReviewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AuctionReviews to fetch.
   */
  orderBy?: Prisma.AuctionReviewOrderByWithRelationInput | Prisma.AuctionReviewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AuctionReviews.
   */
  cursor?: Prisma.AuctionReviewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AuctionReviews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AuctionReviews.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AuctionReviews.
   */
  distinct?: Prisma.AuctionReviewScalarFieldEnum | Prisma.AuctionReviewScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionReview findFirstOrThrow
 */
export type AuctionReviewFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionReview
   */
  select?: Prisma.AuctionReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionReview
   */
  omit?: Prisma.AuctionReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionReviewInclude<ExtArgs> | null
  /**
   * Filter, which AuctionReview to fetch.
   */
  where?: Prisma.AuctionReviewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AuctionReviews to fetch.
   */
  orderBy?: Prisma.AuctionReviewOrderByWithRelationInput | Prisma.AuctionReviewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AuctionReviews.
   */
  cursor?: Prisma.AuctionReviewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AuctionReviews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AuctionReviews.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AuctionReviews.
   */
  distinct?: Prisma.AuctionReviewScalarFieldEnum | Prisma.AuctionReviewScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionReview findMany
 */
export type AuctionReviewFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionReview
   */
  select?: Prisma.AuctionReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionReview
   */
  omit?: Prisma.AuctionReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionReviewInclude<ExtArgs> | null
  /**
   * Filter, which AuctionReviews to fetch.
   */
  where?: Prisma.AuctionReviewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AuctionReviews to fetch.
   */
  orderBy?: Prisma.AuctionReviewOrderByWithRelationInput | Prisma.AuctionReviewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AuctionReviews.
   */
  cursor?: Prisma.AuctionReviewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AuctionReviews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AuctionReviews.
   */
  skip?: number
  distinct?: Prisma.AuctionReviewScalarFieldEnum | Prisma.AuctionReviewScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionReview create
 */
export type AuctionReviewCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionReview
   */
  select?: Prisma.AuctionReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionReview
   */
  omit?: Prisma.AuctionReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionReviewInclude<ExtArgs> | null
  /**
   * The data needed to create a AuctionReview.
   */
  data: Prisma.XOR<Prisma.AuctionReviewCreateInput, Prisma.AuctionReviewUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionReview createMany
 */
export type AuctionReviewCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AuctionReviews.
   */
  data: Prisma.AuctionReviewCreateManyInput | Prisma.AuctionReviewCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AuctionReview createManyAndReturn
 */
export type AuctionReviewCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionReview
   */
  select?: Prisma.AuctionReviewSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionReview
   */
  omit?: Prisma.AuctionReviewOmit<ExtArgs> | null
  /**
   * The data used to create many AuctionReviews.
   */
  data: Prisma.AuctionReviewCreateManyInput | Prisma.AuctionReviewCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionReviewIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * AuctionReview update
 */
export type AuctionReviewUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionReview
   */
  select?: Prisma.AuctionReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionReview
   */
  omit?: Prisma.AuctionReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionReviewInclude<ExtArgs> | null
  /**
   * The data needed to update a AuctionReview.
   */
  data: Prisma.XOR<Prisma.AuctionReviewUpdateInput, Prisma.AuctionReviewUncheckedUpdateInput>
  /**
   * Choose, which AuctionReview to update.
   */
  where: Prisma.AuctionReviewWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionReview updateMany
 */
export type AuctionReviewUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AuctionReviews.
   */
  data: Prisma.XOR<Prisma.AuctionReviewUpdateManyMutationInput, Prisma.AuctionReviewUncheckedUpdateManyInput>
  /**
   * Filter which AuctionReviews to update
   */
  where?: Prisma.AuctionReviewWhereInput
  /**
   * Limit how many AuctionReviews to update.
   */
  limit?: number
}

/**
 * AuctionReview updateManyAndReturn
 */
export type AuctionReviewUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionReview
   */
  select?: Prisma.AuctionReviewSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionReview
   */
  omit?: Prisma.AuctionReviewOmit<ExtArgs> | null
  /**
   * The data used to update AuctionReviews.
   */
  data: Prisma.XOR<Prisma.AuctionReviewUpdateManyMutationInput, Prisma.AuctionReviewUncheckedUpdateManyInput>
  /**
   * Filter which AuctionReviews to update
   */
  where?: Prisma.AuctionReviewWhereInput
  /**
   * Limit how many AuctionReviews to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionReviewIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * AuctionReview upsert
 */
export type AuctionReviewUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionReview
   */
  select?: Prisma.AuctionReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionReview
   */
  omit?: Prisma.AuctionReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionReviewInclude<ExtArgs> | null
  /**
   * The filter to search for the AuctionReview to update in case it exists.
   */
  where: Prisma.AuctionReviewWhereUniqueInput
  /**
   * In case the AuctionReview found by the `where` argument doesn't exist, create a new AuctionReview with this data.
   */
  create: Prisma.XOR<Prisma.AuctionReviewCreateInput, Prisma.AuctionReviewUncheckedCreateInput>
  /**
   * In case the AuctionReview was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AuctionReviewUpdateInput, Prisma.AuctionReviewUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionReview delete
 */
export type AuctionReviewDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionReview
   */
  select?: Prisma.AuctionReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionReview
   */
  omit?: Prisma.AuctionReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionReviewInclude<ExtArgs> | null
  /**
   * Filter which AuctionReview to delete.
   */
  where: Prisma.AuctionReviewWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AuctionReview deleteMany
 */
export type AuctionReviewDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AuctionReviews to delete
   */
  where?: Prisma.AuctionReviewWhereInput
  /**
   * Limit how many AuctionReviews to delete.
   */
  limit?: number
}

/**
 * AuctionReview without action
 */
export type AuctionReviewDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuctionReview
   */
  select?: Prisma.AuctionReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuctionReview
   */
  omit?: Prisma.AuctionReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuctionReviewInclude<ExtArgs> | null
}
